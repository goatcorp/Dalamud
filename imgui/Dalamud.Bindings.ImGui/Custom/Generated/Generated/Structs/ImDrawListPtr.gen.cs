// <auto-generated/>

using HexaGen.Runtime;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Dalamud.Bindings.ImGui;

public unsafe partial struct ImDrawListPtr
{
		public unsafe int _CalcCircleAutoSegmentCount(float radius)
		{
			int ret = ImGuiNative._CalcCircleAutoSegmentCount(Handle, radius);
			return ret;
		}
		public unsafe void _ClearFreeMemory()
		{
			ImGuiNative._ClearFreeMemory(Handle);
		}
		public unsafe void _OnChangedClipRect()
		{
			ImGuiNative._OnChangedClipRect(Handle);
		}
		public unsafe void _OnChangedTextureID()
		{
			ImGuiNative._OnChangedTextureID(Handle);
		}
		public unsafe void _OnChangedVtxOffset()
		{
			ImGuiNative._OnChangedVtxOffset(Handle);
		}
		public unsafe void _PathArcToFastEx(Vector2 center, float radius, int aMinSample, int aMaxSample, int aStep)
		{
			ImGuiNative._PathArcToFastEx(Handle, center, radius, aMinSample, aMaxSample, aStep);
		}
		public unsafe void _PathArcToN(Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			ImGuiNative._PathArcToN(Handle, center, radius, aMin, aMax, numSegments);
		}
		public unsafe void _PopUnusedDrawCmd()
		{
			ImGuiNative._PopUnusedDrawCmd(Handle);
		}
		public unsafe void _ResetForNewFrame()
		{
			ImGuiNative._ResetForNewFrame(Handle);
		}
		public unsafe void _TryMergeDrawCmds()
		{
			ImGuiNative._TryMergeDrawCmds(Handle);
		}
		public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int numSegments)
		{
			ImGuiNative.AddBezierCubic(Handle, p1, p2, p3, p4, col, thickness, numSegments);
		}
		public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			ImGuiNative.AddBezierCubic(Handle, p1, p2, p3, p4, col, thickness, (int)(0));
		}
		public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int numSegments)
		{
			ImGuiNative.AddBezierQuadratic(Handle, p1, p2, p3, col, thickness, numSegments);
		}
		public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			ImGuiNative.AddBezierQuadratic(Handle, p1, p2, p3, col, thickness, (int)(0));
		}
		public unsafe void AddCallback(ImDrawCallback callback, void* callbackData)
		{
			ImGuiNative.AddCallback(Handle, callback, callbackData);
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			ImGuiNative.AddCircle(Handle, center, radius, col, numSegments, thickness);
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddCircle(Handle, center, radius, col, numSegments, (float)(1.0f));
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col)
		{
			ImGuiNative.AddCircle(Handle, center, radius, col, (int)(0), (float)(1.0f));
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, float thickness)
		{
			ImGuiNative.AddCircle(Handle, center, radius, col, (int)(0), thickness);
		}
		public unsafe void AddCircleFilled(Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddCircleFilled(Handle, center, radius, col, numSegments);
		}
		public unsafe void AddCircleFilled(Vector2 center, float radius, uint col)
		{
			ImGuiNative.AddCircleFilled(Handle, center, radius, col, (int)(0));
		}
		public unsafe void AddConvexPolyFilled(Vector2* points, int numPoints, uint col)
		{
			ImGuiNative.AddConvexPolyFilled(Handle, points, numPoints, col);
		}
		public unsafe void AddConvexPolyFilled(ref Vector2 points, int numPoints, uint col)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImGuiNative.AddConvexPolyFilled(Handle, (Vector2*)ppoints, numPoints, col);
			}
		}
		public unsafe void AddDrawCmd()
		{
			ImGuiNative.AddDrawCmd(Handle);
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, uvMin, uvMax, col);
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, uint col)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddImage(Handle, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, uint col)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, uint col)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, uint col)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddImageQuad(Handle, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public unsafe void AddImageRounded(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddImageRounded(Handle, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
		}
		public unsafe void AddImageRounded(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding)
		{
			ImGuiNative.AddImageRounded(Handle, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (ImDrawFlags)(0));
		}
		public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col, float thickness)
		{
			ImGuiNative.AddLine(Handle, p1, p2, col, thickness);
		}
		public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col)
		{
			ImGuiNative.AddLine(Handle, p1, p2, col, (float)(1.0f));
		}
		public unsafe void AddNgon(Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			ImGuiNative.AddNgon(Handle, center, radius, col, numSegments, thickness);
		}
		public unsafe void AddNgon(Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddNgon(Handle, center, radius, col, numSegments, (float)(1.0f));
		}
		public unsafe void AddNgonFilled(Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddNgonFilled(Handle, center, radius, col, numSegments);
		}
		public unsafe void AddPolyline(Vector2* points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddPolyline(Handle, points, numPoints, col, flags, thickness);
		}
		public unsafe void AddPolyline(ref Vector2 points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImGuiNative.AddPolyline(Handle, (Vector2*)ppoints, numPoints, col, flags, thickness);
			}
		}
		public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			ImGuiNative.AddQuad(Handle, p1, p2, p3, p4, col, thickness);
		}
		public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddQuad(Handle, p1, p2, p3, p4, col, (float)(1.0f));
		}
		public unsafe void AddQuadFilled(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddQuadFilled(Handle, p1, p2, p3, p4, col);
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, rounding, flags, thickness);
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, rounding, flags, (float)(1.0f));
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, float thickness)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddRect(Handle, pMin, pMax, col, (float)(0.0f), flags, thickness);
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddRectFilled(Handle, pMin, pMax, col, rounding, flags);
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			ImGuiNative.AddRectFilled(Handle, pMin, pMax, col, rounding, (ImDrawFlags)(0));
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddRectFilled(Handle, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			ImGuiNative.AddRectFilled(Handle, pMin, pMax, col, (float)(0.0f), flags);
		}
		public unsafe void AddRectFilledMultiColor(Vector2 pMin, Vector2 pMax, uint colUprLeft, uint colUprRight, uint colBotRight, uint colBotLeft)
		{
			ImGuiNative.AddRectFilledMultiColor(Handle, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
		}
		public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			ImGuiNative.AddTriangle(Handle, p1, p2, p3, col, thickness);
		}
		public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			ImGuiNative.AddTriangle(Handle, p1, p2, p3, col, (float)(1.0f));
		}
		public unsafe void AddTriangleFilled(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			ImGuiNative.AddTriangleFilled(Handle, p1, p2, p3, col);
		}
		public unsafe void ChannelsMerge()
		{
			ImGuiNative.ChannelsMerge(Handle);
		}
		public unsafe void ChannelsSetCurrent(int n)
		{
			ImGuiNative.ChannelsSetCurrent(Handle, n);
		}
		public unsafe void ChannelsSplit(int count)
		{
			ImGuiNative.ChannelsSplit(Handle, count);
		}
		public unsafe ImDrawListPtr CloneOutput()
		{
			ImDrawListPtr ret = ImGuiNative.CloneOutput(Handle);
			return ret;
		}
		public unsafe void Destroy()
		{
			ImGuiNative.Destroy(Handle);
		}
		public unsafe void PathArcTo(Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			ImGuiNative.PathArcTo(Handle, center, radius, aMin, aMax, numSegments);
		}
		public unsafe void PathArcTo(Vector2 center, float radius, float aMin, float aMax)
		{
			ImGuiNative.PathArcTo(Handle, center, radius, aMin, aMax, (int)(0));
		}
		public unsafe void PathArcToFast(Vector2 center, float radius, int aMinOf12, int aMaxOf12)
		{
			ImGuiNative.PathArcToFast(Handle, center, radius, aMinOf12, aMaxOf12);
		}
		public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4, int numSegments)
		{
			ImGuiNative.PathBezierCubicCurveTo(Handle, p2, p3, p4, numSegments);
		}
		public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4)
		{
			ImGuiNative.PathBezierCubicCurveTo(Handle, p2, p3, p4, (int)(0));
		}
		public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3, int numSegments)
		{
			ImGuiNative.PathBezierQuadraticCurveTo(Handle, p2, p3, numSegments);
		}
		public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3)
		{
			ImGuiNative.PathBezierQuadraticCurveTo(Handle, p2, p3, (int)(0));
		}
		public unsafe void PathClear()
		{
			ImGuiNative.PathClear(Handle);
		}
		public unsafe void PathFillConvex(uint col)
		{
			ImGuiNative.PathFillConvex(Handle, col);
		}
		public unsafe void PathLineTo(Vector2 pos)
		{
			ImGuiNative.PathLineTo(Handle, pos);
		}
		public unsafe void PathLineToMergeDuplicate(Vector2 pos)
		{
			ImGuiNative.PathLineToMergeDuplicate(Handle, pos);
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.PathRect(Handle, rectMin, rectMax, rounding, flags);
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, float rounding)
		{
			ImGuiNative.PathRect(Handle, rectMin, rectMax, rounding, (ImDrawFlags)(0));
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax)
		{
			ImGuiNative.PathRect(Handle, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, ImDrawFlags flags)
		{
			ImGuiNative.PathRect(Handle, rectMin, rectMax, (float)(0.0f), flags);
		}
		public unsafe void PathStroke(uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.PathStroke(Handle, col, flags, thickness);
		}
		public unsafe void PathStroke(uint col, ImDrawFlags flags)
		{
			ImGuiNative.PathStroke(Handle, col, flags, (float)(1.0f));
		}
		public unsafe void PathStroke(uint col)
		{
			ImGuiNative.PathStroke(Handle, col, (ImDrawFlags)(0), (float)(1.0f));
		}
		public unsafe void PathStroke(uint col, float thickness)
		{
			ImGuiNative.PathStroke(Handle, col, (ImDrawFlags)(0), thickness);
		}
		public unsafe void PopClipRect()
		{
			ImGuiNative.PopClipRect(Handle);
		}
		public unsafe void PopTextureID()
		{
			ImGuiNative.PopTextureID(Handle);
		}
		public unsafe void PrimQuadUV(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uvA, Vector2 uvB, Vector2 uvC, Vector2 uvD, uint col)
		{
			ImGuiNative.PrimQuadUV(Handle, a, b, c, d, uvA, uvB, uvC, uvD, col);
		}
		public unsafe void PrimRect(Vector2 a, Vector2 b, uint col)
		{
			ImGuiNative.PrimRect(Handle, a, b, col);
		}
		public unsafe void PrimRectUV(Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, uint col)
		{
			ImGuiNative.PrimRectUV(Handle, a, b, uvA, uvB, col);
		}
		public unsafe void PrimReserve(int idxCount, int vtxCount)
		{
			ImGuiNative.PrimReserve(Handle, idxCount, vtxCount);
		}
		public unsafe void PrimUnreserve(int idxCount, int vtxCount)
		{
			ImGuiNative.PrimUnreserve(Handle, idxCount, vtxCount);
		}
		public unsafe void PrimVtx(Vector2 pos, Vector2 uv, uint col)
		{
			ImGuiNative.PrimVtx(Handle, pos, uv, col);
		}
		public unsafe void PrimWriteIdx(ushort idx)
		{
			ImGuiNative.PrimWriteIdx(Handle, idx);
		}
		public unsafe void PrimWriteVtx(Vector2 pos, Vector2 uv, uint col)
		{
			ImGuiNative.PrimWriteVtx(Handle, pos, uv, col);
		}
		public unsafe void PushClipRect(Vector2 clipRectMin, Vector2 clipRectMax, bool intersectWithCurrentClipRect)
		{
			ImGuiNative.PushClipRect(Handle, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
		}
		public unsafe void PushClipRect(Vector2 clipRectMin, Vector2 clipRectMax)
		{
			ImGuiNative.PushClipRect(Handle, clipRectMin, clipRectMax, (byte)(0));
		}
		public unsafe void PushClipRectFullScreen()
		{
			ImGuiNative.PushClipRectFullScreen(Handle);
		}
		public unsafe void PushTextureID(ImTextureID textureId)
		{
			ImGuiNative.PushTextureID(Handle, textureId);
		}
}
// DISCARDED: AddText

