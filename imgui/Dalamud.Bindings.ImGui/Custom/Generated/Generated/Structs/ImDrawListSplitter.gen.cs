// <auto-generated/>

using HexaGen.Runtime;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Dalamud.Bindings.ImGui;

public unsafe partial struct ImDrawListSplitter
{
		public unsafe void Clear()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.Clear(@this);
			}
		}
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.ClearFreeMemory(@this);
			}
		}
		public unsafe void Destroy()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.Destroy(@this);
			}
		}
		public unsafe void Merge(ImDrawListPtr drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.Merge(@this, drawList);
			}
		}
		public unsafe void Merge(ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.Merge(@this, (ImDrawList*)pdrawList);
				}
			}
		}
		public unsafe void SetCurrentChannel(ImDrawListPtr drawList, int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.SetCurrentChannel(@this, drawList, channelIdx);
			}
		}
		public unsafe void SetCurrentChannel(ref ImDrawList drawList, int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.SetCurrentChannel(@this, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}
		public unsafe void Split(ImDrawListPtr drawList, int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGuiNative.Split(@this, drawList, count);
			}
		}
		public unsafe void Split(ref ImDrawList drawList, int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.Split(@this, (ImDrawList*)pdrawList, count);
				}
			}
		}
}

