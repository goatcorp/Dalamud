// <auto-generated/>

using HexaGen.Runtime;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Dalamud.Bindings.ImGui;

public unsafe partial struct ImGuiTextBuffer
{
		public unsafe byte* begin()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGuiNative.begin(@this);
				return ret;
			}
		}
		public unsafe string beginS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiNative.begin(@this));
				return ret;
			}
		}
		public unsafe byte* c_str()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGuiNative.c_str(@this);
				return ret;
			}
		}
		public unsafe string c_strS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiNative.c_str(@this));
				return ret;
			}
		}
		public unsafe void clear()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGuiNative.clear(@this);
			}
		}
		public unsafe void Destroy()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGuiNative.Destroy(@this);
			}
		}
		public unsafe bool empty()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte ret = ImGuiNative.empty(@this);
				return ret != 0;
			}
		}
		public unsafe byte* end()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGuiNative.end(@this);
				return ret;
			}
		}
		public unsafe string endS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiNative.end(@this));
				return ret;
			}
		}
		public unsafe void reserve(int capacity)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGuiNative.reserve(@this, capacity);
			}
		}
		public unsafe int size()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				int ret = ImGuiNative.size(@this);
				return ret;
			}
		}
}
// DISCARDED: append
// DISCARDED: appendf
// DISCARDED: appendfv

