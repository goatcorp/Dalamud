// <auto-generated/>

using HexaGen.Runtime;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Dalamud.Bindings.ImGui;

public unsafe partial struct ImDrawList
{
		public unsafe int _CalcCircleAutoSegmentCount(float radius)
		{
			fixed (ImDrawList* @this = &this)
			{
				int ret = ImGuiNative._CalcCircleAutoSegmentCount(@this, radius);
				return ret;
			}
		}
		public unsafe void _ClearFreeMemory()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._ClearFreeMemory(@this);
			}
		}
		public unsafe void _OnChangedClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._OnChangedClipRect(@this);
			}
		}
		public unsafe void _OnChangedTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._OnChangedTextureID(@this);
			}
		}
		public unsafe void _OnChangedVtxOffset()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._OnChangedVtxOffset(@this);
			}
		}
		public unsafe void _PathArcToFastEx(Vector2 center, float radius, int aMinSample, int aMaxSample, int aStep)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._PathArcToFastEx(@this, center, radius, aMinSample, aMaxSample, aStep);
			}
		}
		public unsafe void _PathArcToN(Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._PathArcToN(@this, center, radius, aMin, aMax, numSegments);
			}
		}
		public unsafe void _PopUnusedDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._PopUnusedDrawCmd(@this);
			}
		}
		public unsafe void _ResetForNewFrame()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._ResetForNewFrame(@this);
			}
		}
		public unsafe void _TryMergeDrawCmds()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative._TryMergeDrawCmds(@this);
			}
		}
		public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddBezierCubic(@this, p1, p2, p3, p4, col, thickness, numSegments);
			}
		}
		public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddBezierCubic(@this, p1, p2, p3, p4, col, thickness, (int)(0));
			}
		}
		public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddBezierQuadratic(@this, p1, p2, p3, col, thickness, numSegments);
			}
		}
		public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddBezierQuadratic(@this, p1, p2, p3, col, thickness, (int)(0));
			}
		}
		public unsafe void AddCallback(ImDrawCallback callback, void* callbackData)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCallback(@this, callback, callbackData);
			}
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircle(@this, center, radius, col, numSegments, thickness);
			}
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircle(@this, center, radius, col, numSegments, (float)(1.0f));
			}
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircle(@this, center, radius, col, (int)(0), (float)(1.0f));
			}
		}
		public unsafe void AddCircle(Vector2 center, float radius, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircle(@this, center, radius, col, (int)(0), thickness);
			}
		}
		public unsafe void AddCircleFilled(Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircleFilled(@this, center, radius, col, numSegments);
			}
		}
		public unsafe void AddCircleFilled(Vector2 center, float radius, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddCircleFilled(@this, center, radius, col, (int)(0));
			}
		}
		public unsafe void AddConvexPolyFilled(Vector2* points, int numPoints, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddConvexPolyFilled(@this, points, numPoints, col);
			}
		}
		public unsafe void AddConvexPolyFilled(ref Vector2 points, int numPoints, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGuiNative.AddConvexPolyFilled(@this, (Vector2*)ppoints, numPoints, col);
				}
			}
		}
		public unsafe void AddDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddDrawCmd(@this);
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, uvMin, uvMax, col);
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
			}
		}
		public unsafe void AddImage(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImage(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public unsafe void AddImageQuad(ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageQuad(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public unsafe void AddImageRounded(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageRounded(@this, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
			}
		}
		public unsafe void AddImageRounded(ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddImageRounded(@this, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (ImDrawFlags)(0));
			}
		}
		public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddLine(@this, p1, p2, col, thickness);
			}
		}
		public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddLine(@this, p1, p2, col, (float)(1.0f));
			}
		}
		public unsafe void AddNgon(Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddNgon(@this, center, radius, col, numSegments, thickness);
			}
		}
		public unsafe void AddNgon(Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddNgon(@this, center, radius, col, numSegments, (float)(1.0f));
			}
		}
		public unsafe void AddNgonFilled(Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddNgonFilled(@this, center, radius, col, numSegments);
			}
		}
		public unsafe void AddPolyline(Vector2* points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddPolyline(@this, points, numPoints, col, flags, thickness);
			}
		}
		public unsafe void AddPolyline(ref Vector2 points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGuiNative.AddPolyline(@this, (Vector2*)ppoints, numPoints, col, flags, thickness);
				}
			}
		}
		public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddQuad(@this, p1, p2, p3, p4, col, thickness);
			}
		}
		public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddQuad(@this, p1, p2, p3, p4, col, (float)(1.0f));
			}
		}
		public unsafe void AddQuadFilled(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddQuadFilled(@this, p1, p2, p3, p4, col);
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, rounding, flags, thickness);
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, rounding, flags, (float)(1.0f));
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, float rounding, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
			}
		}
		public unsafe void AddRect(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRect(@this, pMin, pMax, col, (float)(0.0f), flags, thickness);
			}
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRectFilled(@this, pMin, pMax, col, rounding, flags);
			}
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRectFilled(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0));
			}
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRectFilled(@this, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
			}
		}
		public unsafe void AddRectFilled(Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRectFilled(@this, pMin, pMax, col, (float)(0.0f), flags);
			}
		}
		public unsafe void AddRectFilledMultiColor(Vector2 pMin, Vector2 pMax, uint colUprLeft, uint colUprRight, uint colBotRight, uint colBotLeft)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddRectFilledMultiColor(@this, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			}
		}
		public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddTriangle(@this, p1, p2, p3, col, thickness);
			}
		}
		public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddTriangle(@this, p1, p2, p3, col, (float)(1.0f));
			}
		}
		public unsafe void AddTriangleFilled(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.AddTriangleFilled(@this, p1, p2, p3, col);
			}
		}
		public unsafe void ChannelsMerge()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.ChannelsMerge(@this);
			}
		}
		public unsafe void ChannelsSetCurrent(int n)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.ChannelsSetCurrent(@this, n);
			}
		}
		public unsafe void ChannelsSplit(int count)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.ChannelsSplit(@this, count);
			}
		}
		public unsafe ImDrawList* CloneOutput()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImDrawList* ret = ImGuiNative.CloneOutput(@this);
				return ret;
			}
		}
		public unsafe void Destroy()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.Destroy(@this);
			}
		}
		public unsafe void PathArcTo(Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathArcTo(@this, center, radius, aMin, aMax, numSegments);
			}
		}
		public unsafe void PathArcTo(Vector2 center, float radius, float aMin, float aMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathArcTo(@this, center, radius, aMin, aMax, (int)(0));
			}
		}
		public unsafe void PathArcToFast(Vector2 center, float radius, int aMinOf12, int aMaxOf12)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathArcToFast(@this, center, radius, aMinOf12, aMaxOf12);
			}
		}
		public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathBezierCubicCurveTo(@this, p2, p3, p4, numSegments);
			}
		}
		public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathBezierCubicCurveTo(@this, p2, p3, p4, (int)(0));
			}
		}
		public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3, int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathBezierQuadraticCurveTo(@this, p2, p3, numSegments);
			}
		}
		public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathBezierQuadraticCurveTo(@this, p2, p3, (int)(0));
			}
		}
		public unsafe void PathClear()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathClear(@this);
			}
		}
		public unsafe void PathFillConvex(uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathFillConvex(@this, col);
			}
		}
		public unsafe void PathLineTo(Vector2 pos)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathLineTo(@this, pos);
			}
		}
		public unsafe void PathLineToMergeDuplicate(Vector2 pos)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathLineToMergeDuplicate(@this, pos);
			}
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathRect(@this, rectMin, rectMax, rounding, flags);
			}
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathRect(@this, rectMin, rectMax, rounding, (ImDrawFlags)(0));
			}
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathRect(@this, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
			}
		}
		public unsafe void PathRect(Vector2 rectMin, Vector2 rectMax, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathRect(@this, rectMin, rectMax, (float)(0.0f), flags);
			}
		}
		public unsafe void PathStroke(uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathStroke(@this, col, flags, thickness);
			}
		}
		public unsafe void PathStroke(uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathStroke(@this, col, flags, (float)(1.0f));
			}
		}
		public unsafe void PathStroke(uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathStroke(@this, col, (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public unsafe void PathStroke(uint col, float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PathStroke(@this, col, (ImDrawFlags)(0), thickness);
			}
		}
		public unsafe void PopClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PopClipRect(@this);
			}
		}
		public unsafe void PopTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PopTextureID(@this);
			}
		}
		public unsafe void PrimQuadUV(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uvA, Vector2 uvB, Vector2 uvC, Vector2 uvD, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimQuadUV(@this, a, b, c, d, uvA, uvB, uvC, uvD, col);
			}
		}
		public unsafe void PrimRect(Vector2 a, Vector2 b, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimRect(@this, a, b, col);
			}
		}
		public unsafe void PrimRectUV(Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimRectUV(@this, a, b, uvA, uvB, col);
			}
		}
		public unsafe void PrimReserve(int idxCount, int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimReserve(@this, idxCount, vtxCount);
			}
		}
		public unsafe void PrimUnreserve(int idxCount, int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimUnreserve(@this, idxCount, vtxCount);
			}
		}
		public unsafe void PrimVtx(Vector2 pos, Vector2 uv, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimVtx(@this, pos, uv, col);
			}
		}
		public unsafe void PrimWriteIdx(ushort idx)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimWriteIdx(@this, idx);
			}
		}
		public unsafe void PrimWriteVtx(Vector2 pos, Vector2 uv, uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PrimWriteVtx(@this, pos, uv, col);
			}
		}
		public unsafe void PushClipRect(Vector2 clipRectMin, Vector2 clipRectMax, bool intersectWithCurrentClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PushClipRect(@this, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
			}
		}
		public unsafe void PushClipRect(Vector2 clipRectMin, Vector2 clipRectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PushClipRect(@this, clipRectMin, clipRectMax, (byte)(0));
			}
		}
		public unsafe void PushClipRectFullScreen()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PushClipRectFullScreen(@this);
			}
		}
		public unsafe void PushTextureID(ImTextureID textureId)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGuiNative.PushTextureID(@this, textureId);
			}
		}
}
// DISCARDED: AddText

