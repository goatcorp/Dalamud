// <auto-generated/>

using HexaGen.Runtime;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Dalamud.Bindings.ImGui;

public unsafe partial class ImGui
{
		public static Vector2* ImVec2()
		{
			Vector2* ret = ImGuiNative.ImVec2();
			return ret;
		}
		public static Vector2* ImVec2(float x, float y)
		{
			Vector2* ret = ImGuiNative.ImVec2(x, y);
			return ret;
		}
		public static void Destroy(Vector2* self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(ref Vector2 self)
		{
			fixed (Vector2* pself = &self)
			{
				ImGuiNative.Destroy((Vector2*)pself);
			}
		}
		public static void Destroy(Vector4* self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(ref Vector4 self)
		{
			fixed (Vector4* pself = &self)
			{
				ImGuiNative.Destroy((Vector4*)pself);
			}
		}
		public static void Destroy(this ImGuiStylePtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStyle self)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStyle*)pself);
			}
		}
		public static void Destroy(this ImGuiIOPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiIO*)pself);
			}
		}
		public static void Destroy(this ImGuiInputTextCallbackDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiInputTextCallbackData*)pself);
			}
		}
		public static void Destroy(this ImGuiWindowClassPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiWindowClass self)
		{
			fixed (ImGuiWindowClass* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiWindowClass*)pself);
			}
		}
		public static void Destroy(this ImGuiPayloadPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPayload*)pself);
			}
		}
		public static void Destroy(this ImGuiTableColumnSortSpecsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableColumnSortSpecs self)
		{
			fixed (ImGuiTableColumnSortSpecs* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableColumnSortSpecs*)pself);
			}
		}
		public static void Destroy(this ImGuiTableSortSpecsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableSortSpecs self)
		{
			fixed (ImGuiTableSortSpecs* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableSortSpecs*)pself);
			}
		}
		public static void Destroy(this ImGuiOnceUponAFramePtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiOnceUponAFrame self)
		{
			fixed (ImGuiOnceUponAFrame* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiOnceUponAFrame*)pself);
			}
		}
		public static void Destroy(this ImGuiTextFilterPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTextFilter*)pself);
			}
		}
		public static void Destroy(this ImGuiTextRangePtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTextRange*)pself);
			}
		}
		public static void Destroy(this ImGuiTextBufferPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTextBuffer*)pself);
			}
		}
		public static void Destroy(this ImGuiStoragePairPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStoragePair self)
		{
			fixed (ImGuiStoragePair* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStoragePair*)pself);
			}
		}
		public static void Destroy(this ImGuiListClipperPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiListClipper*)pself);
			}
		}
		public static void Destroy(this ImColorPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImColor self)
		{
			fixed (ImColor* pself = &self)
			{
				ImGuiNative.Destroy((ImColor*)pself);
			}
		}
		public static void Destroy(this ImDrawCmdPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImDrawCmd self)
		{
			fixed (ImDrawCmd* pself = &self)
			{
				ImGuiNative.Destroy((ImDrawCmd*)pself);
			}
		}
		public static void Destroy(this ImDrawListSplitterPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.Destroy((ImDrawListSplitter*)pself);
			}
		}
		public static void Destroy(this ImDrawListPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.Destroy((ImDrawList*)pself);
			}
		}
		public static void Destroy(this ImDrawDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				ImGuiNative.Destroy((ImDrawData*)pself);
			}
		}
		public static void Destroy(this ImFontConfigPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImFontConfig self)
		{
			fixed (ImFontConfig* pself = &self)
			{
				ImGuiNative.Destroy((ImFontConfig*)pself);
			}
		}
		public static void Destroy(this ImFontGlyphRangesBuilderPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImFontGlyphRangesBuilder self)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.Destroy((ImFontGlyphRangesBuilder*)pself);
			}
		}
		public static void Destroy(this ImFontAtlasCustomRectPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImFontAtlasCustomRect self)
		{
			fixed (ImFontAtlasCustomRect* pself = &self)
			{
				ImGuiNative.Destroy((ImFontAtlasCustomRect*)pself);
			}
		}
		public static void Destroy(this ImFontAtlasPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.Destroy((ImFontAtlas*)pself);
			}
		}
		public static void Destroy(this ImFontPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImFont self)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.Destroy((ImFont*)pself);
			}
		}
		public static void Destroy(this ImGuiViewportPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiViewport self)
		{
			fixed (ImGuiViewport* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiViewport*)pself);
			}
		}
		public static void Destroy(this ImGuiPlatformIOPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPlatformIO self)
		{
			fixed (ImGuiPlatformIO* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPlatformIO*)pself);
			}
		}
		public static void Destroy(this ImGuiPlatformMonitorPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPlatformMonitor self)
		{
			fixed (ImGuiPlatformMonitor* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPlatformMonitor*)pself);
			}
		}
		public static void Destroy(this ImGuiPlatformImeDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPlatformImeData self)
		{
			fixed (ImGuiPlatformImeData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPlatformImeData*)pself);
			}
		}
		public static void Destroy(ImVec1Ptr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(ref ImVec1 self)
		{
			fixed (ImVec1* pself = &self)
			{
				ImGuiNative.Destroy((ImVec1*)pself);
			}
		}
		public static void Destroy(ImVec2IhPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(ref ImVec2Ih self)
		{
			fixed (ImVec2Ih* pself = &self)
			{
				ImGuiNative.Destroy((ImVec2Ih*)pself);
			}
		}
		public static void Destroy(this ImRectPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImGuiNative.Destroy((ImRect*)pself);
			}
		}
		public static void Destroy(this ImDrawListSharedDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImDrawListSharedData self)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImGuiNative.Destroy((ImDrawListSharedData*)pself);
			}
		}
		public static void Destroy(this ImGuiStyleModPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStyleMod self)
		{
			fixed (ImGuiStyleMod* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStyleMod*)pself);
			}
		}
		public static void Destroy(this ImGuiComboPreviewDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiComboPreviewData self)
		{
			fixed (ImGuiComboPreviewData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiComboPreviewData*)pself);
			}
		}
		public static void Destroy(this ImGuiMenuColumnsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiMenuColumns self)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiMenuColumns*)pself);
			}
		}
		public static void Destroy(this ImGuiInputTextStatePtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiInputTextState*)pself);
			}
		}
		public static void Destroy(this ImGuiPopupDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPopupData self)
		{
			fixed (ImGuiPopupData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPopupData*)pself);
			}
		}
		public static void Destroy(this ImGuiNextWindowDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiNextWindowData*)pself);
			}
		}
		public static void Destroy(this ImGuiNextItemDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiNextItemData*)pself);
			}
		}
		public static void Destroy(this ImGuiLastItemDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiLastItemData self)
		{
			fixed (ImGuiLastItemData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiLastItemData*)pself);
			}
		}
		public static void Destroy(this ImGuiStackSizesPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStackSizes self)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStackSizes*)pself);
			}
		}
		public static void Destroy(this ImGuiPtrOrIndexPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiPtrOrIndex self)
		{
			fixed (ImGuiPtrOrIndex* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiPtrOrIndex*)pself);
			}
		}
		public static void Destroy(this ImGuiInputEventPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiInputEvent self)
		{
			fixed (ImGuiInputEvent* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiInputEvent*)pself);
			}
		}
		public static void Destroy(this ImGuiListClipperDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiListClipperData self)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiListClipperData*)pself);
			}
		}
		public static void Destroy(this ImGuiNavItemDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiNavItemData self)
		{
			fixed (ImGuiNavItemData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiNavItemData*)pself);
			}
		}
		public static void Destroy(this ImGuiOldColumnDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiOldColumnData self)
		{
			fixed (ImGuiOldColumnData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiOldColumnData*)pself);
			}
		}
		public static void Destroy(this ImGuiOldColumnsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiOldColumns self)
		{
			fixed (ImGuiOldColumns* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiOldColumns*)pself);
			}
		}
		public static void Destroy(this ImGuiDockContextPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiDockContext self)
		{
			fixed (ImGuiDockContext* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiDockContext*)pself);
			}
		}
		public static void Destroy(this ImGuiWindowSettingsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiWindowSettings*)pself);
			}
		}
		public static void Destroy(this ImGuiSettingsHandlerPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiSettingsHandler self)
		{
			fixed (ImGuiSettingsHandler* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiSettingsHandler*)pself);
			}
		}
		public static void Destroy(this ImGuiMetricsConfigPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiMetricsConfig self)
		{
			fixed (ImGuiMetricsConfig* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiMetricsConfig*)pself);
			}
		}
		public static void Destroy(this ImGuiStackLevelInfoPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStackLevelInfo self)
		{
			fixed (ImGuiStackLevelInfo* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStackLevelInfo*)pself);
			}
		}
		public static void Destroy(this ImGuiStackToolPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiStackTool self)
		{
			fixed (ImGuiStackTool* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiStackTool*)pself);
			}
		}
		public static void Destroy(this ImGuiContextHookPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiContextHook self)
		{
			fixed (ImGuiContextHook* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiContextHook*)pself);
			}
		}
		public static void Destroy(this ImGuiContextPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiContext self)
		{
			fixed (ImGuiContext* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiContext*)pself);
			}
		}
		public static void Destroy(this ImGuiTabItemPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTabItem self)
		{
			fixed (ImGuiTabItem* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTabItem*)pself);
			}
		}
		public static void Destroy(this ImGuiTabBarPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTabBar self)
		{
			fixed (ImGuiTabBar* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTabBar*)pself);
			}
		}
		public static void Destroy(this ImGuiTableColumnPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableColumn self)
		{
			fixed (ImGuiTableColumn* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableColumn*)pself);
			}
		}
		public static void Destroy(this ImGuiTableInstanceDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableInstanceData self)
		{
			fixed (ImGuiTableInstanceData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableInstanceData*)pself);
			}
		}
		public static void Destroy(this ImGuiTableTempDataPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableTempData self)
		{
			fixed (ImGuiTableTempData* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableTempData*)pself);
			}
		}
		public static void Destroy(this ImGuiTableColumnSettingsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableColumnSettings self)
		{
			fixed (ImGuiTableColumnSettings* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableColumnSettings*)pself);
			}
		}
		public static void Destroy(this ImGuiTableSettingsPtr self)
		{
			ImGuiNative.Destroy(self);
		}
		public static void Destroy(this ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiNative.Destroy((ImGuiTableSettings*)pself);
			}
		}
		public static Vector4* ImVec4()
		{
			Vector4* ret = ImGuiNative.ImVec4();
			return ret;
		}
		public static Vector4* ImVec4(float x, float y, float z, float w)
		{
			Vector4* ret = ImGuiNative.ImVec4(x, y, z, w);
			return ret;
		}
		public static ImGuiContextPtr CreateContext(ImFontAtlasPtr sharedFontAtlas)
		{
			ImGuiContextPtr ret = ImGuiNative.CreateContext(sharedFontAtlas);
			return ret;
		}
		public static ImGuiContextPtr CreateContext()
		{
			ImGuiContextPtr ret = ImGuiNative.CreateContext((ImFontAtlas*)(default));
			return ret;
		}
		public static ImGuiContextPtr CreateContext(ref ImFontAtlas sharedFontAtlas)
		{
			fixed (ImFontAtlas* psharedFontAtlas = &sharedFontAtlas)
			{
				ImGuiContextPtr ret = ImGuiNative.CreateContext((ImFontAtlas*)psharedFontAtlas);
				return ret;
			}
		}
		public static void DestroyContext(ImGuiContextPtr ctx)
		{
			ImGuiNative.DestroyContext(ctx);
		}
		public static void DestroyContext()
		{
			ImGuiNative.DestroyContext((ImGuiContext*)(default));
		}
		public static void DestroyContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiNative.DestroyContext((ImGuiContext*)pctx);
			}
		}
		public static ImGuiContextPtr GetCurrentContext()
		{
			ImGuiContextPtr ret = ImGuiNative.GetCurrentContext();
			return ret;
		}
		public static void SetCurrentContext(ImGuiContextPtr ctx)
		{
			ImGuiNative.SetCurrentContext(ctx);
		}
		public static void SetCurrentContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiNative.SetCurrentContext((ImGuiContext*)pctx);
			}
		}
		public static ImGuiIOPtr GetIO()
		{
			ImGuiIOPtr ret = ImGuiNative.GetIO();
			return ret;
		}
		public static ImGuiStylePtr GetStyle()
		{
			ImGuiStylePtr ret = ImGuiNative.GetStyle();
			return ret;
		}
		public static void NewFrame()
		{
			ImGuiNative.NewFrame();
		}
		public static void EndFrame()
		{
			ImGuiNative.EndFrame();
		}
		public static void Render()
		{
			ImGuiNative.Render();
		}
		public static ImDrawDataPtr GetDrawData()
		{
			ImDrawDataPtr ret = ImGuiNative.GetDrawData();
			return ret;
		}
		public static void ShowDemoWindow(bool* pOpen)
		{
			ImGuiNative.ShowDemoWindow(pOpen);
		}
		public static void ShowDemoWindow()
		{
			ImGuiNative.ShowDemoWindow((bool*)(default));
		}
		public static void ShowDemoWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ImGuiNative.ShowDemoWindow((bool*)ppOpen);
			}
		}
		public static void ShowMetricsWindow(bool* pOpen)
		{
			ImGuiNative.ShowMetricsWindow(pOpen);
		}
		public static void ShowMetricsWindow()
		{
			ImGuiNative.ShowMetricsWindow((bool*)(default));
		}
		public static void ShowMetricsWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ImGuiNative.ShowMetricsWindow((bool*)ppOpen);
			}
		}
		public static void ShowDebugLogWindow(bool* pOpen)
		{
			ImGuiNative.ShowDebugLogWindow(pOpen);
		}
		public static void ShowDebugLogWindow()
		{
			ImGuiNative.ShowDebugLogWindow((bool*)(default));
		}
		public static void ShowDebugLogWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ImGuiNative.ShowDebugLogWindow((bool*)ppOpen);
			}
		}
		public static void ShowStackToolWindow(bool* pOpen)
		{
			ImGuiNative.ShowStackToolWindow(pOpen);
		}
		public static void ShowStackToolWindow()
		{
			ImGuiNative.ShowStackToolWindow((bool*)(default));
		}
		public static void ShowStackToolWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ImGuiNative.ShowStackToolWindow((bool*)ppOpen);
			}
		}
		public static void ShowAboutWindow(bool* pOpen)
		{
			ImGuiNative.ShowAboutWindow(pOpen);
		}
		public static void ShowAboutWindow()
		{
			ImGuiNative.ShowAboutWindow((bool*)(default));
		}
		public static void ShowAboutWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ImGuiNative.ShowAboutWindow((bool*)ppOpen);
			}
		}
		public static void ShowStyleEditor(ImGuiStylePtr reference)
		{
			ImGuiNative.ShowStyleEditor(reference);
		}
		public static void ShowStyleEditor()
		{
			ImGuiNative.ShowStyleEditor((ImGuiStyle*)(default));
		}
		public static void ShowStyleEditor(ref ImGuiStyle reference)
		{
			fixed (ImGuiStyle* preference = &reference)
			{
				ImGuiNative.ShowStyleEditor((ImGuiStyle*)preference);
			}
		}
		public static void ShowUserGuide()
		{
			ImGuiNative.ShowUserGuide();
		}
		public static void StyleColorsDark(ImGuiStylePtr dst)
		{
			ImGuiNative.StyleColorsDark(dst);
		}
		public static void StyleColorsDark()
		{
			ImGuiNative.StyleColorsDark((ImGuiStyle*)(default));
		}
		public static void StyleColorsDark(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				ImGuiNative.StyleColorsDark((ImGuiStyle*)pdst);
			}
		}
		public static void StyleColorsLight(ImGuiStylePtr dst)
		{
			ImGuiNative.StyleColorsLight(dst);
		}
		public static void StyleColorsLight()
		{
			ImGuiNative.StyleColorsLight((ImGuiStyle*)(default));
		}
		public static void StyleColorsLight(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				ImGuiNative.StyleColorsLight((ImGuiStyle*)pdst);
			}
		}
		public static void StyleColorsClassic(ImGuiStylePtr dst)
		{
			ImGuiNative.StyleColorsClassic(dst);
		}
		public static void StyleColorsClassic()
		{
			ImGuiNative.StyleColorsClassic((ImGuiStyle*)(default));
		}
		public static void StyleColorsClassic(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				ImGuiNative.StyleColorsClassic((ImGuiStyle*)pdst);
			}
		}
		public static void End()
		{
			ImGuiNative.End();
		}
		public static void End(this ImGuiListClipperPtr self)
		{
			ImGuiNative.End(self);
		}
		public static void End(this ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				ImGuiNative.End((ImGuiListClipper*)pself);
			}
		}
		public static void EndChild()
		{
			ImGuiNative.EndChild();
		}
		public static bool IsWindowAppearing()
		{
			byte ret = ImGuiNative.IsWindowAppearing();
			return ret != 0;
		}
		public static bool IsWindowCollapsed()
		{
			byte ret = ImGuiNative.IsWindowCollapsed();
			return ret != 0;
		}
		public static bool IsWindowFocused(ImGuiFocusedFlags flags)
		{
			byte ret = ImGuiNative.IsWindowFocused(flags);
			return ret != 0;
		}
		public static bool IsWindowFocused()
		{
			byte ret = ImGuiNative.IsWindowFocused((ImGuiFocusedFlags)(0));
			return ret != 0;
		}
		public static bool IsWindowHovered(ImGuiHoveredFlags flags)
		{
			byte ret = ImGuiNative.IsWindowHovered(flags);
			return ret != 0;
		}
		public static bool IsWindowHovered()
		{
			byte ret = ImGuiNative.IsWindowHovered((ImGuiHoveredFlags)(0));
			return ret != 0;
		}
		public static ImDrawListPtr GetWindowDrawList()
		{
			ImDrawListPtr ret = ImGuiNative.GetWindowDrawList();
			return ret;
		}
		public static float GetWindowDpiScale()
		{
			float ret = ImGuiNative.GetWindowDpiScale();
			return ret;
		}
		public static Vector2 GetWindowPos()
		{
			Vector2 ret;
			ImGuiNative.GetWindowPos(&ret);
			return ret;
		}
		public static void GetWindowPos(Vector2* pOut)
		{
			ImGuiNative.GetWindowPos(pOut);
		}
		public static void GetWindowPos(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetWindowPos((Vector2*)ppOut);
			}
		}
		public static Vector2 GetWindowSize()
		{
			Vector2 ret;
			ImGuiNative.GetWindowSize(&ret);
			return ret;
		}
		public static void GetWindowSize(Vector2* pOut)
		{
			ImGuiNative.GetWindowSize(pOut);
		}
		public static void GetWindowSize(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetWindowSize((Vector2*)ppOut);
			}
		}
		public static float GetWindowWidth()
		{
			float ret = ImGuiNative.GetWindowWidth();
			return ret;
		}
		public static float GetWindowHeight()
		{
			float ret = ImGuiNative.GetWindowHeight();
			return ret;
		}
		public static ImGuiViewportPtr GetWindowViewport()
		{
			ImGuiViewportPtr ret = ImGuiNative.GetWindowViewport();
			return ret;
		}
		public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot)
		{
			ImGuiNative.SetNextWindowPos(pos, cond, pivot);
		}
		public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond)
		{
			ImGuiNative.SetNextWindowPos(pos, cond, (Vector2)(new Vector2(0,0)));
		}
		public static void SetNextWindowPos(Vector2 pos)
		{
			ImGuiNative.SetNextWindowPos(pos, (ImGuiCond)(0), (Vector2)(new Vector2(0,0)));
		}
		public static void SetNextWindowPos(Vector2 pos, Vector2 pivot)
		{
			ImGuiNative.SetNextWindowPos(pos, (ImGuiCond)(0), pivot);
		}
		public static void SetNextWindowSize(Vector2 size, ImGuiCond cond)
		{
			ImGuiNative.SetNextWindowSize(size, cond);
		}
		public static void SetNextWindowSize(Vector2 size)
		{
			ImGuiNative.SetNextWindowSize(size, (ImGuiCond)(0));
		}
		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, ImGuiSizeCallback customCallback, void* customCallbackData)
		{
			ImGuiNative.SetNextWindowSizeConstraints(sizeMin, sizeMax, customCallback, customCallbackData);
		}
		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, ImGuiSizeCallback customCallback)
		{
			ImGuiNative.SetNextWindowSizeConstraints(sizeMin, sizeMax, customCallback, (void*)(default));
		}
		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax)
		{
			ImGuiNative.SetNextWindowSizeConstraints(sizeMin, sizeMax, (ImGuiSizeCallback)(default), (void*)(default));
		}
		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, void* customCallbackData)
		{
			ImGuiNative.SetNextWindowSizeConstraints(sizeMin, sizeMax, (ImGuiSizeCallback)(default), customCallbackData);
		}
		public static void SetNextWindowContentSize(Vector2 size)
		{
			ImGuiNative.SetNextWindowContentSize(size);
		}
		public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
		{
			ImGuiNative.SetNextWindowCollapsed(collapsed ? (byte)1 : (byte)0, cond);
		}
		public static void SetNextWindowCollapsed(bool collapsed)
		{
			ImGuiNative.SetNextWindowCollapsed(collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
		}
		public static void SetNextWindowFocus()
		{
			ImGuiNative.SetNextWindowFocus();
		}
		public static void SetNextWindowBgAlpha(float alpha)
		{
			ImGuiNative.SetNextWindowBgAlpha(alpha);
		}
		public static void SetNextWindowViewport(uint viewportId)
		{
			ImGuiNative.SetNextWindowViewport(viewportId);
		}
		public static void SetWindowFontScale(float scale)
		{
			ImGuiNative.SetWindowFontScale(scale);
		}
		public static Vector2 GetContentRegionAvail()
		{
			Vector2 ret;
			ImGuiNative.GetContentRegionAvail(&ret);
			return ret;
		}
		public static void GetContentRegionAvail(Vector2* pOut)
		{
			ImGuiNative.GetContentRegionAvail(pOut);
		}
		public static void GetContentRegionAvail(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetContentRegionAvail((Vector2*)ppOut);
			}
		}
		public static Vector2 GetContentRegionMax()
		{
			Vector2 ret;
			ImGuiNative.GetContentRegionMax(&ret);
			return ret;
		}
		public static void GetContentRegionMax(Vector2* pOut)
		{
			ImGuiNative.GetContentRegionMax(pOut);
		}
		public static void GetContentRegionMax(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetContentRegionMax((Vector2*)ppOut);
			}
		}
		public static Vector2 GetWindowContentRegionMin()
		{
			Vector2 ret;
			ImGuiNative.GetWindowContentRegionMin(&ret);
			return ret;
		}
		public static void GetWindowContentRegionMin(Vector2* pOut)
		{
			ImGuiNative.GetWindowContentRegionMin(pOut);
		}
		public static void GetWindowContentRegionMin(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetWindowContentRegionMin((Vector2*)ppOut);
			}
		}
		public static Vector2 GetWindowContentRegionMax()
		{
			Vector2 ret;
			ImGuiNative.GetWindowContentRegionMax(&ret);
			return ret;
		}
		public static void GetWindowContentRegionMax(Vector2* pOut)
		{
			ImGuiNative.GetWindowContentRegionMax(pOut);
		}
		public static void GetWindowContentRegionMax(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetWindowContentRegionMax((Vector2*)ppOut);
			}
		}
		public static float GetScrollX()
		{
			float ret = ImGuiNative.GetScrollX();
			return ret;
		}
		public static float GetScrollY()
		{
			float ret = ImGuiNative.GetScrollY();
			return ret;
		}
		public static void SetScrollX(float scrollX)
		{
			ImGuiNative.SetScrollX(scrollX);
		}
		public static void SetScrollY(float scrollY)
		{
			ImGuiNative.SetScrollY(scrollY);
		}
		public static float GetScrollMaxX()
		{
			float ret = ImGuiNative.GetScrollMaxX();
			return ret;
		}
		public static float GetScrollMaxY()
		{
			float ret = ImGuiNative.GetScrollMaxY();
			return ret;
		}
		public static void SetScrollHereX(float centerXRatio)
		{
			ImGuiNative.SetScrollHereX(centerXRatio);
		}
		public static void SetScrollHereX()
		{
			ImGuiNative.SetScrollHereX((float)(0.5f));
		}
		public static void SetScrollHereY(float centerYRatio)
		{
			ImGuiNative.SetScrollHereY(centerYRatio);
		}
		public static void SetScrollHereY()
		{
			ImGuiNative.SetScrollHereY((float)(0.5f));
		}
		public static void SetScrollFromPosX(float localX, float centerXRatio)
		{
			ImGuiNative.SetScrollFromPosX(localX, centerXRatio);
		}
		public static void SetScrollFromPosX(float localX)
		{
			ImGuiNative.SetScrollFromPosX(localX, (float)(0.5f));
		}
		public static void SetScrollFromPosY(float localY, float centerYRatio)
		{
			ImGuiNative.SetScrollFromPosY(localY, centerYRatio);
		}
		public static void SetScrollFromPosY(float localY)
		{
			ImGuiNative.SetScrollFromPosY(localY, (float)(0.5f));
		}
		public static void PushFont(ImFontPtr font)
		{
			ImGuiNative.PushFont(font);
		}
		public static void PushFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				ImGuiNative.PushFont((ImFont*)pfont);
			}
		}
		public static void PopFont()
		{
			ImGuiNative.PopFont();
		}
		public static void PushStyleColor(ImGuiCol idx, uint col)
		{
			ImGuiNative.PushStyleColor(idx, col);
		}
		public static void PushStyleColor(ImGuiCol idx, Vector4 col)
		{
			ImGuiNative.PushStyleColor(idx, col);
		}
		public static void PopStyleColor(int count)
		{
			ImGuiNative.PopStyleColor(count);
		}
		public static void PopStyleColor()
		{
			ImGuiNative.PopStyleColor((int)(1));
		}
		public static void PushStyleVar(ImGuiStyleVar idx, float val)
		{
			ImGuiNative.PushStyleVar(idx, val);
		}
		public static void PushStyleVar(ImGuiStyleVar idx, Vector2 val)
		{
			ImGuiNative.PushStyleVar(idx, val);
		}
		public static void PopStyleVar(int count)
		{
			ImGuiNative.PopStyleVar(count);
		}
		public static void PopStyleVar()
		{
			ImGuiNative.PopStyleVar((int)(1));
		}
		public static void PushAllowKeyboardFocus(bool allowKeyboardFocus)
		{
			ImGuiNative.PushAllowKeyboardFocus(allowKeyboardFocus ? (byte)1 : (byte)0);
		}
		public static void PopAllowKeyboardFocus()
		{
			ImGuiNative.PopAllowKeyboardFocus();
		}
		public static void PushButtonRepeat(bool repeat)
		{
			ImGuiNative.PushButtonRepeat(repeat ? (byte)1 : (byte)0);
		}
		public static void PopButtonRepeat()
		{
			ImGuiNative.PopButtonRepeat();
		}
		public static void PushItemWidth(float itemWidth)
		{
			ImGuiNative.PushItemWidth(itemWidth);
		}
		public static void PopItemWidth()
		{
			ImGuiNative.PopItemWidth();
		}
		public static void SetNextItemWidth(float itemWidth)
		{
			ImGuiNative.SetNextItemWidth(itemWidth);
		}
		public static float CalcItemWidth()
		{
			float ret = ImGuiNative.CalcItemWidth();
			return ret;
		}
		public static void PushTextWrapPos(float wrapLocalPosX)
		{
			ImGuiNative.PushTextWrapPos(wrapLocalPosX);
		}
		public static void PushTextWrapPos()
		{
			ImGuiNative.PushTextWrapPos((float)(0.0f));
		}
		public static void PopTextWrapPos()
		{
			ImGuiNative.PopTextWrapPos();
		}
		public static ImFontPtr GetFont()
		{
			ImFontPtr ret = ImGuiNative.GetFont();
			return ret;
		}
		public static float GetFontSize()
		{
			float ret = ImGuiNative.GetFontSize();
			return ret;
		}
		public static ImTextureID GetFontTexIdWhitePixel()
		{
			ImTextureID ret = ImGuiNative.GetFontTexIdWhitePixel();
			return ret;
		}
		public static Vector2 GetFontTexUvWhitePixel()
		{
			Vector2 ret;
			ImGuiNative.GetFontTexUvWhitePixel(&ret);
			return ret;
		}
		public static void GetFontTexUvWhitePixel(Vector2* pOut)
		{
			ImGuiNative.GetFontTexUvWhitePixel(pOut);
		}
		public static void GetFontTexUvWhitePixel(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetFontTexUvWhitePixel((Vector2*)ppOut);
			}
		}
		public static uint GetColorU32(ImGuiCol idx, float alphaMul)
		{
			uint ret = ImGuiNative.GetColorU32(idx, alphaMul);
			return ret;
		}
		public static uint GetColorU32(ImGuiCol idx)
		{
			uint ret = ImGuiNative.GetColorU32(idx, (float)(1.0f));
			return ret;
		}
		public static uint GetColorU32(Vector4 col)
		{
			uint ret = ImGuiNative.GetColorU32(col);
			return ret;
		}
		public static uint GetColorU32(uint col)
		{
			uint ret = ImGuiNative.GetColorU32(col);
			return ret;
		}
		public static Vector4* GetStyleColorVec4(ImGuiCol idx)
		{
			Vector4* ret = ImGuiNative.GetStyleColorVec4(idx);
			return ret;
		}
		public static void Separator()
		{
			ImGuiNative.Separator();
		}
		public static void SameLine(float offsetFromStartX, float spacing)
		{
			ImGuiNative.SameLine(offsetFromStartX, spacing);
		}
		public static void SameLine(float offsetFromStartX)
		{
			ImGuiNative.SameLine(offsetFromStartX, (float)(-1.0f));
		}
		public static void SameLine()
		{
			ImGuiNative.SameLine((float)(0.0f), (float)(-1.0f));
		}
		public static void NewLine()
		{
			ImGuiNative.NewLine();
		}
		public static void Spacing()
		{
			ImGuiNative.Spacing();
		}
		public static void Dummy(Vector2 size)
		{
			ImGuiNative.Dummy(size);
		}
		public static void Indent(float indentW)
		{
			ImGuiNative.Indent(indentW);
		}
		public static void Indent()
		{
			ImGuiNative.Indent((float)(0.0f));
		}
		public static void Unindent(float indentW)
		{
			ImGuiNative.Unindent(indentW);
		}
		public static void Unindent()
		{
			ImGuiNative.Unindent((float)(0.0f));
		}
		public static void BeginGroup()
		{
			ImGuiNative.BeginGroup();
		}
		public static void EndGroup()
		{
			ImGuiNative.EndGroup();
		}
		public static Vector2 GetCursorPos()
		{
			Vector2 ret;
			ImGuiNative.GetCursorPos(&ret);
			return ret;
		}
		public static void GetCursorPos(Vector2* pOut)
		{
			ImGuiNative.GetCursorPos(pOut);
		}
		public static void GetCursorPos(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetCursorPos((Vector2*)ppOut);
			}
		}
		public static float GetCursorPosX()
		{
			float ret = ImGuiNative.GetCursorPosX();
			return ret;
		}
		public static float GetCursorPosY()
		{
			float ret = ImGuiNative.GetCursorPosY();
			return ret;
		}
		public static void SetCursorPos(Vector2 localPos)
		{
			ImGuiNative.SetCursorPos(localPos);
		}
		public static void SetCursorPosX(float localX)
		{
			ImGuiNative.SetCursorPosX(localX);
		}
		public static void SetCursorPosY(float localY)
		{
			ImGuiNative.SetCursorPosY(localY);
		}
		public static Vector2 GetCursorStartPos()
		{
			Vector2 ret;
			ImGuiNative.GetCursorStartPos(&ret);
			return ret;
		}
		public static void GetCursorStartPos(Vector2* pOut)
		{
			ImGuiNative.GetCursorStartPos(pOut);
		}
		public static void GetCursorStartPos(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetCursorStartPos((Vector2*)ppOut);
			}
		}
		public static Vector2 GetCursorScreenPos()
		{
			Vector2 ret;
			ImGuiNative.GetCursorScreenPos(&ret);
			return ret;
		}
		public static void GetCursorScreenPos(Vector2* pOut)
		{
			ImGuiNative.GetCursorScreenPos(pOut);
		}
		public static void GetCursorScreenPos(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetCursorScreenPos((Vector2*)ppOut);
			}
		}
		public static void SetCursorScreenPos(Vector2 pos)
		{
			ImGuiNative.SetCursorScreenPos(pos);
		}
		public static void AlignTextToFramePadding()
		{
			ImGuiNative.AlignTextToFramePadding();
		}
		public static float GetTextLineHeight()
		{
			float ret = ImGuiNative.GetTextLineHeight();
			return ret;
		}
		public static float GetTextLineHeightWithSpacing()
		{
			float ret = ImGuiNative.GetTextLineHeightWithSpacing();
			return ret;
		}
		public static float GetFrameHeight()
		{
			float ret = ImGuiNative.GetFrameHeight();
			return ret;
		}
		public static float GetFrameHeightWithSpacing()
		{
			float ret = ImGuiNative.GetFrameHeightWithSpacing();
			return ret;
		}
		public static void PopID()
		{
			ImGuiNative.PopID();
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tintCol, Vector4 borderCol)
		{
			ImGuiNative.Image(userTextureId, size, uv0, uv1, tintCol, borderCol);
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tintCol)
		{
			ImGuiNative.Image(userTextureId, size, uv0, uv1, tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1)
		{
			ImGuiNative.Image(userTextureId, size, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0)
		{
			ImGuiNative.Image(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size)
		{
			ImGuiNative.Image(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector4 tintCol)
		{
			ImGuiNative.Image(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector4 tintCol)
		{
			ImGuiNative.Image(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector4 tintCol, Vector4 borderCol)
		{
			ImGuiNative.Image(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), tintCol, borderCol);
		}
		public static void Image(ImTextureID userTextureId, Vector2 size, Vector4 tintCol, Vector4 borderCol)
		{
			ImGuiNative.Image(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, borderCol);
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, int framePadding, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, framePadding, bgCol, tintCol);
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, int framePadding, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, framePadding, bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, int framePadding)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, framePadding, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, (int)(-1), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), (int)(-1), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (int)(-1), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, int framePadding)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), framePadding, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, int framePadding)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), framePadding, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, (int)(-1), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), (int)(-1), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (int)(-1), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, int framePadding, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), framePadding, bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, int framePadding, Vector4 bgCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), framePadding, bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, uv1, (int)(-1), bgCol, tintCol);
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), (int)(-1), bgCol, tintCol);
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (int)(-1), bgCol, tintCol);
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, Vector2 uv0, int framePadding, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, uv0, (Vector2)(new Vector2(1,1)), framePadding, bgCol, tintCol);
			return ret != 0;
		}
		public static bool ImageButton(ImTextureID userTextureId, Vector2 size, int framePadding, Vector4 bgCol, Vector4 tintCol)
		{
			byte ret = ImGuiNative.ImageButton(userTextureId, size, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), framePadding, bgCol, tintCol);
			return ret != 0;
		}
		public static void Bullet()
		{
			ImGuiNative.Bullet();
		}
		public static void EndCombo()
		{
			ImGuiNative.EndCombo();
		}
		public static void SetColorEditOptions(ImGuiColorEditFlags flags)
		{
			ImGuiNative.SetColorEditOptions(flags);
		}
		public static void TreePop()
		{
			ImGuiNative.TreePop();
		}
		public static float GetTreeNodeToLabelSpacing()
		{
			float ret = ImGuiNative.GetTreeNodeToLabelSpacing();
			return ret;
		}
		public static void SetNextItemOpen(bool isOpen, ImGuiCond cond)
		{
			ImGuiNative.SetNextItemOpen(isOpen ? (byte)1 : (byte)0, cond);
		}
		public static void SetNextItemOpen(bool isOpen)
		{
			ImGuiNative.SetNextItemOpen(isOpen ? (byte)1 : (byte)0, (ImGuiCond)(0));
		}
		public static void EndListBox()
		{
			ImGuiNative.EndListBox();
		}
		public static bool BeginMenuBar()
		{
			byte ret = ImGuiNative.BeginMenuBar();
			return ret != 0;
		}
		public static void EndMenuBar()
		{
			ImGuiNative.EndMenuBar();
		}
		public static bool BeginMainMenuBar()
		{
			byte ret = ImGuiNative.BeginMainMenuBar();
			return ret != 0;
		}
		public static void EndMainMenuBar()
		{
			ImGuiNative.EndMainMenuBar();
		}
		public static void EndMenu()
		{
			ImGuiNative.EndMenu();
		}
		public static void BeginTooltip()
		{
			ImGuiNative.BeginTooltip();
		}
		public static void EndTooltip()
		{
			ImGuiNative.EndTooltip();
		}
		public static void EndPopup()
		{
			ImGuiNative.EndPopup();
		}
		public static void CloseCurrentPopup()
		{
			ImGuiNative.CloseCurrentPopup();
		}
		public static void EndTable()
		{
			ImGuiNative.EndTable();
		}
		public static void TableNextRow(ImGuiTableRowFlags rowFlags, float minRowHeight)
		{
			ImGuiNative.TableNextRow(rowFlags, minRowHeight);
		}
		public static void TableNextRow(ImGuiTableRowFlags rowFlags)
		{
			ImGuiNative.TableNextRow(rowFlags, (float)(0.0f));
		}
		public static void TableNextRow()
		{
			ImGuiNative.TableNextRow((ImGuiTableRowFlags)(0), (float)(0.0f));
		}
		public static void TableNextRow(float minRowHeight)
		{
			ImGuiNative.TableNextRow((ImGuiTableRowFlags)(0), minRowHeight);
		}
		public static bool TableNextColumn()
		{
			byte ret = ImGuiNative.TableNextColumn();
			return ret != 0;
		}
		public static bool TableSetColumnIndex(int columnN)
		{
			byte ret = ImGuiNative.TableSetColumnIndex(columnN);
			return ret != 0;
		}
		public static void TableSetupScrollFreeze(int cols, int rows)
		{
			ImGuiNative.TableSetupScrollFreeze(cols, rows);
		}
		public static void TableHeadersRow()
		{
			ImGuiNative.TableHeadersRow();
		}
		public static ImGuiTableSortSpecsPtr TableGetSortSpecs()
		{
			ImGuiTableSortSpecsPtr ret = ImGuiNative.TableGetSortSpecs();
			return ret;
		}
		public static int TableGetColumnCount()
		{
			int ret = ImGuiNative.TableGetColumnCount();
			return ret;
		}
		public static int TableGetColumnIndex()
		{
			int ret = ImGuiNative.TableGetColumnIndex();
			return ret;
		}
		public static int TableGetRowIndex()
		{
			int ret = ImGuiNative.TableGetRowIndex();
			return ret;
		}
		public static ImGuiTableColumnFlags TableGetColumnFlags(int columnN)
		{
			ImGuiTableColumnFlags ret = ImGuiNative.TableGetColumnFlags(columnN);
			return ret;
		}
		public static ImGuiTableColumnFlags TableGetColumnFlags()
		{
			ImGuiTableColumnFlags ret = ImGuiNative.TableGetColumnFlags((int)(-1));
			return ret;
		}
		public static void TableSetColumnEnabled(int columnN, bool v)
		{
			ImGuiNative.TableSetColumnEnabled(columnN, v ? (byte)1 : (byte)0);
		}
		public static void TableSetBgColor(ImGuiTableBgTarget target, uint color, int columnN)
		{
			ImGuiNative.TableSetBgColor(target, color, columnN);
		}
		public static void TableSetBgColor(ImGuiTableBgTarget target, uint color)
		{
			ImGuiNative.TableSetBgColor(target, color, (int)(-1));
		}
		public static void NextColumn()
		{
			ImGuiNative.NextColumn();
		}
		public static int GetColumnIndex()
		{
			int ret = ImGuiNative.GetColumnIndex();
			return ret;
		}
		public static float GetColumnWidth(int columnIndex)
		{
			float ret = ImGuiNative.GetColumnWidth(columnIndex);
			return ret;
		}
		public static float GetColumnWidth()
		{
			float ret = ImGuiNative.GetColumnWidth((int)(-1));
			return ret;
		}
		public static void SetColumnWidth(int columnIndex, float width)
		{
			ImGuiNative.SetColumnWidth(columnIndex, width);
		}
		public static float GetColumnOffset(int columnIndex)
		{
			float ret = ImGuiNative.GetColumnOffset(columnIndex);
			return ret;
		}
		public static float GetColumnOffset()
		{
			float ret = ImGuiNative.GetColumnOffset((int)(-1));
			return ret;
		}
		public static void SetColumnOffset(int columnIndex, float offsetX)
		{
			ImGuiNative.SetColumnOffset(columnIndex, offsetX);
		}
		public static int GetColumnsCount()
		{
			int ret = ImGuiNative.GetColumnsCount();
			return ret;
		}
		public static void EndTabBar()
		{
			ImGuiNative.EndTabBar();
		}
		public static void EndTabItem()
		{
			ImGuiNative.EndTabItem();
		}
		public static uint DockSpace(uint id, Vector2 size, ImGuiDockNodeFlags flags, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpace(id, size, flags, windowClass);
			return ret;
		}
		public static uint DockSpace(uint id, Vector2 size, ImGuiDockNodeFlags flags)
		{
			uint ret = ImGuiNative.DockSpace(id, size, flags, (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpace(uint id, Vector2 size)
		{
			uint ret = ImGuiNative.DockSpace(id, size, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpace(uint id)
		{
			uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpace(uint id, ImGuiDockNodeFlags flags)
		{
			uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), flags, (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpace(uint id, Vector2 size, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpace(id, size, (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}
		public static uint DockSpace(uint id, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}
		public static uint DockSpace(uint id, ImGuiDockNodeFlags flags, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), flags, windowClass);
			return ret;
		}
		public static uint DockSpace(uint id, Vector2 size, ImGuiDockNodeFlags flags, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpace(id, size, flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpace(uint id, Vector2 size, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpace(id, size, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpace(uint id, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpace(uint id, ImGuiDockNodeFlags flags, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpace(id, (Vector2)(new Vector2(0,0)), flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport, ImGuiDockNodeFlags flags, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport(viewport, flags, windowClass);
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport, ImGuiDockNodeFlags flags)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport(viewport, flags, (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport(viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpaceOverViewport()
		{
			uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiDockNodeFlags flags)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), flags, (ImGuiWindowClass*)(default));
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport(viewport, (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}
		public static uint DockSpaceOverViewport(ImGuiDockNodeFlags flags, ImGuiWindowClassPtr windowClass)
		{
			uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), flags, windowClass);
			return ret;
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport, ImGuiDockNodeFlags flags, ImGuiWindowClassPtr windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, flags, windowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport, ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)(default));
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport, ImGuiWindowClassPtr windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), windowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport, ImGuiDockNodeFlags flags, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport(viewport, flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ImGuiViewportPtr viewport, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport(viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ImGuiDockNodeFlags flags, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)(default), flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport, ImGuiDockNodeFlags flags, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}
		public static uint DockSpaceOverViewport(ref ImGuiViewport viewport, ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = ImGuiNative.DockSpaceOverViewport((ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}
		public static void SetNextWindowDockID(uint dockId, ImGuiCond cond)
		{
			ImGuiNative.SetNextWindowDockID(dockId, cond);
		}
		public static void SetNextWindowDockID(uint dockId)
		{
			ImGuiNative.SetNextWindowDockID(dockId, (ImGuiCond)(0));
		}
		public static void SetNextWindowClass(ImGuiWindowClassPtr windowClass)
		{
			ImGuiNative.SetNextWindowClass(windowClass);
		}
		public static void SetNextWindowClass(ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				ImGuiNative.SetNextWindowClass((ImGuiWindowClass*)pwindowClass);
			}
		}
		public static uint GetWindowDockID()
		{
			uint ret = ImGuiNative.GetWindowDockID();
			return ret;
		}
		public static bool IsWindowDocked()
		{
			byte ret = ImGuiNative.IsWindowDocked();
			return ret != 0;
		}
		public static void LogToTTY(int autoOpenDepth)
		{
			ImGuiNative.LogToTTY(autoOpenDepth);
		}
		public static void LogToTTY()
		{
			ImGuiNative.LogToTTY((int)(-1));
		}
		public static void LogToClipboard(int autoOpenDepth)
		{
			ImGuiNative.LogToClipboard(autoOpenDepth);
		}
		public static void LogToClipboard()
		{
			ImGuiNative.LogToClipboard((int)(-1));
		}
		public static void LogFinish()
		{
			ImGuiNative.LogFinish();
		}
		public static void LogButtons()
		{
			ImGuiNative.LogButtons();
		}
		public static bool BeginDragDropSource(ImGuiDragDropFlags flags)
		{
			byte ret = ImGuiNative.BeginDragDropSource(flags);
			return ret != 0;
		}
		public static bool BeginDragDropSource()
		{
			byte ret = ImGuiNative.BeginDragDropSource((ImGuiDragDropFlags)(0));
			return ret != 0;
		}
		public static void EndDragDropSource()
		{
			ImGuiNative.EndDragDropSource();
		}
		public static bool BeginDragDropTarget()
		{
			byte ret = ImGuiNative.BeginDragDropTarget();
			return ret != 0;
		}
		public static void EndDragDropTarget()
		{
			ImGuiNative.EndDragDropTarget();
		}
		public static ImGuiPayloadPtr GetDragDropPayload()
		{
			ImGuiPayloadPtr ret = ImGuiNative.GetDragDropPayload();
			return ret;
		}
		public static void BeginDisabled(bool disabled)
		{
			ImGuiNative.BeginDisabled(disabled ? (byte)1 : (byte)0);
		}
		public static void BeginDisabled()
		{
			ImGuiNative.BeginDisabled((byte)(1));
		}
		public static void EndDisabled()
		{
			ImGuiNative.EndDisabled();
		}
		public static void PushClipRect(Vector2 clipRectMin, Vector2 clipRectMax, bool intersectWithCurrentClipRect)
		{
			ImGuiNative.PushClipRect(clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
		}
		public static void PushClipRect(this ImDrawListPtr self, Vector2 clipRectMin, Vector2 clipRectMax, bool intersectWithCurrentClipRect)
		{
			ImGuiNative.PushClipRect(self, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
		}
		public static void PushClipRect(this ImDrawListPtr self, Vector2 clipRectMin, Vector2 clipRectMax)
		{
			ImGuiNative.PushClipRect(self, clipRectMin, clipRectMax, (byte)(0));
		}
		public static void PushClipRect(this ref ImDrawList self, Vector2 clipRectMin, Vector2 clipRectMax, bool intersectWithCurrentClipRect)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PushClipRect((ImDrawList*)pself, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
			}
		}
		public static void PushClipRect(this ref ImDrawList self, Vector2 clipRectMin, Vector2 clipRectMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PushClipRect((ImDrawList*)pself, clipRectMin, clipRectMax, (byte)(0));
			}
		}
		public static void PopClipRect()
		{
			ImGuiNative.PopClipRect();
		}
		public static void PopClipRect(this ImDrawListPtr self)
		{
			ImGuiNative.PopClipRect(self);
		}
		public static void PopClipRect(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PopClipRect((ImDrawList*)pself);
			}
		}
		public static void SetItemDefaultFocus()
		{
			ImGuiNative.SetItemDefaultFocus();
		}
		public static void SetKeyboardFocusHere(int offset)
		{
			ImGuiNative.SetKeyboardFocusHere(offset);
		}
		public static void SetKeyboardFocusHere()
		{
			ImGuiNative.SetKeyboardFocusHere((int)(0));
		}
		public static bool IsItemHovered(ImGuiHoveredFlags flags)
		{
			byte ret = ImGuiNative.IsItemHovered(flags);
			return ret != 0;
		}
		public static bool IsItemHovered()
		{
			byte ret = ImGuiNative.IsItemHovered((ImGuiHoveredFlags)(0));
			return ret != 0;
		}
		public static bool IsItemActive()
		{
			byte ret = ImGuiNative.IsItemActive();
			return ret != 0;
		}
		public static bool IsItemFocused()
		{
			byte ret = ImGuiNative.IsItemFocused();
			return ret != 0;
		}
		public static bool IsItemClicked(ImGuiMouseButton mouseButton)
		{
			byte ret = ImGuiNative.IsItemClicked(mouseButton);
			return ret != 0;
		}
		public static bool IsItemClicked()
		{
			byte ret = ImGuiNative.IsItemClicked((ImGuiMouseButton)(0));
			return ret != 0;
		}
		public static bool IsItemVisible()
		{
			byte ret = ImGuiNative.IsItemVisible();
			return ret != 0;
		}
		public static bool IsItemEdited()
		{
			byte ret = ImGuiNative.IsItemEdited();
			return ret != 0;
		}
		public static bool IsItemActivated()
		{
			byte ret = ImGuiNative.IsItemActivated();
			return ret != 0;
		}
		public static bool IsItemDeactivated()
		{
			byte ret = ImGuiNative.IsItemDeactivated();
			return ret != 0;
		}
		public static bool IsItemDeactivatedAfterEdit()
		{
			byte ret = ImGuiNative.IsItemDeactivatedAfterEdit();
			return ret != 0;
		}
		public static bool IsItemToggledOpen()
		{
			byte ret = ImGuiNative.IsItemToggledOpen();
			return ret != 0;
		}
		public static bool IsAnyItemHovered()
		{
			byte ret = ImGuiNative.IsAnyItemHovered();
			return ret != 0;
		}
		public static bool IsAnyItemActive()
		{
			byte ret = ImGuiNative.IsAnyItemActive();
			return ret != 0;
		}
		public static bool IsAnyItemFocused()
		{
			byte ret = ImGuiNative.IsAnyItemFocused();
			return ret != 0;
		}
		public static Vector2 GetItemRectMin()
		{
			Vector2 ret;
			ImGuiNative.GetItemRectMin(&ret);
			return ret;
		}
		public static void GetItemRectMin(Vector2* pOut)
		{
			ImGuiNative.GetItemRectMin(pOut);
		}
		public static void GetItemRectMin(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetItemRectMin((Vector2*)ppOut);
			}
		}
		public static Vector2 GetItemRectMax()
		{
			Vector2 ret;
			ImGuiNative.GetItemRectMax(&ret);
			return ret;
		}
		public static void GetItemRectMax(Vector2* pOut)
		{
			ImGuiNative.GetItemRectMax(pOut);
		}
		public static void GetItemRectMax(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetItemRectMax((Vector2*)ppOut);
			}
		}
		public static Vector2 GetItemRectSize()
		{
			Vector2 ret;
			ImGuiNative.GetItemRectSize(&ret);
			return ret;
		}
		public static void GetItemRectSize(Vector2* pOut)
		{
			ImGuiNative.GetItemRectSize(pOut);
		}
		public static void GetItemRectSize(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetItemRectSize((Vector2*)ppOut);
			}
		}
		public static void SetItemAllowOverlap()
		{
			ImGuiNative.SetItemAllowOverlap();
		}
		public static ImGuiViewportPtr GetMainViewport()
		{
			ImGuiViewportPtr ret = ImGuiNative.GetMainViewport();
			return ret;
		}
		public static ImDrawListPtr GetBackgroundDrawList()
		{
			ImDrawListPtr ret = ImGuiNative.GetBackgroundDrawList();
			return ret;
		}
		public static ImDrawListPtr GetBackgroundDrawList(ImGuiViewportPtr viewport)
		{
			ImDrawListPtr ret = ImGuiNative.GetBackgroundDrawList(viewport);
			return ret;
		}
		public static ImDrawListPtr GetBackgroundDrawList(ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				ImDrawListPtr ret = ImGuiNative.GetBackgroundDrawList((ImGuiViewport*)pviewport);
				return ret;
			}
		}
		public static ImDrawListPtr GetForegroundDrawList()
		{
			ImDrawListPtr ret = ImGuiNative.GetForegroundDrawList();
			return ret;
		}
		public static ImDrawListPtr GetForegroundDrawList(ImGuiViewportPtr viewport)
		{
			ImDrawListPtr ret = ImGuiNative.GetForegroundDrawList(viewport);
			return ret;
		}
		public static ImDrawListPtr GetForegroundDrawList(ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				ImDrawListPtr ret = ImGuiNative.GetForegroundDrawList((ImGuiViewport*)pviewport);
				return ret;
			}
		}
		public static bool IsRectVisible(Vector2 size)
		{
			byte ret = ImGuiNative.IsRectVisible(size);
			return ret != 0;
		}
		public static bool IsRectVisible(Vector2 rectMin, Vector2 rectMax)
		{
			byte ret = ImGuiNative.IsRectVisible(rectMin, rectMax);
			return ret != 0;
		}
		public static double GetTime()
		{
			double ret = ImGuiNative.GetTime();
			return ret;
		}
		public static int GetFrameCount()
		{
			int ret = ImGuiNative.GetFrameCount();
			return ret;
		}
		public static ImDrawListSharedDataPtr GetDrawListSharedData()
		{
			ImDrawListSharedDataPtr ret = ImGuiNative.GetDrawListSharedData();
			return ret;
		}
		public static void SetStateStorage(ImGuiStoragePtr storage)
		{
			ImGuiNative.SetStateStorage(storage);
		}
		public static void SetStateStorage(ref ImGuiStorage storage)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				ImGuiNative.SetStateStorage((ImGuiStorage*)pstorage);
			}
		}
		public static ImGuiStoragePtr GetStateStorage()
		{
			ImGuiStoragePtr ret = ImGuiNative.GetStateStorage();
			return ret;
		}
		public static bool BeginChildFrame(uint id, Vector2 size, ImGuiWindowFlags flags)
		{
			byte ret = ImGuiNative.BeginChildFrame(id, size, flags);
			return ret != 0;
		}
		public static bool BeginChildFrame(uint id, Vector2 size)
		{
			byte ret = ImGuiNative.BeginChildFrame(id, size, (ImGuiWindowFlags)(0));
			return ret != 0;
		}
		public static void EndChildFrame()
		{
			ImGuiNative.EndChildFrame();
		}
		public static Vector4 ColorConvertU32ToFloat4(uint input)
		{
			Vector4 ret;
			ImGuiNative.ColorConvertU32ToFloat4(&ret, input);
			return ret;
		}
		public static void ColorConvertU32ToFloat4(Vector4* pOut, uint input)
		{
			ImGuiNative.ColorConvertU32ToFloat4(pOut, input);
		}
		public static void ColorConvertU32ToFloat4(ref Vector4 pOut, uint input)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				ImGuiNative.ColorConvertU32ToFloat4((Vector4*)ppOut, input);
			}
		}
		public static uint ColorConvertFloat4ToU32(Vector4 input)
		{
			uint ret = ImGuiNative.ColorConvertFloat4ToU32(input);
			return ret;
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, float* outS, float* outV)
		{
			ImGuiNative.ColorConvertRGBtoHSV(r, g, b, outH, outS, outV);
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, float* outS, float* outV)
		{
			fixed (float* poutH = &outH)
			{
				ImGuiNative.ColorConvertRGBtoHSV(r, g, b, (float*)poutH, outS, outV);
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, ref float outS, float* outV)
		{
			fixed (float* poutS = &outS)
			{
				ImGuiNative.ColorConvertRGBtoHSV(r, g, b, outH, (float*)poutS, outV);
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, ref float outS, float* outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutS = &outS)
				{
					ImGuiNative.ColorConvertRGBtoHSV(r, g, b, (float*)poutH, (float*)poutS, outV);
				}
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, float* outS, ref float outV)
		{
			fixed (float* poutV = &outV)
			{
				ImGuiNative.ColorConvertRGBtoHSV(r, g, b, outH, outS, (float*)poutV);
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, float* outS, ref float outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutV = &outV)
				{
					ImGuiNative.ColorConvertRGBtoHSV(r, g, b, (float*)poutH, outS, (float*)poutV);
				}
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, ref float outS, ref float outV)
		{
			fixed (float* poutS = &outS)
			{
				fixed (float* poutV = &outV)
				{
					ImGuiNative.ColorConvertRGBtoHSV(r, g, b, outH, (float*)poutS, (float*)poutV);
				}
			}
		}
		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, ref float outS, ref float outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutS = &outS)
				{
					fixed (float* poutV = &outV)
					{
						ImGuiNative.ColorConvertRGBtoHSV(r, g, b, (float*)poutH, (float*)poutS, (float*)poutV);
					}
				}
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, float* outG, float* outB)
		{
			ImGuiNative.ColorConvertHSVtoRGB(h, s, v, outR, outG, outB);
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, float* outG, float* outB)
		{
			fixed (float* poutR = &outR)
			{
				ImGuiNative.ColorConvertHSVtoRGB(h, s, v, (float*)poutR, outG, outB);
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, ref float outG, float* outB)
		{
			fixed (float* poutG = &outG)
			{
				ImGuiNative.ColorConvertHSVtoRGB(h, s, v, outR, (float*)poutG, outB);
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, ref float outG, float* outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutG = &outG)
				{
					ImGuiNative.ColorConvertHSVtoRGB(h, s, v, (float*)poutR, (float*)poutG, outB);
				}
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, float* outG, ref float outB)
		{
			fixed (float* poutB = &outB)
			{
				ImGuiNative.ColorConvertHSVtoRGB(h, s, v, outR, outG, (float*)poutB);
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, float* outG, ref float outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutB = &outB)
				{
					ImGuiNative.ColorConvertHSVtoRGB(h, s, v, (float*)poutR, outG, (float*)poutB);
				}
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, ref float outG, ref float outB)
		{
			fixed (float* poutG = &outG)
			{
				fixed (float* poutB = &outB)
				{
					ImGuiNative.ColorConvertHSVtoRGB(h, s, v, outR, (float*)poutG, (float*)poutB);
				}
			}
		}
		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, ref float outG, ref float outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutG = &outG)
				{
					fixed (float* poutB = &outB)
					{
						ImGuiNative.ColorConvertHSVtoRGB(h, s, v, (float*)poutR, (float*)poutG, (float*)poutB);
					}
				}
			}
		}
		public static bool IsKeyDown(ImGuiKey key)
		{
			byte ret = ImGuiNative.IsKeyDown(key);
			return ret != 0;
		}
		public static bool IsKeyPressed(ImGuiKey key, bool repeat)
		{
			byte ret = ImGuiNative.IsKeyPressed(key, repeat ? (byte)1 : (byte)0);
			return ret != 0;
		}
		public static bool IsKeyPressed(ImGuiKey key)
		{
			byte ret = ImGuiNative.IsKeyPressed(key, (byte)(1));
			return ret != 0;
		}
		public static bool IsKeyReleased(ImGuiKey key)
		{
			byte ret = ImGuiNative.IsKeyReleased(key);
			return ret != 0;
		}
		public static int GetKeyPressedAmount(ImGuiKey key, float repeatDelay, float rate)
		{
			int ret = ImGuiNative.GetKeyPressedAmount(key, repeatDelay, rate);
			return ret;
		}
		public static void SetNextFrameWantCaptureKeyboard(bool wantCaptureKeyboard)
		{
			ImGuiNative.SetNextFrameWantCaptureKeyboard(wantCaptureKeyboard ? (byte)1 : (byte)0);
		}
		public static bool IsMouseDown(ImGuiMouseButton button)
		{
			byte ret = ImGuiNative.IsMouseDown(button);
			return ret != 0;
		}
		public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat)
		{
			byte ret = ImGuiNative.IsMouseClicked(button, repeat ? (byte)1 : (byte)0);
			return ret != 0;
		}
		public static bool IsMouseClicked(ImGuiMouseButton button)
		{
			byte ret = ImGuiNative.IsMouseClicked(button, (byte)(0));
			return ret != 0;
		}
		public static bool IsMouseReleased(ImGuiMouseButton button)
		{
			byte ret = ImGuiNative.IsMouseReleased(button);
			return ret != 0;
		}
		public static bool IsMouseDoubleClicked(ImGuiMouseButton button)
		{
			byte ret = ImGuiNative.IsMouseDoubleClicked(button);
			return ret != 0;
		}
		public static int GetMouseClickedCount(ImGuiMouseButton button)
		{
			int ret = ImGuiNative.GetMouseClickedCount(button);
			return ret;
		}
		public static bool IsMouseHoveringRect(Vector2 rMin, Vector2 rMax, bool clip)
		{
			byte ret = ImGuiNative.IsMouseHoveringRect(rMin, rMax, clip ? (byte)1 : (byte)0);
			return ret != 0;
		}
		public static bool IsMouseHoveringRect(Vector2 rMin, Vector2 rMax)
		{
			byte ret = ImGuiNative.IsMouseHoveringRect(rMin, rMax, (byte)(1));
			return ret != 0;
		}
		public static bool IsMousePosValid(Vector2* mousePos)
		{
			byte ret = ImGuiNative.IsMousePosValid(mousePos);
			return ret != 0;
		}
		public static bool IsMousePosValid()
		{
			byte ret = ImGuiNative.IsMousePosValid((Vector2*)(default));
			return ret != 0;
		}
		public static bool IsMousePosValid(ref Vector2 mousePos)
		{
			fixed (Vector2* pmousePos = &mousePos)
			{
				byte ret = ImGuiNative.IsMousePosValid((Vector2*)pmousePos);
				return ret != 0;
			}
		}
		public static bool IsAnyMouseDown()
		{
			byte ret = ImGuiNative.IsAnyMouseDown();
			return ret != 0;
		}
		public static Vector2 GetMousePos()
		{
			Vector2 ret;
			ImGuiNative.GetMousePos(&ret);
			return ret;
		}
		public static void GetMousePos(Vector2* pOut)
		{
			ImGuiNative.GetMousePos(pOut);
		}
		public static void GetMousePos(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMousePos((Vector2*)ppOut);
			}
		}
		public static Vector2 GetMousePosOnOpeningCurrentPopup()
		{
			Vector2 ret;
			ImGuiNative.GetMousePosOnOpeningCurrentPopup(&ret);
			return ret;
		}
		public static void GetMousePosOnOpeningCurrentPopup(Vector2* pOut)
		{
			ImGuiNative.GetMousePosOnOpeningCurrentPopup(pOut);
		}
		public static void GetMousePosOnOpeningCurrentPopup(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMousePosOnOpeningCurrentPopup((Vector2*)ppOut);
			}
		}
		public static bool IsMouseDragging(ImGuiMouseButton button, float lockThreshold)
		{
			byte ret = ImGuiNative.IsMouseDragging(button, lockThreshold);
			return ret != 0;
		}
		public static bool IsMouseDragging(ImGuiMouseButton button)
		{
			byte ret = ImGuiNative.IsMouseDragging(button, (float)(-1.0f));
			return ret != 0;
		}
		public static Vector2 GetMouseDragDelta()
		{
			Vector2 ret;
			ImGuiNative.GetMouseDragDelta(&ret, (ImGuiMouseButton)(0), (float)(-1.0f));
			return ret;
		}
		public static Vector2 GetMouseDragDelta(ImGuiMouseButton button)
		{
			Vector2 ret;
			ImGuiNative.GetMouseDragDelta(&ret, button, (float)(-1.0f));
			return ret;
		}
		public static void GetMouseDragDelta(Vector2* pOut)
		{
			ImGuiNative.GetMouseDragDelta(pOut, (ImGuiMouseButton)(0), (float)(-1.0f));
		}
		public static Vector2 GetMouseDragDelta(float lockThreshold)
		{
			Vector2 ret;
			ImGuiNative.GetMouseDragDelta(&ret, (ImGuiMouseButton)(0), lockThreshold);
			return ret;
		}
		public static Vector2 GetMouseDragDelta(ImGuiMouseButton button, float lockThreshold)
		{
			Vector2 ret;
			ImGuiNative.GetMouseDragDelta(&ret, button, lockThreshold);
			return ret;
		}
		public static void GetMouseDragDelta(Vector2* pOut, ImGuiMouseButton button, float lockThreshold)
		{
			ImGuiNative.GetMouseDragDelta(pOut, button, lockThreshold);
		}
		public static void GetMouseDragDelta(Vector2* pOut, ImGuiMouseButton button)
		{
			ImGuiNative.GetMouseDragDelta(pOut, button, (float)(-1.0f));
		}
		public static void GetMouseDragDelta(Vector2* pOut, float lockThreshold)
		{
			ImGuiNative.GetMouseDragDelta(pOut, (ImGuiMouseButton)(0), lockThreshold);
		}
		public static void GetMouseDragDelta(ref Vector2 pOut, ImGuiMouseButton button, float lockThreshold)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMouseDragDelta((Vector2*)ppOut, button, lockThreshold);
			}
		}
		public static void GetMouseDragDelta(ref Vector2 pOut, ImGuiMouseButton button)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMouseDragDelta((Vector2*)ppOut, button, (float)(-1.0f));
			}
		}
		public static void GetMouseDragDelta(ref Vector2 pOut)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMouseDragDelta((Vector2*)ppOut, (ImGuiMouseButton)(0), (float)(-1.0f));
			}
		}
		public static void GetMouseDragDelta(ref Vector2 pOut, float lockThreshold)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetMouseDragDelta((Vector2*)ppOut, (ImGuiMouseButton)(0), lockThreshold);
			}
		}
		public static void ResetMouseDragDelta(ImGuiMouseButton button)
		{
			ImGuiNative.ResetMouseDragDelta(button);
		}
		public static void ResetMouseDragDelta()
		{
			ImGuiNative.ResetMouseDragDelta((ImGuiMouseButton)(0));
		}
		public static ImGuiMouseCursor GetMouseCursor()
		{
			ImGuiMouseCursor ret = ImGuiNative.GetMouseCursor();
			return ret;
		}
		public static void SetMouseCursor(ImGuiMouseCursor cursorType)
		{
			ImGuiNative.SetMouseCursor(cursorType);
		}
		public static void SetNextFrameWantCaptureMouse(bool wantCaptureMouse)
		{
			ImGuiNative.SetNextFrameWantCaptureMouse(wantCaptureMouse ? (byte)1 : (byte)0);
		}
		public static void SetAllocatorFunctions(ImGuiMemAllocFunc allocFunc, ImGuiMemFreeFunc freeFunc, void* userData)
		{
			ImGuiNative.SetAllocatorFunctions(allocFunc, freeFunc, userData);
		}
		public static void SetAllocatorFunctions(ImGuiMemAllocFunc allocFunc, ImGuiMemFreeFunc freeFunc)
		{
			ImGuiNative.SetAllocatorFunctions(allocFunc, freeFunc, (void*)(default));
		}
		public static void GetAllocatorFunctions(delegate*<nuint, void*, void*>* pAllocFunc, delegate*<void*, void*, void>* pFreeFunc, void** pUserData)
		{
			ImGuiNative.GetAllocatorFunctions(pAllocFunc, pFreeFunc, pUserData);
		}
		public static void* MemAlloc(nuint size)
		{
			void* ret = ImGuiNative.MemAlloc(size);
			return ret;
		}
		public static void MemFree(void* ptr)
		{
			ImGuiNative.MemFree(ptr);
		}
		public static ImGuiPlatformIOPtr GetPlatformIO()
		{
			ImGuiPlatformIOPtr ret = ImGuiNative.GetPlatformIO();
			return ret;
		}
		public static void UpdatePlatformWindows()
		{
			ImGuiNative.UpdatePlatformWindows();
		}
		public static void RenderPlatformWindowsDefault(void* platformRenderArg, void* rendererRenderArg)
		{
			ImGuiNative.RenderPlatformWindowsDefault(platformRenderArg, rendererRenderArg);
		}
		public static void RenderPlatformWindowsDefault(void* platformRenderArg)
		{
			ImGuiNative.RenderPlatformWindowsDefault(platformRenderArg, (void*)(default));
		}
		public static void RenderPlatformWindowsDefault()
		{
			ImGuiNative.RenderPlatformWindowsDefault((void*)(default), (void*)(default));
		}
		public static void DestroyPlatformWindows()
		{
			ImGuiNative.DestroyPlatformWindows();
		}
		public static ImGuiViewportPtr FindViewportByID(uint id)
		{
			ImGuiViewportPtr ret = ImGuiNative.FindViewportByID(id);
			return ret;
		}
		public static ImGuiViewportPtr FindViewportByPlatformHandle(void* platformHandle)
		{
			ImGuiViewportPtr ret = ImGuiNative.FindViewportByPlatformHandle(platformHandle);
			return ret;
		}
		public static ImGuiStylePtr ImGuiStyle()
		{
			ImGuiStylePtr ret = ImGuiNative.ImGuiStyle();
			return ret;
		}
		public static void ScaleAllSizes(this ImGuiStylePtr self, float scaleFactor)
		{
			ImGuiNative.ScaleAllSizes(self, scaleFactor);
		}
		public static void ScaleAllSizes(this ref ImGuiStyle self, float scaleFactor)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				ImGuiNative.ScaleAllSizes((ImGuiStyle*)pself, scaleFactor);
			}
		}
		public static void AddKeyEvent(this ImGuiIOPtr self, ImGuiKey key, bool down)
		{
			ImGuiNative.AddKeyEvent(self, key, down ? (byte)1 : (byte)0);
		}
		public static void AddKeyEvent(this ref ImGuiIO self, ImGuiKey key, bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddKeyEvent((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0);
			}
		}
		public static void AddKeyAnalogEvent(this ImGuiIOPtr self, ImGuiKey key, bool down, float v)
		{
			ImGuiNative.AddKeyAnalogEvent(self, key, down ? (byte)1 : (byte)0, v);
		}
		public static void AddKeyAnalogEvent(this ref ImGuiIO self, ImGuiKey key, bool down, float v)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddKeyAnalogEvent((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0, v);
			}
		}
		public static void AddMousePosEvent(this ImGuiIOPtr self, float x, float y)
		{
			ImGuiNative.AddMousePosEvent(self, x, y);
		}
		public static void AddMousePosEvent(this ref ImGuiIO self, float x, float y)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddMousePosEvent((ImGuiIO*)pself, x, y);
			}
		}
		public static void AddMouseButtonEvent(this ImGuiIOPtr self, int button, bool down)
		{
			ImGuiNative.AddMouseButtonEvent(self, button, down ? (byte)1 : (byte)0);
		}
		public static void AddMouseButtonEvent(this ref ImGuiIO self, int button, bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddMouseButtonEvent((ImGuiIO*)pself, button, down ? (byte)1 : (byte)0);
			}
		}
		public static void AddMouseWheelEvent(this ImGuiIOPtr self, float whX, float whY)
		{
			ImGuiNative.AddMouseWheelEvent(self, whX, whY);
		}
		public static void AddMouseWheelEvent(this ref ImGuiIO self, float whX, float whY)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddMouseWheelEvent((ImGuiIO*)pself, whX, whY);
			}
		}
		public static void AddMouseViewportEvent(this ImGuiIOPtr self, uint id)
		{
			ImGuiNative.AddMouseViewportEvent(self, id);
		}
		public static void AddMouseViewportEvent(this ref ImGuiIO self, uint id)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddMouseViewportEvent((ImGuiIO*)pself, id);
			}
		}
		public static void AddFocusEvent(this ImGuiIOPtr self, bool focused)
		{
			ImGuiNative.AddFocusEvent(self, focused ? (byte)1 : (byte)0);
		}
		public static void AddFocusEvent(this ref ImGuiIO self, bool focused)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.AddFocusEvent((ImGuiIO*)pself, focused ? (byte)1 : (byte)0);
			}
		}
		public static void SetKeyEventNativeData(this ImGuiIOPtr self, ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			ImGuiNative.SetKeyEventNativeData(self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
		}
		public static void SetKeyEventNativeData(this ImGuiIOPtr self, ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			ImGuiNative.SetKeyEventNativeData(self, key, nativeKeycode, nativeScancode, (int)(-1));
		}
		public static void SetKeyEventNativeData(this ref ImGuiIO self, ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.SetKeyEventNativeData((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}
		public static void SetKeyEventNativeData(this ref ImGuiIO self, ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.SetKeyEventNativeData((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, (int)(-1));
			}
		}
		public static void SetAppAcceptingEvents(this ImGuiIOPtr self, bool acceptingEvents)
		{
			ImGuiNative.SetAppAcceptingEvents(self, acceptingEvents ? (byte)1 : (byte)0);
		}
		public static void SetAppAcceptingEvents(this ref ImGuiIO self, bool acceptingEvents)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.SetAppAcceptingEvents((ImGuiIO*)pself, acceptingEvents ? (byte)1 : (byte)0);
			}
		}
		public static void ClearInputCharacters(this ImGuiIOPtr self)
		{
			ImGuiNative.ClearInputCharacters(self);
		}
		public static void ClearInputCharacters(this ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.ClearInputCharacters((ImGuiIO*)pself);
			}
		}
		public static void ClearInputKeys(this ImGuiIOPtr self)
		{
			ImGuiNative.ClearInputKeys(self);
		}
		public static void ClearInputKeys(this ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ImGuiNative.ClearInputKeys((ImGuiIO*)pself);
			}
		}
		public static ImGuiIOPtr ImGuiIO()
		{
			ImGuiIOPtr ret = ImGuiNative.ImGuiIO();
			return ret;
		}
		public static ImGuiInputTextCallbackDataPtr ImGuiInputTextCallbackData()
		{
			ImGuiInputTextCallbackDataPtr ret = ImGuiNative.ImGuiInputTextCallbackData();
			return ret;
		}
		public static void DeleteChars(this ImGuiInputTextCallbackDataPtr self, int pos, int bytesCount)
		{
			ImGuiNative.DeleteChars(self, pos, bytesCount);
		}
		public static void DeleteChars(this ref ImGuiInputTextCallbackData self, int pos, int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ImGuiNative.DeleteChars((ImGuiInputTextCallbackData*)pself, pos, bytesCount);
			}
		}
		public static void SelectAll(this ImGuiInputTextCallbackDataPtr self)
		{
			ImGuiNative.SelectAll(self);
		}
		public static void SelectAll(this ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ImGuiNative.SelectAll((ImGuiInputTextCallbackData*)pself);
			}
		}
		public static void ClearSelection(this ImGuiInputTextCallbackDataPtr self)
		{
			ImGuiNative.ClearSelection(self);
		}
		public static void ClearSelection(this ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ImGuiNative.ClearSelection((ImGuiInputTextCallbackData*)pself);
			}
		}
		public static bool HasSelection(this ImGuiInputTextCallbackDataPtr self)
		{
			byte ret = ImGuiNative.HasSelection(self);
			return ret != 0;
		}
		public static bool HasSelection(this ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte ret = ImGuiNative.HasSelection((ImGuiInputTextCallbackData*)pself);
				return ret != 0;
			}
		}
		public static ImGuiWindowClassPtr ImGuiWindowClass()
		{
			ImGuiWindowClassPtr ret = ImGuiNative.ImGuiWindowClass();
			return ret;
		}
		public static ImGuiPayloadPtr ImGuiPayload()
		{
			ImGuiPayloadPtr ret = ImGuiNative.ImGuiPayload();
			return ret;
		}
		public static void Clear(this ImGuiPayloadPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				ImGuiNative.Clear((ImGuiPayload*)pself);
			}
		}
		public static void Clear(this ImGuiTextFilterPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				ImGuiNative.Clear((ImGuiTextFilter*)pself);
			}
		}
		public static void Clear(this ImGuiStoragePtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImGuiStorage self)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.Clear((ImGuiStorage*)pself);
			}
		}
		public static void Clear(this ImDrawListSplitterPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.Clear((ImDrawListSplitter*)pself);
			}
		}
		public static void Clear(this ImDrawDataPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				ImGuiNative.Clear((ImDrawData*)pself);
			}
		}
		public static void Clear(this ImFontGlyphRangesBuilderPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImFontGlyphRangesBuilder self)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.Clear((ImFontGlyphRangesBuilder*)pself);
			}
		}
		public static void Clear(this ImFontAtlasPtr self)
		{
			ImGuiNative.Clear(self);
		}
		public static void Clear(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.Clear((ImFontAtlas*)pself);
			}
		}
		public static bool IsPreview(this ImGuiPayloadPtr self)
		{
			byte ret = ImGuiNative.IsPreview(self);
			return ret != 0;
		}
		public static bool IsPreview(this ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = ImGuiNative.IsPreview((ImGuiPayload*)pself);
				return ret != 0;
			}
		}
		public static bool IsDelivery(this ImGuiPayloadPtr self)
		{
			byte ret = ImGuiNative.IsDelivery(self);
			return ret != 0;
		}
		public static bool IsDelivery(this ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = ImGuiNative.IsDelivery((ImGuiPayload*)pself);
				return ret != 0;
			}
		}
		public static ImGuiTableColumnSortSpecsPtr ImGuiTableColumnSortSpecs()
		{
			ImGuiTableColumnSortSpecsPtr ret = ImGuiNative.ImGuiTableColumnSortSpecs();
			return ret;
		}
		public static ImGuiTableSortSpecsPtr ImGuiTableSortSpecs()
		{
			ImGuiTableSortSpecsPtr ret = ImGuiNative.ImGuiTableSortSpecs();
			return ret;
		}
		public static ImGuiOnceUponAFramePtr ImGuiOnceUponAFrame()
		{
			ImGuiOnceUponAFramePtr ret = ImGuiNative.ImGuiOnceUponAFrame();
			return ret;
		}
		public static void Build(this ImGuiTextFilterPtr self)
		{
			ImGuiNative.Build(self);
		}
		public static void Build(this ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				ImGuiNative.Build((ImGuiTextFilter*)pself);
			}
		}
		public static bool Build(this ImFontAtlasPtr self)
		{
			byte ret = ImGuiNative.Build(self);
			return ret != 0;
		}
		public static bool Build(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte ret = ImGuiNative.Build((ImFontAtlas*)pself);
				return ret != 0;
			}
		}
		public static bool IsActive(this ImGuiTextFilterPtr self)
		{
			byte ret = ImGuiNative.IsActive(self);
			return ret != 0;
		}
		public static bool IsActive(this ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = ImGuiNative.IsActive((ImGuiTextFilter*)pself);
				return ret != 0;
			}
		}
		public static bool empty(this ImGuiTextRangePtr self)
		{
			byte ret = ImGuiNative.empty(self);
			return ret != 0;
		}
		public static bool empty(this ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				byte ret = ImGuiNative.empty((ImGuiTextRange*)pself);
				return ret != 0;
			}
		}
		public static bool empty(this ImGuiTextBufferPtr self)
		{
			byte ret = ImGuiNative.empty(self);
			return ret != 0;
		}
		public static bool empty(this ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte ret = ImGuiNative.empty((ImGuiTextBuffer*)pself);
				return ret != 0;
			}
		}
		public static void split(this ImGuiTextRangePtr self, byte separator, ImVector<ImGuiTextRange>* output)
		{
			ImGuiNative.split(self, separator, output);
		}
		public static void split(this ref ImGuiTextRange self, byte separator, ImVector<ImGuiTextRange>* output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				ImGuiNative.split((ImGuiTextRange*)pself, separator, output);
			}
		}
		public static void split(this ImGuiTextRangePtr self, byte separator, ref ImVector<ImGuiTextRange> output)
		{
			fixed (ImVector<ImGuiTextRange>* poutput = &output)
			{
				ImGuiNative.split(self, separator, (ImVector<ImGuiTextRange>*)poutput);
			}
		}
		public static void split(this ref ImGuiTextRange self, byte separator, ref ImVector<ImGuiTextRange> output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				fixed (ImVector<ImGuiTextRange>* poutput = &output)
				{
					ImGuiNative.split((ImGuiTextRange*)pself, separator, (ImVector<ImGuiTextRange>*)poutput);
				}
			}
		}
		public static ImGuiTextBufferPtr ImGuiTextBuffer()
		{
			ImGuiTextBufferPtr ret = ImGuiNative.ImGuiTextBuffer();
			return ret;
		}
		public static int size(this ImGuiTextBufferPtr self)
		{
			int ret = ImGuiNative.size(self);
			return ret;
		}
		public static int size(this ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				int ret = ImGuiNative.size((ImGuiTextBuffer*)pself);
				return ret;
			}
		}
		public static void clear(this ImGuiTextBufferPtr self)
		{
			ImGuiNative.clear(self);
		}
		public static void clear(this ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				ImGuiNative.clear((ImGuiTextBuffer*)pself);
			}
		}
		public static void reserve(this ImGuiTextBufferPtr self, int capacity)
		{
			ImGuiNative.reserve(self, capacity);
		}
		public static void reserve(this ref ImGuiTextBuffer self, int capacity)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				ImGuiNative.reserve((ImGuiTextBuffer*)pself, capacity);
			}
		}
		public static ImGuiStoragePairPtr ImGuiStoragePair(uint key, int valI)
		{
			ImGuiStoragePairPtr ret = ImGuiNative.ImGuiStoragePair(key, valI);
			return ret;
		}
		public static ImGuiStoragePairPtr ImGuiStoragePair(uint key, float valF)
		{
			ImGuiStoragePairPtr ret = ImGuiNative.ImGuiStoragePair(key, valF);
			return ret;
		}
		public static ImGuiStoragePairPtr ImGuiStoragePair(uint key, void* valP)
		{
			ImGuiStoragePairPtr ret = ImGuiNative.ImGuiStoragePair(key, valP);
			return ret;
		}
		public static int GetInt(this ImGuiStoragePtr self, uint key, int defaultVal)
		{
			int ret = ImGuiNative.GetInt(self, key, defaultVal);
			return ret;
		}
		public static int GetInt(this ImGuiStoragePtr self, uint key)
		{
			int ret = ImGuiNative.GetInt(self, key, (int)(0));
			return ret;
		}
		public static int GetInt(this scoped in ImGuiStorage self, uint key, int defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int ret = ImGuiNative.GetInt((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}
		public static int GetInt(this scoped in ImGuiStorage self, uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int ret = ImGuiNative.GetInt((ImGuiStorage*)pself, key, (int)(0));
				return ret;
			}
		}
		public static void SetInt(this ImGuiStoragePtr self, uint key, int val)
		{
			ImGuiNative.SetInt(self, key, val);
		}
		public static void SetInt(this ref ImGuiStorage self, uint key, int val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.SetInt((ImGuiStorage*)pself, key, val);
			}
		}
		public static bool GetBool(this ImGuiStoragePtr self, uint key, bool defaultVal)
		{
			byte ret = ImGuiNative.GetBool(self, key, defaultVal ? (byte)1 : (byte)0);
			return ret != 0;
		}
		public static bool GetBool(this ImGuiStoragePtr self, uint key)
		{
			byte ret = ImGuiNative.GetBool(self, key, (byte)(0));
			return ret != 0;
		}
		public static bool GetBool(this scoped in ImGuiStorage self, uint key, bool defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				byte ret = ImGuiNative.GetBool((ImGuiStorage*)pself, key, defaultVal ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}
		public static bool GetBool(this scoped in ImGuiStorage self, uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				byte ret = ImGuiNative.GetBool((ImGuiStorage*)pself, key, (byte)(0));
				return ret != 0;
			}
		}
		public static void SetBool(this ImGuiStoragePtr self, uint key, bool val)
		{
			ImGuiNative.SetBool(self, key, val ? (byte)1 : (byte)0);
		}
		public static void SetBool(this ref ImGuiStorage self, uint key, bool val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.SetBool((ImGuiStorage*)pself, key, val ? (byte)1 : (byte)0);
			}
		}
		public static float GetFloat(this ImGuiStoragePtr self, uint key, float defaultVal)
		{
			float ret = ImGuiNative.GetFloat(self, key, defaultVal);
			return ret;
		}
		public static float GetFloat(this ImGuiStoragePtr self, uint key)
		{
			float ret = ImGuiNative.GetFloat(self, key, (float)(0.0f));
			return ret;
		}
		public static float GetFloat(this scoped in ImGuiStorage self, uint key, float defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float ret = ImGuiNative.GetFloat((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}
		public static float GetFloat(this scoped in ImGuiStorage self, uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float ret = ImGuiNative.GetFloat((ImGuiStorage*)pself, key, (float)(0.0f));
				return ret;
			}
		}
		public static void SetFloat(this ImGuiStoragePtr self, uint key, float val)
		{
			ImGuiNative.SetFloat(self, key, val);
		}
		public static void SetFloat(this ref ImGuiStorage self, uint key, float val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.SetFloat((ImGuiStorage*)pself, key, val);
			}
		}
		public static void* GetVoidPtr(this ImGuiStoragePtr self, uint key)
		{
			void* ret = ImGuiNative.GetVoidPtr(self, key);
			return ret;
		}
		public static void* GetVoidPtr(this scoped in ImGuiStorage self, uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				void* ret = ImGuiNative.GetVoidPtr((ImGuiStorage*)pself, key);
				return ret;
			}
		}
		public static void SetVoidPtr(this ImGuiStoragePtr self, uint key, void* val)
		{
			ImGuiNative.SetVoidPtr(self, key, val);
		}
		public static void SetVoidPtr(this ref ImGuiStorage self, uint key, void* val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.SetVoidPtr((ImGuiStorage*)pself, key, val);
			}
		}
		public static void SetAllInt(this ImGuiStoragePtr self, int val)
		{
			ImGuiNative.SetAllInt(self, val);
		}
		public static void SetAllInt(this ref ImGuiStorage self, int val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.SetAllInt((ImGuiStorage*)pself, val);
			}
		}
		public static void BuildSortByKey(this ImGuiStoragePtr self)
		{
			ImGuiNative.BuildSortByKey(self);
		}
		public static void BuildSortByKey(this ref ImGuiStorage self)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ImGuiNative.BuildSortByKey((ImGuiStorage*)pself);
			}
		}
		public static ImGuiListClipperPtr ImGuiListClipper()
		{
			ImGuiListClipperPtr ret = ImGuiNative.ImGuiListClipper();
			return ret;
		}
		public static bool Step(this ImGuiListClipperPtr self)
		{
			byte ret = ImGuiNative.Step(self);
			return ret != 0;
		}
		public static bool Step(this ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				byte ret = ImGuiNative.Step((ImGuiListClipper*)pself);
				return ret != 0;
			}
		}
		public static void ForceDisplayRangeByIndices(this ImGuiListClipperPtr self, int itemMin, int itemMax)
		{
			ImGuiNative.ForceDisplayRangeByIndices(self, itemMin, itemMax);
		}
		public static void ForceDisplayRangeByIndices(this ref ImGuiListClipper self, int itemMin, int itemMax)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				ImGuiNative.ForceDisplayRangeByIndices((ImGuiListClipper*)pself, itemMin, itemMax);
			}
		}
		public static ImColorPtr ImColor()
		{
			ImColorPtr ret = ImGuiNative.ImColor();
			return ret;
		}
		public static ImColorPtr ImColor(float r, float g, float b, float a)
		{
			ImColorPtr ret = ImGuiNative.ImColor(r, g, b, a);
			return ret;
		}
		public static ImColorPtr ImColor(float r, float g, float b)
		{
			ImColorPtr ret = ImGuiNative.ImColor(r, g, b, (float)(1.0f));
			return ret;
		}
		public static ImColorPtr ImColor(Vector4 col)
		{
			ImColorPtr ret = ImGuiNative.ImColor(col);
			return ret;
		}
		public static ImColorPtr ImColor(int r, int g, int b, int a)
		{
			ImColorPtr ret = ImGuiNative.ImColor(r, g, b, a);
			return ret;
		}
		public static ImColorPtr ImColor(int r, int g, int b)
		{
			ImColorPtr ret = ImGuiNative.ImColor(r, g, b, (int)(255));
			return ret;
		}
		public static ImColorPtr ImColor(uint rgba)
		{
			ImColorPtr ret = ImGuiNative.ImColor(rgba);
			return ret;
		}
		public static void SetHSV(this ImColorPtr self, float h, float s, float v, float a)
		{
			ImGuiNative.SetHSV(self, h, s, v, a);
		}
		public static void SetHSV(this ImColorPtr self, float h, float s, float v)
		{
			ImGuiNative.SetHSV(self, h, s, v, (float)(1.0f));
		}
		public static void SetHSV(this ref ImColor self, float h, float s, float v, float a)
		{
			fixed (ImColor* pself = &self)
			{
				ImGuiNative.SetHSV((ImColor*)pself, h, s, v, a);
			}
		}
		public static void SetHSV(this ref ImColor self, float h, float s, float v)
		{
			fixed (ImColor* pself = &self)
			{
				ImGuiNative.SetHSV((ImColor*)pself, h, s, v, (float)(1.0f));
			}
		}
		public static ImColor HSV(float h, float s, float v)
		{
			ImColor ret;
			ImGuiNative.HSV(&ret, h, s, v, (float)(1.0f));
			return ret;
		}
		public static ImColor HSV(float h, float s, float v, float a)
		{
			ImColor ret;
			ImGuiNative.HSV(&ret, h, s, v, a);
			return ret;
		}
		public static void HSV(ImColorPtr pOut, float h, float s, float v, float a)
		{
			ImGuiNative.HSV(pOut, h, s, v, a);
		}
		public static void HSV(ImColorPtr pOut, float h, float s, float v)
		{
			ImGuiNative.HSV(pOut, h, s, v, (float)(1.0f));
		}
		public static void HSV(ref ImColor pOut, float h, float s, float v, float a)
		{
			fixed (ImColor* ppOut = &pOut)
			{
				ImGuiNative.HSV((ImColor*)ppOut, h, s, v, a);
			}
		}
		public static void HSV(ref ImColor pOut, float h, float s, float v)
		{
			fixed (ImColor* ppOut = &pOut)
			{
				ImGuiNative.HSV((ImColor*)ppOut, h, s, v, (float)(1.0f));
			}
		}
		public static ImDrawCmdPtr ImDrawCmd()
		{
			ImDrawCmdPtr ret = ImGuiNative.ImDrawCmd();
			return ret;
		}
		public static ImTextureID GetTexID(this ImDrawCmdPtr self)
		{
			ImTextureID ret = ImGuiNative.GetTexID(self);
			return ret;
		}
		public static ImTextureID GetTexID(this scoped in ImDrawCmd self)
		{
			fixed (ImDrawCmd* pself = &self)
			{
				ImTextureID ret = ImGuiNative.GetTexID((ImDrawCmd*)pself);
				return ret;
			}
		}
		public static ImDrawListSplitterPtr ImDrawListSplitter()
		{
			ImDrawListSplitterPtr ret = ImGuiNative.ImDrawListSplitter();
			return ret;
		}
		public static void ClearFreeMemory(this ImDrawListSplitterPtr self)
		{
			ImGuiNative.ClearFreeMemory(self);
		}
		public static void ClearFreeMemory(this ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.ClearFreeMemory((ImDrawListSplitter*)pself);
			}
		}
		public static void Split(this ImDrawListSplitterPtr self, ImDrawListPtr drawList, int count)
		{
			ImGuiNative.Split(self, drawList, count);
		}
		public static void Split(this ref ImDrawListSplitter self, ImDrawListPtr drawList, int count)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.Split((ImDrawListSplitter*)pself, drawList, count);
			}
		}
		public static void Split(this ImDrawListSplitterPtr self, ref ImDrawList drawList, int count)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ImGuiNative.Split(self, (ImDrawList*)pdrawList, count);
			}
		}
		public static void Split(this ref ImDrawListSplitter self, ref ImDrawList drawList, int count)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.Split((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList, count);
				}
			}
		}
		public static void Merge(this ImDrawListSplitterPtr self, ImDrawListPtr drawList)
		{
			ImGuiNative.Merge(self, drawList);
		}
		public static void Merge(this ref ImDrawListSplitter self, ImDrawListPtr drawList)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.Merge((ImDrawListSplitter*)pself, drawList);
			}
		}
		public static void Merge(this ImDrawListSplitterPtr self, ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ImGuiNative.Merge(self, (ImDrawList*)pdrawList);
			}
		}
		public static void Merge(this ref ImDrawListSplitter self, ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.Merge((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList);
				}
			}
		}
		public static void SetCurrentChannel(this ImDrawListSplitterPtr self, ImDrawListPtr drawList, int channelIdx)
		{
			ImGuiNative.SetCurrentChannel(self, drawList, channelIdx);
		}
		public static void SetCurrentChannel(this ref ImDrawListSplitter self, ImDrawListPtr drawList, int channelIdx)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ImGuiNative.SetCurrentChannel((ImDrawListSplitter*)pself, drawList, channelIdx);
			}
		}
		public static void SetCurrentChannel(this ImDrawListSplitterPtr self, ref ImDrawList drawList, int channelIdx)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ImGuiNative.SetCurrentChannel(self, (ImDrawList*)pdrawList, channelIdx);
			}
		}
		public static void SetCurrentChannel(this ref ImDrawListSplitter self, ref ImDrawList drawList, int channelIdx)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.SetCurrentChannel((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}
		public static ImDrawListPtr ImDrawList(ImDrawListSharedDataPtr sharedData)
		{
			ImDrawListPtr ret = ImGuiNative.ImDrawList(sharedData);
			return ret;
		}
		public static ImDrawListPtr ImDrawList(ref ImDrawListSharedData sharedData)
		{
			fixed (ImDrawListSharedData* psharedData = &sharedData)
			{
				ImDrawListPtr ret = ImGuiNative.ImDrawList((ImDrawListSharedData*)psharedData);
				return ret;
			}
		}
		public static void PushClipRectFullScreen(this ImDrawListPtr self)
		{
			ImGuiNative.PushClipRectFullScreen(self);
		}
		public static void PushClipRectFullScreen(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PushClipRectFullScreen((ImDrawList*)pself);
			}
		}
		public static void PushTextureID(this ImDrawListPtr self, ImTextureID textureId)
		{
			ImGuiNative.PushTextureID(self, textureId);
		}
		public static void PushTextureID(this ref ImDrawList self, ImTextureID textureId)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PushTextureID((ImDrawList*)pself, textureId);
			}
		}
		public static void PopTextureID(this ImDrawListPtr self)
		{
			ImGuiNative.PopTextureID(self);
		}
		public static void PopTextureID(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PopTextureID((ImDrawList*)pself);
			}
		}
		public static Vector2 GetClipRectMin(this ImDrawListPtr self)
		{
			Vector2 ret;
			ImGuiNative.GetClipRectMin(&ret, self);
			return ret;
		}
		public static void GetClipRectMin(Vector2* pOut, ImDrawListPtr self)
		{
			ImGuiNative.GetClipRectMin(pOut, self);
		}
		public static void GetClipRectMin(ref Vector2 pOut, ImDrawListPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetClipRectMin((Vector2*)ppOut, self);
			}
		}
		public static Vector2 GetClipRectMin(this scoped in ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				Vector2 ret;
				ImGuiNative.GetClipRectMin(&ret, (ImDrawList*)pself);
				return ret;
			}
		}
		public static void GetClipRectMin(Vector2* pOut, ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.GetClipRectMin(pOut, (ImDrawList*)pself);
			}
		}
		public static void GetClipRectMin(ref Vector2 pOut, ref ImDrawList self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImDrawList* pself = &self)
				{
					ImGuiNative.GetClipRectMin((Vector2*)ppOut, (ImDrawList*)pself);
				}
			}
		}
		public static Vector2 GetClipRectMax(this ImDrawListPtr self)
		{
			Vector2 ret;
			ImGuiNative.GetClipRectMax(&ret, self);
			return ret;
		}
		public static void GetClipRectMax(Vector2* pOut, ImDrawListPtr self)
		{
			ImGuiNative.GetClipRectMax(pOut, self);
		}
		public static void GetClipRectMax(ref Vector2 pOut, ImDrawListPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetClipRectMax((Vector2*)ppOut, self);
			}
		}
		public static Vector2 GetClipRectMax(this scoped in ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				Vector2 ret;
				ImGuiNative.GetClipRectMax(&ret, (ImDrawList*)pself);
				return ret;
			}
		}
		public static void GetClipRectMax(Vector2* pOut, ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.GetClipRectMax(pOut, (ImDrawList*)pself);
			}
		}
		public static void GetClipRectMax(ref Vector2 pOut, ref ImDrawList self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImDrawList* pself = &self)
				{
					ImGuiNative.GetClipRectMax((Vector2*)ppOut, (ImDrawList*)pself);
				}
			}
		}
		public static void AddLine(this ImDrawListPtr self, Vector2 p1, Vector2 p2, uint col, float thickness)
		{
			ImGuiNative.AddLine(self, p1, p2, col, thickness);
		}
		public static void AddLine(this ImDrawListPtr self, Vector2 p1, Vector2 p2, uint col)
		{
			ImGuiNative.AddLine(self, p1, p2, col, (float)(1.0f));
		}
		public static void AddLine(this ref ImDrawList self, Vector2 p1, Vector2 p2, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddLine((ImDrawList*)pself, p1, p2, col, thickness);
			}
		}
		public static void AddLine(this ref ImDrawList self, Vector2 p1, Vector2 p2, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddLine((ImDrawList*)pself, p1, p2, col, (float)(1.0f));
			}
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, rounding, flags, thickness);
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, rounding, flags, (float)(1.0f));
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding, float thickness)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
		}
		public static void AddRect(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddRect(self, pMin, pMax, col, (float)(0.0f), flags, thickness);
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, rounding, flags, thickness);
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, rounding, flags, (float)(1.0f));
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
			}
		}
		public static void AddRect(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRect((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags, thickness);
			}
		}
		public static void AddRectFilled(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddRectFilled(self, pMin, pMax, col, rounding, flags);
		}
		public static void AddRectFilled(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			ImGuiNative.AddRectFilled(self, pMin, pMax, col, rounding, (ImDrawFlags)(0));
		}
		public static void AddRectFilled(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddRectFilled(self, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
		}
		public static void AddRectFilled(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			ImGuiNative.AddRectFilled(self, pMin, pMax, col, (float)(0.0f), flags);
		}
		public static void AddRectFilled(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRectFilled((ImDrawList*)pself, pMin, pMax, col, rounding, flags);
			}
		}
		public static void AddRectFilled(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRectFilled((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0));
			}
		}
		public static void AddRectFilled(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRectFilled((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
			}
		}
		public static void AddRectFilled(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRectFilled((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags);
			}
		}
		public static void AddRectFilledMultiColor(this ImDrawListPtr self, Vector2 pMin, Vector2 pMax, uint colUprLeft, uint colUprRight, uint colBotRight, uint colBotLeft)
		{
			ImGuiNative.AddRectFilledMultiColor(self, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
		}
		public static void AddRectFilledMultiColor(this ref ImDrawList self, Vector2 pMin, Vector2 pMax, uint colUprLeft, uint colUprRight, uint colBotRight, uint colBotLeft)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddRectFilledMultiColor((ImDrawList*)pself, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			}
		}
		public static void AddQuad(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			ImGuiNative.AddQuad(self, p1, p2, p3, p4, col, thickness);
		}
		public static void AddQuad(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddQuad(self, p1, p2, p3, p4, col, (float)(1.0f));
		}
		public static void AddQuad(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddQuad((ImDrawList*)pself, p1, p2, p3, p4, col, thickness);
			}
		}
		public static void AddQuad(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddQuad((ImDrawList*)pself, p1, p2, p3, p4, col, (float)(1.0f));
			}
		}
		public static void AddQuadFilled(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddQuadFilled(self, p1, p2, p3, p4, col);
		}
		public static void AddQuadFilled(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddQuadFilled((ImDrawList*)pself, p1, p2, p3, p4, col);
			}
		}
		public static void AddTriangle(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			ImGuiNative.AddTriangle(self, p1, p2, p3, col, thickness);
		}
		public static void AddTriangle(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			ImGuiNative.AddTriangle(self, p1, p2, p3, col, (float)(1.0f));
		}
		public static void AddTriangle(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddTriangle((ImDrawList*)pself, p1, p2, p3, col, thickness);
			}
		}
		public static void AddTriangle(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddTriangle((ImDrawList*)pself, p1, p2, p3, col, (float)(1.0f));
			}
		}
		public static void AddTriangleFilled(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			ImGuiNative.AddTriangleFilled(self, p1, p2, p3, col);
		}
		public static void AddTriangleFilled(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddTriangleFilled((ImDrawList*)pself, p1, p2, p3, col);
			}
		}
		public static void AddCircle(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			ImGuiNative.AddCircle(self, center, radius, col, numSegments, thickness);
		}
		public static void AddCircle(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddCircle(self, center, radius, col, numSegments, (float)(1.0f));
		}
		public static void AddCircle(this ImDrawListPtr self, Vector2 center, float radius, uint col)
		{
			ImGuiNative.AddCircle(self, center, radius, col, (int)(0), (float)(1.0f));
		}
		public static void AddCircle(this ImDrawListPtr self, Vector2 center, float radius, uint col, float thickness)
		{
			ImGuiNative.AddCircle(self, center, radius, col, (int)(0), thickness);
		}
		public static void AddCircle(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircle((ImDrawList*)pself, center, radius, col, numSegments, thickness);
			}
		}
		public static void AddCircle(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircle((ImDrawList*)pself, center, radius, col, numSegments, (float)(1.0f));
			}
		}
		public static void AddCircle(this ref ImDrawList self, Vector2 center, float radius, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircle((ImDrawList*)pself, center, radius, col, (int)(0), (float)(1.0f));
			}
		}
		public static void AddCircle(this ref ImDrawList self, Vector2 center, float radius, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircle((ImDrawList*)pself, center, radius, col, (int)(0), thickness);
			}
		}
		public static void AddCircleFilled(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddCircleFilled(self, center, radius, col, numSegments);
		}
		public static void AddCircleFilled(this ImDrawListPtr self, Vector2 center, float radius, uint col)
		{
			ImGuiNative.AddCircleFilled(self, center, radius, col, (int)(0));
		}
		public static void AddCircleFilled(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircleFilled((ImDrawList*)pself, center, radius, col, numSegments);
			}
		}
		public static void AddCircleFilled(this ref ImDrawList self, Vector2 center, float radius, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCircleFilled((ImDrawList*)pself, center, radius, col, (int)(0));
			}
		}
		public static void AddNgon(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			ImGuiNative.AddNgon(self, center, radius, col, numSegments, thickness);
		}
		public static void AddNgon(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddNgon(self, center, radius, col, numSegments, (float)(1.0f));
		}
		public static void AddNgon(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddNgon((ImDrawList*)pself, center, radius, col, numSegments, thickness);
			}
		}
		public static void AddNgon(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddNgon((ImDrawList*)pself, center, radius, col, numSegments, (float)(1.0f));
			}
		}
		public static void AddNgonFilled(this ImDrawListPtr self, Vector2 center, float radius, uint col, int numSegments)
		{
			ImGuiNative.AddNgonFilled(self, center, radius, col, numSegments);
		}
		public static void AddNgonFilled(this ref ImDrawList self, Vector2 center, float radius, uint col, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddNgonFilled((ImDrawList*)pself, center, radius, col, numSegments);
			}
		}
		public static void AddPolyline(this ImDrawListPtr self, Vector2* points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.AddPolyline(self, points, numPoints, col, flags, thickness);
		}
		public static void AddPolyline(this ref ImDrawList self, Vector2* points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddPolyline((ImDrawList*)pself, points, numPoints, col, flags, thickness);
			}
		}
		public static void AddPolyline(this ImDrawListPtr self, ref Vector2 points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImGuiNative.AddPolyline(self, (Vector2*)ppoints, numPoints, col, flags, thickness);
			}
		}
		public static void AddPolyline(this ref ImDrawList self, ref Vector2 points, int numPoints, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGuiNative.AddPolyline((ImDrawList*)pself, (Vector2*)ppoints, numPoints, col, flags, thickness);
				}
			}
		}
		public static void AddConvexPolyFilled(this ImDrawListPtr self, Vector2* points, int numPoints, uint col)
		{
			ImGuiNative.AddConvexPolyFilled(self, points, numPoints, col);
		}
		public static void AddConvexPolyFilled(this ref ImDrawList self, Vector2* points, int numPoints, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddConvexPolyFilled((ImDrawList*)pself, points, numPoints, col);
			}
		}
		public static void AddConvexPolyFilled(this ImDrawListPtr self, ref Vector2 points, int numPoints, uint col)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImGuiNative.AddConvexPolyFilled(self, (Vector2*)ppoints, numPoints, col);
			}
		}
		public static void AddConvexPolyFilled(this ref ImDrawList self, ref Vector2 points, int numPoints, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGuiNative.AddConvexPolyFilled((ImDrawList*)pself, (Vector2*)ppoints, numPoints, col);
				}
			}
		}
		public static void AddBezierCubic(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int numSegments)
		{
			ImGuiNative.AddBezierCubic(self, p1, p2, p3, p4, col, thickness, numSegments);
		}
		public static void AddBezierCubic(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			ImGuiNative.AddBezierCubic(self, p1, p2, p3, p4, col, thickness, (int)(0));
		}
		public static void AddBezierCubic(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddBezierCubic((ImDrawList*)pself, p1, p2, p3, p4, col, thickness, numSegments);
			}
		}
		public static void AddBezierCubic(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddBezierCubic((ImDrawList*)pself, p1, p2, p3, p4, col, thickness, (int)(0));
			}
		}
		public static void AddBezierQuadratic(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int numSegments)
		{
			ImGuiNative.AddBezierQuadratic(self, p1, p2, p3, col, thickness, numSegments);
		}
		public static void AddBezierQuadratic(this ImDrawListPtr self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			ImGuiNative.AddBezierQuadratic(self, p1, p2, p3, col, thickness, (int)(0));
		}
		public static void AddBezierQuadratic(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddBezierQuadratic((ImDrawList*)pself, p1, p2, p3, col, thickness, numSegments);
			}
		}
		public static void AddBezierQuadratic(this ref ImDrawList self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddBezierQuadratic((ImDrawList*)pself, p1, p2, p3, col, thickness, (int)(0));
			}
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, uvMin, uvMax, col);
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, uint col)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
		}
		public static void AddImage(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, uint col)
		{
			ImGuiNative.AddImage(self, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, uvMax, col);
			}
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
			}
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
			}
		}
		public static void AddImage(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImage((ImDrawList*)pself, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
			}
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, uint col)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, uint col)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, uint col)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public static void AddImageQuad(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			ImGuiNative.AddImageQuad(self, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public static void AddImageQuad(this ref ImDrawList self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageQuad((ImDrawList*)pself, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}
		public static void AddImageRounded(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.AddImageRounded(self, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
		}
		public static void AddImageRounded(this ImDrawListPtr self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding)
		{
			ImGuiNative.AddImageRounded(self, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (ImDrawFlags)(0));
		}
		public static void AddImageRounded(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageRounded((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
			}
		}
		public static void AddImageRounded(this ref ImDrawList self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddImageRounded((ImDrawList*)pself, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (ImDrawFlags)(0));
			}
		}
		public static void PathClear(this ImDrawListPtr self)
		{
			ImGuiNative.PathClear(self);
		}
		public static void PathClear(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathClear((ImDrawList*)pself);
			}
		}
		public static void PathLineTo(this ImDrawListPtr self, Vector2 pos)
		{
			ImGuiNative.PathLineTo(self, pos);
		}
		public static void PathLineTo(this ref ImDrawList self, Vector2 pos)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathLineTo((ImDrawList*)pself, pos);
			}
		}
		public static void PathLineToMergeDuplicate(this ImDrawListPtr self, Vector2 pos)
		{
			ImGuiNative.PathLineToMergeDuplicate(self, pos);
		}
		public static void PathLineToMergeDuplicate(this ref ImDrawList self, Vector2 pos)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathLineToMergeDuplicate((ImDrawList*)pself, pos);
			}
		}
		public static void PathFillConvex(this ImDrawListPtr self, uint col)
		{
			ImGuiNative.PathFillConvex(self, col);
		}
		public static void PathFillConvex(this ref ImDrawList self, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathFillConvex((ImDrawList*)pself, col);
			}
		}
		public static void PathStroke(this ImDrawListPtr self, uint col, ImDrawFlags flags, float thickness)
		{
			ImGuiNative.PathStroke(self, col, flags, thickness);
		}
		public static void PathStroke(this ImDrawListPtr self, uint col, ImDrawFlags flags)
		{
			ImGuiNative.PathStroke(self, col, flags, (float)(1.0f));
		}
		public static void PathStroke(this ImDrawListPtr self, uint col)
		{
			ImGuiNative.PathStroke(self, col, (ImDrawFlags)(0), (float)(1.0f));
		}
		public static void PathStroke(this ImDrawListPtr self, uint col, float thickness)
		{
			ImGuiNative.PathStroke(self, col, (ImDrawFlags)(0), thickness);
		}
		public static void PathStroke(this ref ImDrawList self, uint col, ImDrawFlags flags, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathStroke((ImDrawList*)pself, col, flags, thickness);
			}
		}
		public static void PathStroke(this ref ImDrawList self, uint col, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathStroke((ImDrawList*)pself, col, flags, (float)(1.0f));
			}
		}
		public static void PathStroke(this ref ImDrawList self, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathStroke((ImDrawList*)pself, col, (ImDrawFlags)(0), (float)(1.0f));
			}
		}
		public static void PathStroke(this ref ImDrawList self, uint col, float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathStroke((ImDrawList*)pself, col, (ImDrawFlags)(0), thickness);
			}
		}
		public static void PathArcTo(this ImDrawListPtr self, Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			ImGuiNative.PathArcTo(self, center, radius, aMin, aMax, numSegments);
		}
		public static void PathArcTo(this ImDrawListPtr self, Vector2 center, float radius, float aMin, float aMax)
		{
			ImGuiNative.PathArcTo(self, center, radius, aMin, aMax, (int)(0));
		}
		public static void PathArcTo(this ref ImDrawList self, Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathArcTo((ImDrawList*)pself, center, radius, aMin, aMax, numSegments);
			}
		}
		public static void PathArcTo(this ref ImDrawList self, Vector2 center, float radius, float aMin, float aMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathArcTo((ImDrawList*)pself, center, radius, aMin, aMax, (int)(0));
			}
		}
		public static void PathArcToFast(this ImDrawListPtr self, Vector2 center, float radius, int aMinOf12, int aMaxOf12)
		{
			ImGuiNative.PathArcToFast(self, center, radius, aMinOf12, aMaxOf12);
		}
		public static void PathArcToFast(this ref ImDrawList self, Vector2 center, float radius, int aMinOf12, int aMaxOf12)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathArcToFast((ImDrawList*)pself, center, radius, aMinOf12, aMaxOf12);
			}
		}
		public static void PathBezierCubicCurveTo(this ImDrawListPtr self, Vector2 p2, Vector2 p3, Vector2 p4, int numSegments)
		{
			ImGuiNative.PathBezierCubicCurveTo(self, p2, p3, p4, numSegments);
		}
		public static void PathBezierCubicCurveTo(this ImDrawListPtr self, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			ImGuiNative.PathBezierCubicCurveTo(self, p2, p3, p4, (int)(0));
		}
		public static void PathBezierCubicCurveTo(this ref ImDrawList self, Vector2 p2, Vector2 p3, Vector2 p4, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathBezierCubicCurveTo((ImDrawList*)pself, p2, p3, p4, numSegments);
			}
		}
		public static void PathBezierCubicCurveTo(this ref ImDrawList self, Vector2 p2, Vector2 p3, Vector2 p4)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathBezierCubicCurveTo((ImDrawList*)pself, p2, p3, p4, (int)(0));
			}
		}
		public static void PathBezierQuadraticCurveTo(this ImDrawListPtr self, Vector2 p2, Vector2 p3, int numSegments)
		{
			ImGuiNative.PathBezierQuadraticCurveTo(self, p2, p3, numSegments);
		}
		public static void PathBezierQuadraticCurveTo(this ImDrawListPtr self, Vector2 p2, Vector2 p3)
		{
			ImGuiNative.PathBezierQuadraticCurveTo(self, p2, p3, (int)(0));
		}
		public static void PathBezierQuadraticCurveTo(this ref ImDrawList self, Vector2 p2, Vector2 p3, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathBezierQuadraticCurveTo((ImDrawList*)pself, p2, p3, numSegments);
			}
		}
		public static void PathBezierQuadraticCurveTo(this ref ImDrawList self, Vector2 p2, Vector2 p3)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathBezierQuadraticCurveTo((ImDrawList*)pself, p2, p3, (int)(0));
			}
		}
		public static void PathRect(this ImDrawListPtr self, Vector2 rectMin, Vector2 rectMax, float rounding, ImDrawFlags flags)
		{
			ImGuiNative.PathRect(self, rectMin, rectMax, rounding, flags);
		}
		public static void PathRect(this ImDrawListPtr self, Vector2 rectMin, Vector2 rectMax, float rounding)
		{
			ImGuiNative.PathRect(self, rectMin, rectMax, rounding, (ImDrawFlags)(0));
		}
		public static void PathRect(this ImDrawListPtr self, Vector2 rectMin, Vector2 rectMax)
		{
			ImGuiNative.PathRect(self, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
		}
		public static void PathRect(this ImDrawListPtr self, Vector2 rectMin, Vector2 rectMax, ImDrawFlags flags)
		{
			ImGuiNative.PathRect(self, rectMin, rectMax, (float)(0.0f), flags);
		}
		public static void PathRect(this ref ImDrawList self, Vector2 rectMin, Vector2 rectMax, float rounding, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathRect((ImDrawList*)pself, rectMin, rectMax, rounding, flags);
			}
		}
		public static void PathRect(this ref ImDrawList self, Vector2 rectMin, Vector2 rectMax, float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathRect((ImDrawList*)pself, rectMin, rectMax, rounding, (ImDrawFlags)(0));
			}
		}
		public static void PathRect(this ref ImDrawList self, Vector2 rectMin, Vector2 rectMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathRect((ImDrawList*)pself, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
			}
		}
		public static void PathRect(this ref ImDrawList self, Vector2 rectMin, Vector2 rectMax, ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PathRect((ImDrawList*)pself, rectMin, rectMax, (float)(0.0f), flags);
			}
		}
		public static void AddCallback(this ImDrawListPtr self, ImDrawCallback callback, void* callbackData)
		{
			ImGuiNative.AddCallback(self, callback, callbackData);
		}
		public static void AddCallback(this ref ImDrawList self, ImDrawCallback callback, void* callbackData)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddCallback((ImDrawList*)pself, callback, callbackData);
			}
		}
		public static void AddDrawCmd(this ImDrawListPtr self)
		{
			ImGuiNative.AddDrawCmd(self);
		}
		public static void AddDrawCmd(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.AddDrawCmd((ImDrawList*)pself);
			}
		}
		public static ImDrawListPtr CloneOutput(this ImDrawListPtr self)
		{
			ImDrawListPtr ret = ImGuiNative.CloneOutput(self);
			return ret;
		}
		public static ImDrawListPtr CloneOutput(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImDrawListPtr ret = ImGuiNative.CloneOutput((ImDrawList*)pself);
				return ret;
			}
		}
		public static void ChannelsSplit(this ImDrawListPtr self, int count)
		{
			ImGuiNative.ChannelsSplit(self, count);
		}
		public static void ChannelsSplit(this ref ImDrawList self, int count)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.ChannelsSplit((ImDrawList*)pself, count);
			}
		}
		public static void ChannelsMerge(this ImDrawListPtr self)
		{
			ImGuiNative.ChannelsMerge(self);
		}
		public static void ChannelsMerge(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.ChannelsMerge((ImDrawList*)pself);
			}
		}
		public static void ChannelsSetCurrent(this ImDrawListPtr self, int n)
		{
			ImGuiNative.ChannelsSetCurrent(self, n);
		}
		public static void ChannelsSetCurrent(this ref ImDrawList self, int n)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.ChannelsSetCurrent((ImDrawList*)pself, n);
			}
		}
		public static void PrimReserve(this ImDrawListPtr self, int idxCount, int vtxCount)
		{
			ImGuiNative.PrimReserve(self, idxCount, vtxCount);
		}
		public static void PrimReserve(this ref ImDrawList self, int idxCount, int vtxCount)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimReserve((ImDrawList*)pself, idxCount, vtxCount);
			}
		}
		public static void PrimUnreserve(this ImDrawListPtr self, int idxCount, int vtxCount)
		{
			ImGuiNative.PrimUnreserve(self, idxCount, vtxCount);
		}
		public static void PrimUnreserve(this ref ImDrawList self, int idxCount, int vtxCount)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimUnreserve((ImDrawList*)pself, idxCount, vtxCount);
			}
		}
		public static void PrimRect(this ImDrawListPtr self, Vector2 a, Vector2 b, uint col)
		{
			ImGuiNative.PrimRect(self, a, b, col);
		}
		public static void PrimRect(this ref ImDrawList self, Vector2 a, Vector2 b, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimRect((ImDrawList*)pself, a, b, col);
			}
		}
		public static void PrimRectUV(this ImDrawListPtr self, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, uint col)
		{
			ImGuiNative.PrimRectUV(self, a, b, uvA, uvB, col);
		}
		public static void PrimRectUV(this ref ImDrawList self, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimRectUV((ImDrawList*)pself, a, b, uvA, uvB, col);
			}
		}
		public static void PrimQuadUV(this ImDrawListPtr self, Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uvA, Vector2 uvB, Vector2 uvC, Vector2 uvD, uint col)
		{
			ImGuiNative.PrimQuadUV(self, a, b, c, d, uvA, uvB, uvC, uvD, col);
		}
		public static void PrimQuadUV(this ref ImDrawList self, Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uvA, Vector2 uvB, Vector2 uvC, Vector2 uvD, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimQuadUV((ImDrawList*)pself, a, b, c, d, uvA, uvB, uvC, uvD, col);
			}
		}
		public static void PrimWriteVtx(this ImDrawListPtr self, Vector2 pos, Vector2 uv, uint col)
		{
			ImGuiNative.PrimWriteVtx(self, pos, uv, col);
		}
		public static void PrimWriteVtx(this ref ImDrawList self, Vector2 pos, Vector2 uv, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimWriteVtx((ImDrawList*)pself, pos, uv, col);
			}
		}
		public static void PrimWriteIdx(this ImDrawListPtr self, ushort idx)
		{
			ImGuiNative.PrimWriteIdx(self, idx);
		}
		public static void PrimWriteIdx(this ref ImDrawList self, ushort idx)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimWriteIdx((ImDrawList*)pself, idx);
			}
		}
		public static void PrimVtx(this ImDrawListPtr self, Vector2 pos, Vector2 uv, uint col)
		{
			ImGuiNative.PrimVtx(self, pos, uv, col);
		}
		public static void PrimVtx(this ref ImDrawList self, Vector2 pos, Vector2 uv, uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative.PrimVtx((ImDrawList*)pself, pos, uv, col);
			}
		}
		public static void _ResetForNewFrame(this ImDrawListPtr self)
		{
			ImGuiNative._ResetForNewFrame(self);
		}
		public static void _ResetForNewFrame(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._ResetForNewFrame((ImDrawList*)pself);
			}
		}
		public static void _ClearFreeMemory(this ImDrawListPtr self)
		{
			ImGuiNative._ClearFreeMemory(self);
		}
		public static void _ClearFreeMemory(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._ClearFreeMemory((ImDrawList*)pself);
			}
		}
		public static void _PopUnusedDrawCmd(this ImDrawListPtr self)
		{
			ImGuiNative._PopUnusedDrawCmd(self);
		}
		public static void _PopUnusedDrawCmd(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._PopUnusedDrawCmd((ImDrawList*)pself);
			}
		}
		public static void _TryMergeDrawCmds(this ImDrawListPtr self)
		{
			ImGuiNative._TryMergeDrawCmds(self);
		}
		public static void _TryMergeDrawCmds(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._TryMergeDrawCmds((ImDrawList*)pself);
			}
		}
		public static void _OnChangedClipRect(this ImDrawListPtr self)
		{
			ImGuiNative._OnChangedClipRect(self);
		}
		public static void _OnChangedClipRect(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._OnChangedClipRect((ImDrawList*)pself);
			}
		}
		public static void _OnChangedTextureID(this ImDrawListPtr self)
		{
			ImGuiNative._OnChangedTextureID(self);
		}
		public static void _OnChangedTextureID(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._OnChangedTextureID((ImDrawList*)pself);
			}
		}
		public static void _OnChangedVtxOffset(this ImDrawListPtr self)
		{
			ImGuiNative._OnChangedVtxOffset(self);
		}
		public static void _OnChangedVtxOffset(this ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._OnChangedVtxOffset((ImDrawList*)pself);
			}
		}
		public static int _CalcCircleAutoSegmentCount(this ImDrawListPtr self, float radius)
		{
			int ret = ImGuiNative._CalcCircleAutoSegmentCount(self, radius);
			return ret;
		}
		public static int _CalcCircleAutoSegmentCount(this ref ImDrawList self, float radius)
		{
			fixed (ImDrawList* pself = &self)
			{
				int ret = ImGuiNative._CalcCircleAutoSegmentCount((ImDrawList*)pself, radius);
				return ret;
			}
		}
		public static void _PathArcToFastEx(this ImDrawListPtr self, Vector2 center, float radius, int aMinSample, int aMaxSample, int aStep)
		{
			ImGuiNative._PathArcToFastEx(self, center, radius, aMinSample, aMaxSample, aStep);
		}
		public static void _PathArcToFastEx(this ref ImDrawList self, Vector2 center, float radius, int aMinSample, int aMaxSample, int aStep)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._PathArcToFastEx((ImDrawList*)pself, center, radius, aMinSample, aMaxSample, aStep);
			}
		}
		public static void _PathArcToN(this ImDrawListPtr self, Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			ImGuiNative._PathArcToN(self, center, radius, aMin, aMax, numSegments);
		}
		public static void _PathArcToN(this ref ImDrawList self, Vector2 center, float radius, float aMin, float aMax, int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				ImGuiNative._PathArcToN((ImDrawList*)pself, center, radius, aMin, aMax, numSegments);
			}
		}
		public static ImDrawDataPtr ImDrawData()
		{
			ImDrawDataPtr ret = ImGuiNative.ImDrawData();
			return ret;
		}
		public static void DeIndexAllBuffers(this ImDrawDataPtr self)
		{
			ImGuiNative.DeIndexAllBuffers(self);
		}
		public static void DeIndexAllBuffers(this ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				ImGuiNative.DeIndexAllBuffers((ImDrawData*)pself);
			}
		}
		public static void ScaleClipRects(this ImDrawDataPtr self, Vector2 fbScale)
		{
			ImGuiNative.ScaleClipRects(self, fbScale);
		}
		public static void ScaleClipRects(this ref ImDrawData self, Vector2 fbScale)
		{
			fixed (ImDrawData* pself = &self)
			{
				ImGuiNative.ScaleClipRects((ImDrawData*)pself, fbScale);
			}
		}
		public static ImFontConfigPtr ImFontConfig()
		{
			ImFontConfigPtr ret = ImGuiNative.ImFontConfig();
			return ret;
		}
		public static ImFontGlyphRangesBuilderPtr ImFontGlyphRangesBuilder()
		{
			ImFontGlyphRangesBuilderPtr ret = ImGuiNative.ImFontGlyphRangesBuilder();
			return ret;
		}
		public static bool GetBit(this ImFontGlyphRangesBuilderPtr self, nuint n)
		{
			byte ret = ImGuiNative.GetBit(self, n);
			return ret != 0;
		}
		public static bool GetBit(this scoped in ImFontGlyphRangesBuilder self, nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte ret = ImGuiNative.GetBit((ImFontGlyphRangesBuilder*)pself, n);
				return ret != 0;
			}
		}
		public static void SetBit(this ImFontGlyphRangesBuilderPtr self, nuint n)
		{
			ImGuiNative.SetBit(self, n);
		}
		public static void SetBit(this ref ImFontGlyphRangesBuilder self, nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.SetBit((ImFontGlyphRangesBuilder*)pself, n);
			}
		}
		public static void AddChar(this ImFontGlyphRangesBuilderPtr self, ushort c)
		{
			ImGuiNative.AddChar(self, c);
		}
		public static void AddChar(this ref ImFontGlyphRangesBuilder self, ushort c)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.AddChar((ImFontGlyphRangesBuilder*)pself, c);
			}
		}
		public static void AddRanges(this ImFontGlyphRangesBuilderPtr self, ushort* ranges)
		{
			ImGuiNative.AddRanges(self, ranges);
		}
		public static void AddRanges(this ref ImFontGlyphRangesBuilder self, ushort* ranges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.AddRanges((ImFontGlyphRangesBuilder*)pself, ranges);
			}
		}
		public static void BuildRanges(this ImFontGlyphRangesBuilderPtr self, ImVector<ushort>* outRanges)
		{
			ImGuiNative.BuildRanges(self, outRanges);
		}
		public static void BuildRanges(this ref ImFontGlyphRangesBuilder self, ImVector<ushort>* outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ImGuiNative.BuildRanges((ImFontGlyphRangesBuilder*)pself, outRanges);
			}
		}
		public static void BuildRanges(this ImFontGlyphRangesBuilderPtr self, ref ImVector<ushort> outRanges)
		{
			fixed (ImVector<ushort>* poutRanges = &outRanges)
			{
				ImGuiNative.BuildRanges(self, (ImVector<ushort>*)poutRanges);
			}
		}
		public static void BuildRanges(this ref ImFontGlyphRangesBuilder self, ref ImVector<ushort> outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (ImVector<ushort>* poutRanges = &outRanges)
				{
					ImGuiNative.BuildRanges((ImFontGlyphRangesBuilder*)pself, (ImVector<ushort>*)poutRanges);
				}
			}
		}
		public static ImFontAtlasCustomRectPtr ImFontAtlasCustomRect()
		{
			ImFontAtlasCustomRectPtr ret = ImGuiNative.ImFontAtlasCustomRect();
			return ret;
		}
		public static bool IsPacked(this ImFontAtlasCustomRectPtr self)
		{
			byte ret = ImGuiNative.IsPacked(self);
			return ret != 0;
		}
		public static bool IsPacked(this ref ImFontAtlasCustomRect self)
		{
			fixed (ImFontAtlasCustomRect* pself = &self)
			{
				byte ret = ImGuiNative.IsPacked((ImFontAtlasCustomRect*)pself);
				return ret != 0;
			}
		}
		public static ImFontAtlasPtr ImFontAtlas()
		{
			ImFontAtlasPtr ret = ImGuiNative.ImFontAtlas();
			return ret;
		}
		public static ImFontPtr AddFont(this ImFontAtlasPtr self, ImFontConfigPtr fontCfg)
		{
			ImFontPtr ret = ImGuiNative.AddFont(self, fontCfg);
			return ret;
		}
		public static ImFontPtr AddFont(this ref ImFontAtlas self, ImFontConfigPtr fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFontPtr ret = ImGuiNative.AddFont((ImFontAtlas*)pself, fontCfg);
				return ret;
			}
		}
		public static ImFontPtr AddFont(this ImFontAtlasPtr self, ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFontPtr ret = ImGuiNative.AddFont(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}
		public static ImFontPtr AddFont(this ref ImFontAtlas self, ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFontPtr ret = ImGuiNative.AddFont((ImFontAtlas*)pself, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}
		public static ImFontPtr AddFontDefault(this ImFontAtlasPtr self, ImFontConfigPtr fontCfg)
		{
			ImFontPtr ret = ImGuiNative.AddFontDefault(self, fontCfg);
			return ret;
		}
		public static ImFontPtr AddFontDefault(this ImFontAtlasPtr self)
		{
			ImFontPtr ret = ImGuiNative.AddFontDefault(self, (ImFontConfig*)(default));
			return ret;
		}
		public static ImFontPtr AddFontDefault(this ref ImFontAtlas self, ImFontConfigPtr fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFontPtr ret = ImGuiNative.AddFontDefault((ImFontAtlas*)pself, fontCfg);
				return ret;
			}
		}
		public static ImFontPtr AddFontDefault(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFontPtr ret = ImGuiNative.AddFontDefault((ImFontAtlas*)pself, (ImFontConfig*)(default));
				return ret;
			}
		}
		public static ImFontPtr AddFontDefault(this ImFontAtlasPtr self, ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFontPtr ret = ImGuiNative.AddFontDefault(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}
		public static ImFontPtr AddFontDefault(this ref ImFontAtlas self, ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFontPtr ret = ImGuiNative.AddFontDefault((ImFontAtlas*)pself, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}
		public static void ClearInputData(this ImFontAtlasPtr self)
		{
			ImGuiNative.ClearInputData(self);
		}
		public static void ClearInputData(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.ClearInputData((ImFontAtlas*)pself);
			}
		}
		public static void ClearTexData(this ImFontAtlasPtr self)
		{
			ImGuiNative.ClearTexData(self);
		}
		public static void ClearTexData(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.ClearTexData((ImFontAtlas*)pself);
			}
		}
		public static void ClearFonts(this ImFontAtlasPtr self)
		{
			ImGuiNative.ClearFonts(self);
		}
		public static void ClearFonts(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.ClearFonts((ImFontAtlas*)pself);
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, outHeight, outBytesPerPixel);
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight)
		{
			ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, outHeight, (int*)(default));
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight)
		{
			fixed (int* poutHeight = &outHeight)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutBytesPerPixel = &outBytesPerPixel)
			{
				ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsAlpha8(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsAlpha8(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGuiNative.GetTexDataAsAlpha8((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, outHeight, outBytesPerPixel);
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight)
		{
			ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, outHeight, (int*)(default));
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight)
		{
			fixed (int* poutHeight = &outHeight)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)(default));
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutBytesPerPixel = &outBytesPerPixel)
			{
				ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, int* outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, int* outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, byte** outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this ImFontAtlasPtr self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGuiNative.GetTexDataAsRGBA32(self, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}
		public static void GetTexDataAsRGBA32(this scoped in ImFontAtlas self, int textureIndex, ref byte* outPixels, ref int outWidth, ref int outHeight, ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGuiNative.GetTexDataAsRGBA32((ImFontAtlas*)pself, textureIndex, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}
		public static bool IsBuilt(this ImFontAtlasPtr self)
		{
			byte ret = ImGuiNative.IsBuilt(self);
			return ret != 0;
		}
		public static bool IsBuilt(this ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte ret = ImGuiNative.IsBuilt((ImFontAtlas*)pself);
				return ret != 0;
			}
		}
		public static void SetTexID(this ImFontAtlasPtr self, int textureIndex, ImTextureID id)
		{
			ImGuiNative.SetTexID(self, textureIndex, id);
		}
		public static void SetTexID(this ref ImFontAtlas self, int textureIndex, ImTextureID id)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.SetTexID((ImFontAtlas*)pself, textureIndex, id);
			}
		}
		public static void ClearTexID(this ImFontAtlasPtr self, ImTextureID nullId)
		{
			ImGuiNative.ClearTexID(self, nullId);
		}
		public static void ClearTexID(this ref ImFontAtlas self, ImTextureID nullId)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.ClearTexID((ImFontAtlas*)pself, nullId);
			}
		}
		public static ushort* GetGlyphRangesDefault(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesDefault(self);
			return ret;
		}
		public static ushort* GetGlyphRangesDefault(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesDefault((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesKorean(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesKorean(self);
			return ret;
		}
		public static ushort* GetGlyphRangesKorean(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesKorean((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesJapanese(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesJapanese(self);
			return ret;
		}
		public static ushort* GetGlyphRangesJapanese(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesJapanese((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesChineseFull(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesChineseFull(self);
			return ret;
		}
		public static ushort* GetGlyphRangesChineseFull(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesChineseFull((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesChineseSimplifiedCommon(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesChineseSimplifiedCommon(self);
			return ret;
		}
		public static ushort* GetGlyphRangesChineseSimplifiedCommon(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesChineseSimplifiedCommon((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesCyrillic(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesCyrillic(self);
			return ret;
		}
		public static ushort* GetGlyphRangesCyrillic(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesCyrillic((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesThai(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesThai(self);
			return ret;
		}
		public static ushort* GetGlyphRangesThai(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesThai((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static ushort* GetGlyphRangesVietnamese(this ImFontAtlasPtr self)
		{
			ushort* ret = ImGuiNative.GetGlyphRangesVietnamese(self);
			return ret;
		}
		public static ushort* GetGlyphRangesVietnamese(this scoped in ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ushort* ret = ImGuiNative.GetGlyphRangesVietnamese((ImFontAtlas*)pself);
				return ret;
			}
		}
		public static int AddCustomRectRegular(this ImFontAtlasPtr self, int width, int height)
		{
			int ret = ImGuiNative.AddCustomRectRegular(self, width, height);
			return ret;
		}
		public static int AddCustomRectRegular(this ref ImFontAtlas self, int width, int height)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = ImGuiNative.AddCustomRectRegular((ImFontAtlas*)pself, width, height);
				return ret;
			}
		}
		public static int AddCustomRectFontGlyph(this ImFontAtlasPtr self, ImFontPtr font, ushort id, int width, int height, float advanceX, Vector2 offset)
		{
			int ret = ImGuiNative.AddCustomRectFontGlyph(self, font, id, width, height, advanceX, offset);
			return ret;
		}
		public static int AddCustomRectFontGlyph(this ImFontAtlasPtr self, ImFontPtr font, ushort id, int width, int height, float advanceX)
		{
			int ret = ImGuiNative.AddCustomRectFontGlyph(self, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
			return ret;
		}
		public static int AddCustomRectFontGlyph(this ref ImFontAtlas self, ImFontPtr font, ushort id, int width, int height, float advanceX, Vector2 offset)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = ImGuiNative.AddCustomRectFontGlyph((ImFontAtlas*)pself, font, id, width, height, advanceX, offset);
				return ret;
			}
		}
		public static int AddCustomRectFontGlyph(this ref ImFontAtlas self, ImFontPtr font, ushort id, int width, int height, float advanceX)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = ImGuiNative.AddCustomRectFontGlyph((ImFontAtlas*)pself, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}
		public static int AddCustomRectFontGlyph(this ImFontAtlasPtr self, ref ImFont font, ushort id, int width, int height, float advanceX, Vector2 offset)
		{
			fixed (ImFont* pfont = &font)
			{
				int ret = ImGuiNative.AddCustomRectFontGlyph(self, (ImFont*)pfont, id, width, height, advanceX, offset);
				return ret;
			}
		}
		public static int AddCustomRectFontGlyph(this ImFontAtlasPtr self, ref ImFont font, ushort id, int width, int height, float advanceX)
		{
			fixed (ImFont* pfont = &font)
			{
				int ret = ImGuiNative.AddCustomRectFontGlyph(self, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}
		public static int AddCustomRectFontGlyph(this ref ImFontAtlas self, ref ImFont font, ushort id, int width, int height, float advanceX, Vector2 offset)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGuiNative.AddCustomRectFontGlyph((ImFontAtlas*)pself, (ImFont*)pfont, id, width, height, advanceX, offset);
					return ret;
				}
			}
		}
		public static int AddCustomRectFontGlyph(this ref ImFontAtlas self, ref ImFont font, ushort id, int width, int height, float advanceX)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGuiNative.AddCustomRectFontGlyph((ImFontAtlas*)pself, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
					return ret;
				}
			}
		}
		public static ImFontAtlasCustomRectPtr GetCustomRectByIndex(this ImFontAtlasPtr self, int index)
		{
			ImFontAtlasCustomRectPtr ret = ImGuiNative.GetCustomRectByIndex(self, index);
			return ret;
		}
		public static ImFontAtlasCustomRectPtr GetCustomRectByIndex(this scoped in ImFontAtlas self, int index)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFontAtlasCustomRectPtr ret = ImGuiNative.GetCustomRectByIndex((ImFontAtlas*)pself, index);
				return ret;
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ImFontAtlasCustomRectPtr rect, Vector2* outUvMin, Vector2* outUvMax)
		{
			ImGuiNative.CalcCustomRectUV(self, rect, outUvMin, outUvMax);
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ImFontAtlasCustomRectPtr rect, Vector2* outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, rect, outUvMin, outUvMax);
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ref ImFontAtlasCustomRect rect, Vector2* outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlasCustomRect* prect = &rect)
			{
				ImGuiNative.CalcCustomRectUV(self, (ImFontAtlasCustomRect*)prect, outUvMin, outUvMax);
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ref ImFontAtlasCustomRect rect, Vector2* outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, (ImFontAtlasCustomRect*)prect, outUvMin, outUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ImFontAtlasCustomRectPtr rect, ref Vector2 outUvMin, Vector2* outUvMax)
		{
			fixed (Vector2* poutUvMin = &outUvMin)
			{
				ImGuiNative.CalcCustomRectUV(self, rect, (Vector2*)poutUvMin, outUvMax);
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ImFontAtlasCustomRectPtr rect, ref Vector2 outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, rect, (Vector2*)poutUvMin, outUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ref ImFontAtlasCustomRect rect, ref Vector2 outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlasCustomRect* prect = &rect)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					ImGuiNative.CalcCustomRectUV(self, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, outUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ref ImFontAtlasCustomRect rect, ref Vector2 outUvMin, Vector2* outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, outUvMax);
					}
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ImFontAtlasCustomRectPtr rect, Vector2* outUvMin, ref Vector2 outUvMax)
		{
			fixed (Vector2* poutUvMax = &outUvMax)
			{
				ImGuiNative.CalcCustomRectUV(self, rect, outUvMin, (Vector2*)poutUvMax);
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ImFontAtlasCustomRectPtr rect, Vector2* outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, rect, outUvMin, (Vector2*)poutUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ref ImFontAtlasCustomRect rect, Vector2* outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlasCustomRect* prect = &rect)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGuiNative.CalcCustomRectUV(self, (ImFontAtlasCustomRect*)prect, outUvMin, (Vector2*)poutUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ref ImFontAtlasCustomRect rect, Vector2* outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, (ImFontAtlasCustomRect*)prect, outUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ImFontAtlasCustomRectPtr rect, ref Vector2 outUvMin, ref Vector2 outUvMax)
		{
			fixed (Vector2* poutUvMin = &outUvMin)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGuiNative.CalcCustomRectUV(self, rect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
				}
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ImFontAtlasCustomRectPtr rect, ref Vector2 outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, rect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}
		public static void CalcCustomRectUV(this ImFontAtlasPtr self, ref ImFontAtlasCustomRect rect, ref Vector2 outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlasCustomRect* prect = &rect)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGuiNative.CalcCustomRectUV(self, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}
		public static void CalcCustomRectUV(this ref ImFontAtlas self, ref ImFontAtlasCustomRect rect, ref Vector2 outUvMin, ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						fixed (Vector2* poutUvMax = &outUvMax)
						{
							ImGuiNative.CalcCustomRectUV((ImFontAtlas*)pself, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, outUvFill, textureIndex);
			return ret != 0;
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, outUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvBorder = &outUvBorder)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvBorder = outUvBorder)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvFill = &outUvFill)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvFill = outUvFill)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvBorder = &outUvBorder)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutUvBorder = outUvBorder)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (Vector2* poutUvFill = &outUvFill)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, int* textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							fixed (Vector2* poutUvFill = outUvFill)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, textureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (int* ptextureIndex = &textureIndex)
			{
				byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, outUvFill, (int*)ptextureIndex);
				return ret != 0;
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, outUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvBorder = &outUvBorder)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvBorder = outUvBorder)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, Vector2* outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvFill = &outUvFill)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvFill = outUvFill)
			{
				fixed (int* ptextureIndex = &textureIndex)
				{
					byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
					return ret != 0;
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, Vector2* outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvBorder = &outUvBorder)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutUvBorder = outUvBorder)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					fixed (int* ptextureIndex = &textureIndex)
					{
						byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
						return ret != 0;
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, Vector2* outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutSize = &outSize)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						fixed (int* ptextureIndex = &textureIndex)
						{
							byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
							return ret != 0;
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, Vector2* outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this ImFontAtlasPtr self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (Vector2* poutOffset = &outOffset)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							fixed (int* ptextureIndex = &textureIndex)
							{
								byte ret = ImGuiNative.GetMouseCursorTexData(self, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
								return ret != 0;
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ref Vector2 outUvBorder, ref Vector2 outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (Vector2* poutUvFill = &outUvFill)
							{
								fixed (int* ptextureIndex = &textureIndex)
								{
									byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}
		public static bool GetMouseCursorTexData(this scoped in ImFontAtlas self, ImGuiMouseCursor cursor, ref Vector2 outOffset, ref Vector2 outSize, ReadOnlySpan<Vector2> outUvBorder, ReadOnlySpan<Vector2> outUvFill, ref int textureIndex)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							fixed (Vector2* poutUvFill = outUvFill)
							{
								fixed (int* ptextureIndex = &textureIndex)
								{
									byte ret = ImGuiNative.GetMouseCursorTexData((ImFontAtlas*)pself, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill, (int*)ptextureIndex);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}
		public static ImFontPtr ImFont()
		{
			ImFontPtr ret = ImGuiNative.ImFont();
			return ret;
		}
		public static ImFontGlyphPtr FindGlyph(this ImFontPtr self, ushort c)
		{
			ImFontGlyphPtr ret = ImGuiNative.FindGlyph(self, c);
			return ret;
		}
		public static ImFontGlyphPtr FindGlyph(this ref ImFont self, ushort c)
		{
			fixed (ImFont* pself = &self)
			{
				ImFontGlyphPtr ret = ImGuiNative.FindGlyph((ImFont*)pself, c);
				return ret;
			}
		}
		public static ImFontGlyphPtr FindGlyphNoFallback(this ImFontPtr self, ushort c)
		{
			ImFontGlyphPtr ret = ImGuiNative.FindGlyphNoFallback(self, c);
			return ret;
		}
		public static ImFontGlyphPtr FindGlyphNoFallback(this ref ImFont self, ushort c)
		{
			fixed (ImFont* pself = &self)
			{
				ImFontGlyphPtr ret = ImGuiNative.FindGlyphNoFallback((ImFont*)pself, c);
				return ret;
			}
		}
		public static float GetDistanceAdjustmentForPair(this ImFontPtr self, ushort leftC, ushort rightC)
		{
			float ret = ImGuiNative.GetDistanceAdjustmentForPair(self, leftC, rightC);
			return ret;
		}
		public static float GetDistanceAdjustmentForPair(this scoped in ImFont self, ushort leftC, ushort rightC)
		{
			fixed (ImFont* pself = &self)
			{
				float ret = ImGuiNative.GetDistanceAdjustmentForPair((ImFont*)pself, leftC, rightC);
				return ret;
			}
		}
		public static float GetCharAdvance(this ImFontPtr self, ushort c)
		{
			float ret = ImGuiNative.GetCharAdvance(self, c);
			return ret;
		}
		public static float GetCharAdvance(this scoped in ImFont self, ushort c)
		{
			fixed (ImFont* pself = &self)
			{
				float ret = ImGuiNative.GetCharAdvance((ImFont*)pself, c);
				return ret;
			}
		}
		public static bool IsLoaded(this ImFontPtr self)
		{
			byte ret = ImGuiNative.IsLoaded(self);
			return ret != 0;
		}
		public static bool IsLoaded(this ref ImFont self)
		{
			fixed (ImFont* pself = &self)
			{
				byte ret = ImGuiNative.IsLoaded((ImFont*)pself);
				return ret != 0;
			}
		}
		public static void RenderChar(this ImFontPtr self, ImDrawListPtr drawList, float size, Vector2 pos, uint col, ushort c)
		{
			ImGuiNative.RenderChar(self, drawList, size, pos, col, c);
		}
		public static void RenderChar(this ref ImFont self, ImDrawListPtr drawList, float size, Vector2 pos, uint col, ushort c)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.RenderChar((ImFont*)pself, drawList, size, pos, col, c);
			}
		}
		public static void RenderChar(this ImFontPtr self, ref ImDrawList drawList, float size, Vector2 pos, uint col, ushort c)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ImGuiNative.RenderChar(self, (ImDrawList*)pdrawList, size, pos, col, c);
			}
		}
		public static void RenderChar(this ref ImFont self, ref ImDrawList drawList, float size, Vector2 pos, uint col, ushort c)
		{
			fixed (ImFont* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGuiNative.RenderChar((ImFont*)pself, (ImDrawList*)pdrawList, size, pos, col, c);
				}
			}
		}
		public static void BuildLookupTable(this ImFontPtr self)
		{
			ImGuiNative.BuildLookupTable(self);
		}
		public static void BuildLookupTable(this ref ImFont self)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.BuildLookupTable((ImFont*)pself);
			}
		}
		public static void ClearOutputData(this ImFontPtr self)
		{
			ImGuiNative.ClearOutputData(self);
		}
		public static void ClearOutputData(this ref ImFont self)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.ClearOutputData((ImFont*)pself);
			}
		}
		public static void GrowIndex(this ImFontPtr self, int newSize)
		{
			ImGuiNative.GrowIndex(self, newSize);
		}
		public static void GrowIndex(this ref ImFont self, int newSize)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.GrowIndex((ImFont*)pself, newSize);
			}
		}
		public static void AddGlyph(this ImFontPtr self, ImFontConfigPtr srcCfg, ushort c, int textureIndex, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advanceX)
		{
			ImGuiNative.AddGlyph(self, srcCfg, c, textureIndex, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
		}
		public static void AddGlyph(this ref ImFont self, ImFontConfigPtr srcCfg, ushort c, int textureIndex, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advanceX)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.AddGlyph((ImFont*)pself, srcCfg, c, textureIndex, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
			}
		}
		public static void AddGlyph(this ImFontPtr self, ref ImFontConfig srcCfg, ushort c, int textureIndex, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advanceX)
		{
			fixed (ImFontConfig* psrcCfg = &srcCfg)
			{
				ImGuiNative.AddGlyph(self, (ImFontConfig*)psrcCfg, c, textureIndex, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
			}
		}
		public static void AddGlyph(this ref ImFont self, ref ImFontConfig srcCfg, ushort c, int textureIndex, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advanceX)
		{
			fixed (ImFont* pself = &self)
			{
				fixed (ImFontConfig* psrcCfg = &srcCfg)
				{
					ImGuiNative.AddGlyph((ImFont*)pself, (ImFontConfig*)psrcCfg, c, textureIndex, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
				}
			}
		}
		public static void AddRemapChar(this ImFontPtr self, ushort dst, ushort src, bool overwriteDst)
		{
			ImGuiNative.AddRemapChar(self, dst, src, overwriteDst ? (byte)1 : (byte)0);
		}
		public static void AddRemapChar(this ImFontPtr self, ushort dst, ushort src)
		{
			ImGuiNative.AddRemapChar(self, dst, src, (byte)(1));
		}
		public static void AddRemapChar(this ref ImFont self, ushort dst, ushort src, bool overwriteDst)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.AddRemapChar((ImFont*)pself, dst, src, overwriteDst ? (byte)1 : (byte)0);
			}
		}
		public static void AddRemapChar(this ref ImFont self, ushort dst, ushort src)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.AddRemapChar((ImFont*)pself, dst, src, (byte)(1));
			}
		}
		public static void SetGlyphVisible(this ImFontPtr self, ushort c, bool visible)
		{
			ImGuiNative.SetGlyphVisible(self, c, visible ? (byte)1 : (byte)0);
		}
		public static void SetGlyphVisible(this ref ImFont self, ushort c, bool visible)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.SetGlyphVisible((ImFont*)pself, c, visible ? (byte)1 : (byte)0);
			}
		}
		public static bool IsGlyphRangeUnused(this ImFontPtr self, uint cBegin, uint cLast)
		{
			byte ret = ImGuiNative.IsGlyphRangeUnused(self, cBegin, cLast);
			return ret != 0;
		}
		public static bool IsGlyphRangeUnused(this ref ImFont self, uint cBegin, uint cLast)
		{
			fixed (ImFont* pself = &self)
			{
				byte ret = ImGuiNative.IsGlyphRangeUnused((ImFont*)pself, cBegin, cLast);
				return ret != 0;
			}
		}
		public static void AddKerningPair(this ImFontPtr self, ushort leftC, ushort rightC, float distanceAdjustment)
		{
			ImGuiNative.AddKerningPair(self, leftC, rightC, distanceAdjustment);
		}
		public static void AddKerningPair(this ref ImFont self, ushort leftC, ushort rightC, float distanceAdjustment)
		{
			fixed (ImFont* pself = &self)
			{
				ImGuiNative.AddKerningPair((ImFont*)pself, leftC, rightC, distanceAdjustment);
			}
		}
		public static float GetDistanceAdjustmentForPairFromHotData(this ImFontPtr self, ushort leftC, ImFontGlyphHotDataPtr rightCInfo)
		{
			float ret = ImGuiNative.GetDistanceAdjustmentForPairFromHotData(self, leftC, rightCInfo);
			return ret;
		}
		public static float GetDistanceAdjustmentForPairFromHotData(this scoped in ImFont self, ushort leftC, ImFontGlyphHotDataPtr rightCInfo)
		{
			fixed (ImFont* pself = &self)
			{
				float ret = ImGuiNative.GetDistanceAdjustmentForPairFromHotData((ImFont*)pself, leftC, rightCInfo);
				return ret;
			}
		}
		public static float GetDistanceAdjustmentForPairFromHotData(this ImFontPtr self, ushort leftC, ref ImFontGlyphHotData rightCInfo)
		{
			fixed (ImFontGlyphHotData* prightCInfo = &rightCInfo)
			{
				float ret = ImGuiNative.GetDistanceAdjustmentForPairFromHotData(self, leftC, (ImFontGlyphHotData*)prightCInfo);
				return ret;
			}
		}
		public static float GetDistanceAdjustmentForPairFromHotData(this scoped in ImFont self, ushort leftC, ref ImFontGlyphHotData rightCInfo)
		{
			fixed (ImFont* pself = &self)
			{
				fixed (ImFontGlyphHotData* prightCInfo = &rightCInfo)
				{
					float ret = ImGuiNative.GetDistanceAdjustmentForPairFromHotData((ImFont*)pself, leftC, (ImFontGlyphHotData*)prightCInfo);
					return ret;
				}
			}
		}
		public static ImGuiViewportPtr ImGuiViewport()
		{
			ImGuiViewportPtr ret = ImGuiNative.ImGuiViewport();
			return ret;
		}
		public static Vector2 GetCenter(this ImGuiViewportPtr self)
		{
			Vector2 ret;
			ImGuiNative.GetCenter(&ret, self);
			return ret;
		}
		public static void GetCenter(Vector2* pOut, ImGuiViewportPtr self)
		{
			ImGuiNative.GetCenter(pOut, self);
		}
		public static void GetCenter(ref Vector2 pOut, ImGuiViewportPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetCenter((Vector2*)ppOut, self);
			}
		}
		public static Vector2 GetCenter(this scoped in ImGuiViewport self)
		{
			fixed (ImGuiViewport* pself = &self)
			{
				Vector2 ret;
				ImGuiNative.GetCenter(&ret, (ImGuiViewport*)pself);
				return ret;
			}
		}
		public static void GetCenter(Vector2* pOut, ref ImGuiViewport self)
		{
			fixed (ImGuiViewport* pself = &self)
			{
				ImGuiNative.GetCenter(pOut, (ImGuiViewport*)pself);
			}
		}
		public static void GetCenter(ref Vector2 pOut, ref ImGuiViewport self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiViewport* pself = &self)
				{
					ImGuiNative.GetCenter((Vector2*)ppOut, (ImGuiViewport*)pself);
				}
			}
		}
		public static Vector2 GetWorkCenter(this ImGuiViewportPtr self)
		{
			Vector2 ret;
			ImGuiNative.GetWorkCenter(&ret, self);
			return ret;
		}
		public static void GetWorkCenter(Vector2* pOut, ImGuiViewportPtr self)
		{
			ImGuiNative.GetWorkCenter(pOut, self);
		}
		public static void GetWorkCenter(ref Vector2 pOut, ImGuiViewportPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImGuiNative.GetWorkCenter((Vector2*)ppOut, self);
			}
		}
		public static Vector2 GetWorkCenter(this scoped in ImGuiViewport self)
		{
			fixed (ImGuiViewport* pself = &self)
			{
				Vector2 ret;
				ImGuiNative.GetWorkCenter(&ret, (ImGuiViewport*)pself);
				return ret;
			}
		}
		public static void GetWorkCenter(Vector2* pOut, ref ImGuiViewport self)
		{
			fixed (ImGuiViewport* pself = &self)
			{
				ImGuiNative.GetWorkCenter(pOut, (ImGuiViewport*)pself);
			}
		}
		public static void GetWorkCenter(ref Vector2 pOut, ref ImGuiViewport self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiViewport* pself = &self)
				{
					ImGuiNative.GetWorkCenter((Vector2*)ppOut, (ImGuiViewport*)pself);
				}
			}
		}
		public static ImGuiPlatformIOPtr ImGuiPlatformIO()
		{
			ImGuiPlatformIOPtr ret = ImGuiNative.ImGuiPlatformIO();
			return ret;
		}
		public static ImGuiPlatformMonitorPtr ImGuiPlatformMonitor()
		{
			ImGuiPlatformMonitorPtr ret = ImGuiNative.ImGuiPlatformMonitor();
			return ret;
		}
		public static ImGuiPlatformImeDataPtr ImGuiPlatformImeData()
		{
			ImGuiPlatformImeDataPtr ret = ImGuiNative.ImGuiPlatformImeData();
			return ret;
		}
		public static int GetKeyIndex(ImGuiKey key)
		{
			int ret = ImGuiNative.GetKeyIndex(key);
			return ret;
		}
		public static float GETFLTMAX()
		{
			float ret = ImGuiNative.GETFLTMAX();
			return ret;
		}
		public static float GETFLTMIN()
		{
			float ret = ImGuiNative.GETFLTMIN();
			return ret;
		}
		public static ImVector<ushort>* ImVectorImWcharCreate()
		{
			ImVector<ushort>* ret = ImGuiNative.ImVectorImWcharCreate();
			return ret;
		}
		public static void ImVectorImWcharDestroy(ImVector<ushort>* self)
		{
			ImGuiNative.ImVectorImWcharDestroy(self);
		}
		public static void ImVectorImWcharDestroy(ref ImVector<ushort> self)
		{
			fixed (ImVector<ushort>* pself = &self)
			{
				ImGuiNative.ImVectorImWcharDestroy((ImVector<ushort>*)pself);
			}
		}
		public static void ImVectorImWcharInit(ImVector<ushort>* p)
		{
			ImGuiNative.ImVectorImWcharInit(p);
		}
		public static void ImVectorImWcharInit(ref ImVector<ushort> p)
		{
			fixed (ImVector<ushort>* pp = &p)
			{
				ImGuiNative.ImVectorImWcharInit((ImVector<ushort>*)pp);
			}
		}
		public static void ImVectorImWcharUnInit(ImVector<ushort>* p)
		{
			ImGuiNative.ImVectorImWcharUnInit(p);
		}
		public static void ImVectorImWcharUnInit(ref ImVector<ushort> p)
		{
			fixed (ImVector<ushort>* pp = &p)
			{
				ImGuiNative.ImVectorImWcharUnInit((ImVector<ushort>*)pp);
			}
		}
}
// DISCARDED: internal static ImGuiPayload* AcceptDragDropPayloadNative(byte* type, ImGuiDragDropFlags flags)
// DISCARDED: internal static ImFont* AddFontFromFileTTFNative(ImFontAtlas* self, byte* filename, float sizePixels, ImFontConfig* fontCfg, ushort* glyphRanges)
// DISCARDED: internal static ImFont* AddFontFromMemoryCompressedBase85TTFNative(ImFontAtlas* self, byte* compressedFontDatabase85, float sizePixels, ImFontConfig* fontCfg, ushort* glyphRanges)
// DISCARDED: internal static ImFont* AddFontFromMemoryCompressedTTFNative(ImFontAtlas* self, void* compressedFontData, int compressedFontSize, float sizePixels, ImFontConfig* fontCfg, ushort* glyphRanges)
// DISCARDED: internal static ImFont* AddFontFromMemoryTTFNative(ImFontAtlas* self, void* fontData, int fontSize, float sizePixels, ImFontConfig* fontCfg, ushort* glyphRanges)
// DISCARDED: internal static void AddInputCharacterNative(ImGuiIO* self, uint c)
// DISCARDED: internal static void AddInputCharactersUTF8Native(ImGuiIO* self, byte* str)
// DISCARDED: internal static void AddInputCharacterUTF16Native(ImGuiIO* self, ushort c)
// DISCARDED: internal static void AddTextNative(ImDrawList* self, Vector2 pos, uint col, byte* textBegin, byte* textEnd)
// DISCARDED: internal static void AddTextNative(ImDrawList* self, ImFont* font, float fontSize, Vector2 pos, uint col, byte* textBegin, byte* textEnd, float wrapWidth, Vector4* cpuFineClipRect)
// DISCARDED: internal static void AddTextNative(ImFontGlyphRangesBuilder* self, byte* text, byte* textEnd)
// DISCARDED: internal static void appendNative(ImGuiTextBuffer* self, byte* str, byte* strEnd)
// DISCARDED: internal static void appendfNative(ImGuiTextBuffer* buffer, byte* fmt)
// DISCARDED: internal static void appendfvNative(ImGuiTextBuffer* self, byte* fmt, nuint args)
// DISCARDED: internal static byte ArrowButtonNative(byte* strId, ImGuiDir dir)
// DISCARDED: internal static byte* beginNative(ImGuiTextBuffer* self)
// DISCARDED: internal static byte BeginNative(byte* name, bool* pOpen, ImGuiWindowFlags flags)
// DISCARDED: internal static void BeginNative(ImGuiListClipper* self, int itemsCount, float itemsHeight)
// DISCARDED: internal static byte BeginChildNative(byte* strId, Vector2 size, byte border, ImGuiWindowFlags flags)
// DISCARDED: internal static byte BeginChildNative(uint id, Vector2 size, byte border, ImGuiWindowFlags flags)
// DISCARDED: internal static byte BeginComboNative(byte* label, byte* previewValue, ImGuiComboFlags flags)
// DISCARDED: internal static byte BeginListBoxNative(byte* label, Vector2 size)
// DISCARDED: internal static byte BeginMenuNative(byte* label, byte enabled)
// DISCARDED: internal static byte BeginPopupNative(byte* strId, ImGuiWindowFlags flags)
// DISCARDED: internal static byte BeginPopupContextItemNative(byte* strId, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static byte BeginPopupContextVoidNative(byte* strId, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static byte BeginPopupContextWindowNative(byte* strId, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static byte BeginPopupModalNative(byte* name, bool* pOpen, ImGuiWindowFlags flags)
// DISCARDED: beginS
// DISCARDED: internal static byte BeginTabBarNative(byte* strId, ImGuiTabBarFlags flags)
// DISCARDED: internal static byte BeginTabItemNative(byte* label, bool* pOpen, ImGuiTabItemFlags flags)
// DISCARDED: internal static byte BeginTableNative(byte* strId, int column, ImGuiTableFlags flags, Vector2 outerSize, float innerWidth)
// DISCARDED: internal static void BulletTextNative(byte* fmt)
// DISCARDED: internal static void BulletTextVNative(byte* fmt, nuint args)
// DISCARDED: internal static byte ButtonNative(byte* label, Vector2 size)
// DISCARDED: internal static byte* c_strNative(ImGuiTextBuffer* self)
// DISCARDED: c_strS
// DISCARDED: internal static void CalcTextSizeNative(Vector2* pOut, byte* text, byte* textEnd, byte hideTextAfterDoubleHash, float wrapWidth)
// DISCARDED: internal static void CalcTextSizeANative(Vector2* pOut, ImFont* self, float size, float maxWidth, float wrapWidth, byte* textBegin, byte* textEnd, byte** remaining)
// DISCARDED: internal static byte* CalcWordWrapPositionANative(ImFont* self, float scale, byte* text, byte* textEnd, float wrapWidth)
// DISCARDED: CalcWordWrapPositionAS
// DISCARDED: internal static byte CheckboxNative(byte* label, bool* v)
// DISCARDED: internal static byte CheckboxFlagsNative(byte* label, int* flags, int flagsValue)
// DISCARDED: internal static byte CheckboxFlagsNative(byte* label, uint* flags, uint flagsValue)
// DISCARDED: internal static byte CollapsingHeaderNative(byte* label, ImGuiTreeNodeFlags flags)
// DISCARDED: internal static byte CollapsingHeaderNative(byte* label, bool* pVisible, ImGuiTreeNodeFlags flags)
// DISCARDED: internal static byte ColorButtonNative(byte* descId, Vector4 col, ImGuiColorEditFlags flags, Vector2 size)
// DISCARDED: internal static byte ColorEdit3Native(byte* label, float* col, ImGuiColorEditFlags flags)
// DISCARDED: internal static byte ColorEdit4Native(byte* label, float* col, ImGuiColorEditFlags flags)
// DISCARDED: internal static byte ColorPicker3Native(byte* label, float* col, ImGuiColorEditFlags flags)
// DISCARDED: internal static byte ColorPicker4Native(byte* label, float* col, ImGuiColorEditFlags flags, float* refCol)
// DISCARDED: internal static void ColumnsNative(int count, byte* id, byte border)
// DISCARDED: internal static byte ComboNative(byte* label, int* currentItem, byte** items, int itemsCount, int popupMaxHeightInItems)
// DISCARDED: internal static byte ComboNative(byte* label, int* currentItem, byte* itemsSeparatedByZeros, int popupMaxHeightInItems)
// DISCARDED: internal static byte ComboNative(byte* label, int* currentItem, delegate*<byte*, int*, delegate*<void*, int, byte**, bool>, void*, int, int, bool> itemsGetter, void* data, int itemsCount, int popupMaxHeightInItems)
// DISCARDED: internal static byte DebugCheckVersionAndDataLayoutNative(byte* versionStr, nuint szIo, nuint szStyle, nuint szvec2, nuint szvec4, nuint szDrawvert, nuint szDrawidx)
// DISCARDED: internal static void DebugTextEncodingNative(byte* text)
// DISCARDED: internal static byte DragFloatNative(byte* label, float* v, float vSpeed, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragFloat2Native(byte* label, float* v, float vSpeed, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragFloat3Native(byte* label, float* v, float vSpeed, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragFloat4Native(byte* label, float* v, float vSpeed, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragFloatRange2Native(byte* label, float* vCurrentMin, float* vCurrentMax, float vSpeed, float vMin, float vMax, byte* format, byte* formatMax, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragIntNative(byte* label, int* v, float vSpeed, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragInt2Native(byte* label, int* v, float vSpeed, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragInt3Native(byte* label, int* v, float vSpeed, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragInt4Native(byte* label, int* v, float vSpeed, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragIntRange2Native(byte* label, int* vCurrentMin, int* vCurrentMax, float vSpeed, int vMin, int vMax, byte* format, byte* formatMax, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragScalarNative(byte* label, ImGuiDataType dataType, void* pData, float vSpeed, void* pMin, void* pMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DragScalarNNative(byte* label, ImGuiDataType dataType, void* pData, int components, float vSpeed, void* pMin, void* pMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte DrawNative(ImGuiTextFilter* self, byte* label, float width)
// DISCARDED: internal static byte* endNative(ImGuiTextBuffer* self)
// DISCARDED: endS
// DISCARDED: internal static bool* GetBoolRefNative(ImGuiStorage* self, uint key, byte defaultVal)
// DISCARDED: internal static byte* GetClipboardTextNative()
// DISCARDED: GetClipboardTextS
// DISCARDED: internal static byte* GetDebugNameNative(ImFont* self)
// DISCARDED: GetDebugNameS
// DISCARDED: internal static float* GetFloatRefNative(ImGuiStorage* self, uint key, float defaultVal)
// DISCARDED: internal static uint GetIDNative(byte* strId)
// DISCARDED: internal static uint GetIDNative(byte* strIdBegin, byte* strIdEnd)
// DISCARDED: internal static uint GetIDNative(void* ptrId)
// DISCARDED: internal static int* GetIntRefNative(ImGuiStorage* self, uint key, int defaultVal)
// DISCARDED: internal static byte* GetKeyNameNative(ImGuiKey key)
// DISCARDED: GetKeyNameS
// DISCARDED: internal static byte* GetStyleColorNameNative(ImGuiCol idx)
// DISCARDED: GetStyleColorNameS
// DISCARDED: internal static byte* GetVersionNative()
// DISCARDED: GetVersionS
// DISCARDED: internal static void** GetVoidPtrRefNative(ImGuiStorage* self, uint key, void* defaultVal)
// DISCARDED: internal static ImGuiTextFilter* ImGuiTextFilterNative(byte* defaultFilter)
// DISCARDED: internal static ImGuiTextRange* ImGuiTextRangeNative()
// DISCARDED: internal static ImGuiTextRange* ImGuiTextRangeNative(byte* b, byte* e)
// DISCARDED: internal static byte InputDoubleNative(byte* label, double* v, double step, double stepFast, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputFloatNative(byte* label, float* v, float step, float stepFast, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputFloat2Native(byte* label, float* v, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputFloat3Native(byte* label, float* v, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputFloat4Native(byte* label, float* v, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputIntNative(byte* label, int* v, int step, int stepFast, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputInt2Native(byte* label, int* v, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputInt3Native(byte* label, int* v, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputInt4Native(byte* label, int* v, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputScalarNative(byte* label, ImGuiDataType dataType, void* pData, void* pStep, void* pStepFast, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static byte InputScalarNNative(byte* label, ImGuiDataType dataType, void* pData, int components, void* pStep, void* pStepFast, byte* format, ImGuiInputTextFlags flags)
// DISCARDED: internal static void InsertCharsNative(ImGuiInputTextCallbackData* self, int pos, byte* text, byte* textEnd)
// DISCARDED: internal static byte InvisibleButtonNative(byte* strId, Vector2 size, ImGuiButtonFlags flags)
// DISCARDED: internal static byte IsDataTypeNative(ImGuiPayload* self, byte* type)
// DISCARDED: internal static byte IsPopupOpenNative(byte* strId, ImGuiPopupFlags flags)
// DISCARDED: internal static void LabelTextNative(byte* label, byte* fmt)
// DISCARDED: internal static void LabelTextVNative(byte* label, byte* fmt, nuint args)
// DISCARDED: internal static byte ListBoxNative(byte* label, int* currentItem, byte** items, int itemsCount, int heightInItems)
// DISCARDED: internal static byte ListBoxNative(byte* label, int* currentItem, delegate*<byte*, int*, delegate*<void*, int, byte**, bool>, void*, int, int, bool> itemsGetter, void* data, int itemsCount, int heightInItems)
// DISCARDED: internal static void LoadIniSettingsFromDiskNative(byte* iniFilename)
// DISCARDED: internal static void LoadIniSettingsFromMemoryNative(byte* iniData, nuint iniSize)
// DISCARDED: internal static void LogTextNative(byte* fmt)
// DISCARDED: internal static void LogTextVNative(byte* fmt, nuint args)
// DISCARDED: internal static void LogToFileNative(int autoOpenDepth, byte* filename)
// DISCARDED: internal static byte MenuItemNative(byte* label, byte* shortcut, byte selected, byte enabled)
// DISCARDED: internal static byte MenuItemNative(byte* label, byte* shortcut, bool* pSelected, byte enabled)
// DISCARDED: internal static void OpenPopupNative(byte* strId, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static void OpenPopupNative(uint id, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static void OpenPopupOnItemClickNative(byte* strId, ImGuiPopupFlags popupFlags)
// DISCARDED: internal static byte PassFilterNative(ImGuiTextFilter* self, byte* text, byte* textEnd)
// DISCARDED: internal static void PlotHistogramNative(byte* label, float* values, int valuesCount, int valuesOffset, byte* overlayText, float scaleMin, float scaleMax, Vector2 graphSize, int stride)
// DISCARDED: internal static void PlotHistogramNative(byte* label, delegate*<byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, byte* overlayText, float scaleMin, float scaleMax, Vector2 graphSize)
// DISCARDED: internal static void PlotLinesNative(byte* label, float* values, int valuesCount, int valuesOffset, byte* overlayText, float scaleMin, float scaleMax, Vector2 graphSize, int stride)
// DISCARDED: internal static void PlotLinesNative(byte* label, delegate*<byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, byte* overlayText, float scaleMin, float scaleMax, Vector2 graphSize)
// DISCARDED: internal static void ProgressBarNative(float fraction, Vector2 sizeArg, byte* overlay)
// DISCARDED: internal static void PushIDNative(byte* strId)
// DISCARDED: internal static void PushIDNative(byte* strIdBegin, byte* strIdEnd)
// DISCARDED: internal static void PushIDNative(void* ptrId)
// DISCARDED: internal static void PushIDNative(int intId)
// DISCARDED: internal static byte RadioButtonNative(byte* label, byte active)
// DISCARDED: internal static byte RadioButtonNative(byte* label, int* v, int vButton)
// DISCARDED: internal static void RenderTextNative(ImFont* self, ImDrawList* drawList, float size, Vector2 pos, uint col, Vector4 clipRect, byte* textBegin, byte* textEnd, float wrapWidth, byte cpuFineClip)
// DISCARDED: internal static void SaveIniSettingsToDiskNative(byte* iniFilename)
// DISCARDED: internal static byte* SaveIniSettingsToMemoryNative(nuint* outIniSize)
// DISCARDED: SaveIniSettingsToMemoryS
// DISCARDED: internal static byte SelectableNative(byte* label, byte selected, ImGuiSelectableFlags flags, Vector2 size)
// DISCARDED: internal static byte SelectableNative(byte* label, bool* pSelected, ImGuiSelectableFlags flags, Vector2 size)
// DISCARDED: internal static void SetClipboardTextNative(byte* text)
// DISCARDED: internal static byte SetDragDropPayloadNative(byte* type, void* data, nuint sz, ImGuiCond cond)
// DISCARDED: internal static void SetTabItemClosedNative(byte* tabOrDockedWindowLabel)
// DISCARDED: internal static void SetTooltipNative(byte* fmt)
// DISCARDED: internal static void SetTooltipVNative(byte* fmt, nuint args)
// DISCARDED: internal static void SetWindowCollapsedNative(byte collapsed, ImGuiCond cond)
// DISCARDED: internal static void SetWindowCollapsedNative(byte* name, byte collapsed, ImGuiCond cond)
// DISCARDED: internal static void SetWindowFocusNative()
// DISCARDED: internal static void SetWindowFocusNative(byte* name)
// DISCARDED: internal static void SetWindowPosNative(Vector2 pos, ImGuiCond cond)
// DISCARDED: internal static void SetWindowPosNative(byte* name, Vector2 pos, ImGuiCond cond)
// DISCARDED: internal static void SetWindowSizeNative(Vector2 size, ImGuiCond cond)
// DISCARDED: internal static void SetWindowSizeNative(byte* name, Vector2 size, ImGuiCond cond)
// DISCARDED: internal static void ShowFontSelectorNative(byte* label)
// DISCARDED: internal static byte ShowStyleSelectorNative(byte* label)
// DISCARDED: internal static byte SliderAngleNative(byte* label, float* vRad, float vDegreesMin, float vDegreesMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderFloatNative(byte* label, float* v, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderFloat2Native(byte* label, float* v, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderFloat3Native(byte* label, float* v, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderFloat4Native(byte* label, float* v, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderIntNative(byte* label, int* v, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderInt2Native(byte* label, int* v, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderInt3Native(byte* label, int* v, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderInt4Native(byte* label, int* v, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderScalarNative(byte* label, ImGuiDataType dataType, void* pData, void* pMin, void* pMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SliderScalarNNative(byte* label, ImGuiDataType dataType, void* pData, int components, void* pMin, void* pMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte SmallButtonNative(byte* label)
// DISCARDED: internal static byte TabItemButtonNative(byte* label, ImGuiTabItemFlags flags)
// DISCARDED: internal static byte* TableGetColumnNameNative(int columnN)
// DISCARDED: TableGetColumnNameS
// DISCARDED: internal static void TableHeaderNative(byte* label)
// DISCARDED: internal static void TableSetupColumnNative(byte* label, ImGuiTableColumnFlags flags, float initWidthOrWeight, uint userId)
// DISCARDED: internal static void TextNative(byte* fmt)
// DISCARDED: internal static void TextColoredNative(Vector4 col, byte* fmt)
// DISCARDED: internal static void TextColoredVNative(Vector4 col, byte* fmt, nuint args)
// DISCARDED: internal static void TextDisabledNative(byte* fmt)
// DISCARDED: internal static void TextDisabledVNative(byte* fmt, nuint args)
// DISCARDED: internal static void TextUnformattedNative(byte* text, byte* textEnd)
// DISCARDED: internal static void TextVNative(byte* fmt, nuint args)
// DISCARDED: internal static void TextWrappedNative(byte* fmt)
// DISCARDED: internal static void TextWrappedVNative(byte* fmt, nuint args)
// DISCARDED: internal static byte TreeNodeNative(byte* label)
// DISCARDED: internal static byte TreeNodeNative(byte* strId, byte* fmt)
// DISCARDED: internal static byte TreeNodeNative(void* ptrId, byte* fmt)
// DISCARDED: internal static byte TreeNodeExNative(byte* label, ImGuiTreeNodeFlags flags)
// DISCARDED: internal static byte TreeNodeExNative(byte* strId, ImGuiTreeNodeFlags flags, byte* fmt)
// DISCARDED: internal static byte TreeNodeExNative(void* ptrId, ImGuiTreeNodeFlags flags, byte* fmt)
// DISCARDED: internal static byte TreeNodeExVNative(byte* strId, ImGuiTreeNodeFlags flags, byte* fmt, nuint args)
// DISCARDED: internal static byte TreeNodeExVNative(void* ptrId, ImGuiTreeNodeFlags flags, byte* fmt, nuint args)
// DISCARDED: internal static byte TreeNodeVNative(byte* strId, byte* fmt, nuint args)
// DISCARDED: internal static byte TreeNodeVNative(void* ptrId, byte* fmt, nuint args)
// DISCARDED: internal static void TreePushNative(byte* strId)
// DISCARDED: internal static void TreePushNative(void* ptrId)
// DISCARDED: internal static void ValueNative(byte* prefix, byte b)
// DISCARDED: internal static void ValueNative(byte* prefix, int v)
// DISCARDED: internal static void ValueNative(byte* prefix, uint v)
// DISCARDED: internal static void ValueNative(byte* prefix, float v, byte* floatFormat)
// DISCARDED: internal static byte VSliderFloatNative(byte* label, Vector2 size, float* v, float vMin, float vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte VSliderIntNative(byte* label, Vector2 size, int* v, int vMin, int vMax, byte* format, ImGuiSliderFlags flags)
// DISCARDED: internal static byte VSliderScalarNative(byte* label, Vector2 size, ImGuiDataType dataType, void* pData, void* pMin, void* pMax, byte* format, ImGuiSliderFlags flags)

