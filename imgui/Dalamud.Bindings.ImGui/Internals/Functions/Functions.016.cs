// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	public unsafe partial class ImGuiP
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = &label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (label != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(label);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeDrawCmdShowMeshAndBoundingBoxNative(ImDrawList* outDrawList, ImDrawList* drawList, ImDrawCmd* drawCmd, byte showMesh, byte showAabb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImDrawList*, ImDrawCmd*, byte, byte, void>)funcTable[1245])(outDrawList, drawList, drawCmd, showMesh, showAabb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, byte, byte, void>)funcTable[1245])((nint)outDrawList, (nint)drawList, (nint)drawCmd, showMesh, showAabb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (ImDrawCmd* pdrawCmd = &drawCmd)
					{
						DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontNative(ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)funcTable[1246])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1246])((nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ImFontPtr font)
		{
			DebugNodeFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontNative((ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontGlyphNative(ImFont* font, ImFontGlyph* glyph)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontGlyph*, void>)funcTable[1247])(font, glyph);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1247])((nint)font, (nint)glyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphNative((ImFont*)pfont, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					DebugNodeFontGlyphNative((ImFont*)pfont, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeStorageNative(ImGuiStorage* storage, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, byte*, void>)funcTable[1248])(storage, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1248])((nint)storage, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, byte* label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				DebugNodeStorageNative((ImGuiStorage*)pstorage, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ref byte label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, string label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeStorageNative((ImGuiStorage*)pstorage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTabBarNative(ImGuiTabBar* tabBar, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte*, void>)funcTable[1249])(tabBar, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1249])((nint)tabBar, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, byte* label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ref byte label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, string label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableNative(ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)funcTable[1250])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1250])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ImGuiTablePtr table)
		{
			DebugNodeTableNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				DebugNodeTableNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableSettingsNative(ImGuiTableSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)funcTable[1251])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1251])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ref ImGuiTableSettings settings)
		{
			fixed (ImGuiTableSettings* psettings = &settings)
			{
				DebugNodeTableSettingsNative((ImGuiTableSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeInputTextStateNative(ImGuiInputTextState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)funcTable[1252])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1252])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ImGuiInputTextStatePtr state)
		{
			DebugNodeInputTextStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ref ImGuiInputTextState state)
		{
			fixed (ImGuiInputTextState* pstate = &state)
			{
				DebugNodeInputTextStateNative((ImGuiInputTextState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowNative(ImGuiWindow* window, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte*, void>)funcTable[1253])(window, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1253])((nint)window, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeWindowNative((ImGuiWindow*)pwindow, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowNative((ImGuiWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowSettingsNative(ImGuiWindowSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, void>)funcTable[1254])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1254])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ImGuiWindowSettingsPtr settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ref ImGuiWindowSettings settings)
		{
			fixed (ImGuiWindowSettings* psettings = &settings)
			{
				DebugNodeWindowSettingsNative((ImGuiWindowSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListNative(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<ImGuiWindowPtr>*, byte*, void>)funcTable[1255])(windows, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1255])((nint)windows, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, byte* label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ref byte label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ReadOnlySpan<byte> label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, string label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListByBeginStackParentNative(ImGuiWindow** windows, int windowsSize, ImGuiWindow* parentInBeginStack)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow**, int, ImGuiWindow*, void>)funcTable[1256])(windows, windowsSize, parentInBeginStack);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[1256])((nint)windows, windowsSize, (nint)parentInBeginStack);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, parentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
				{
					DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeViewportNative(ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)funcTable[1257])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1257])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ImGuiViewportPPtr viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeViewportNative((ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugRenderViewportThumbnailNative(ImDrawList* drawList, ImGuiViewportP* viewport, ImRect bb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImGuiViewportP*, ImRect, void>)funcTable[1258])(drawList, viewport, bb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)funcTable[1258])((nint)drawList, (nint)viewport, bb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, viewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, (ImGuiViewportP*)pviewport, bb);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetypeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontBuilderIO*>)funcTable[1259])();
			#else
			return (ImFontBuilderIO*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1259])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontBuilderIOPtr ImFontAtlasGetBuilderForStbTruetype()
		{
			ImFontBuilderIOPtr ret = ImFontAtlasGetBuilderForStbTruetypeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildInitNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1260])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1260])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildInitNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildSetupFontNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* fontConfig, float ascent, float descent)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontConfig*, float, float, void>)funcTable[1261])(atlas, font, fontConfig, ascent, descent);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, float, float, void>)funcTable[1261])((nint)atlas, (nint)font, (nint)fontConfig, ascent, descent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			ImFontAtlasBuildSetupFontNative(atlas, font, fontConfig, ascent, descent);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ImFontPtr font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, fontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ref ImFont font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, fontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ref ImFont font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontConfig* pfontConfig = &fontConfig)
			{
				ImFontAtlasBuildSetupFontNative(atlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ref ImFont font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* pfontConfig = &fontConfig)
					{
						ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildPackCustomRectsNative(ImFontAtlas* atlas, ImVector<stbtt_pack_context>* packContexts)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImVector<stbtt_pack_context>*, void>)funcTable[1262])(atlas, packContexts);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1262])((nint)atlas, (nint)packContexts);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildPackCustomRects(ImFontAtlasPtr atlas, ImVector<stbtt_pack_context>* packContexts)
		{
			ImFontAtlasBuildPackCustomRectsNative(atlas, packContexts);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildPackCustomRects(ref ImFontAtlas atlas, ImVector<stbtt_pack_context>* packContexts)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildPackCustomRectsNative((ImFontAtlas*)patlas, packContexts);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildPackCustomRects(ImFontAtlasPtr atlas, ref ImVector<stbtt_pack_context> packContexts)
		{
			fixed (ImVector<stbtt_pack_context>* ppackContexts = &packContexts)
			{
				ImFontAtlasBuildPackCustomRectsNative(atlas, (ImVector<stbtt_pack_context>*)ppackContexts);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildPackCustomRects(ref ImFontAtlas atlas, ref ImVector<stbtt_pack_context> packContexts)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImVector<stbtt_pack_context>* ppackContexts = &packContexts)
				{
					ImFontAtlasBuildPackCustomRectsNative((ImFontAtlas*)patlas, (ImVector<stbtt_pack_context>*)ppackContexts);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildFinishNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1263])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1263])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildFinish(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildFinishNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildFinish(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildFinishNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildRender8bppRectFromStringNative(ImFontAtlas* atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, int, byte*, byte, byte, void>)funcTable[1264])(atlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int, nint, byte, byte, void>)funcTable[1264])((nint)atlas, textureIndex, x, y, w, h, (nint)inStr, inMarkerChar, inMarkerPixelValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			ImFontAtlasBuildRender8bppRectFromStringNative(atlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender8bppRectFromStringNative(atlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRender8bppRectFromStringNative(atlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, string inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender8bppRectFromStringNative(atlas, textureIndex, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, string inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildRender32bppRectFromStringNative(ImFontAtlas* atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, int, byte*, byte, uint, void>)funcTable[1265])(atlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int, nint, byte, uint, void>)funcTable[1265])((nint)atlas, textureIndex, x, y, w, h, (nint)inStr, inMarkerChar, inMarkerPixelValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			ImFontAtlasBuildRender32bppRectFromStringNative(atlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender32bppRectFromStringNative(atlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRender32bppRectFromStringNative(atlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int textureIndex, int x, int y, int w, int h, string inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender32bppRectFromStringNative(atlas, textureIndex, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int textureIndex, int x, int y, int w, int h, string inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, textureIndex, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildMultiplyCalcLookupTableNative(byte* outTable, float inMultiplyFactor, float gammaFactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, float, float, void>)funcTable[1266])(outTable, inMultiplyFactor, gammaFactor);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)funcTable[1266])((nint)outTable, inMultiplyFactor, gammaFactor);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyCalcLookupTable(byte* outTable, float inMultiplyFactor, float gammaFactor)
		{
			ImFontAtlasBuildMultiplyCalcLookupTableNative(outTable, inMultiplyFactor, gammaFactor);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyCalcLookupTable(ref byte outTable, float inMultiplyFactor, float gammaFactor)
		{
			fixed (byte* poutTable = &outTable)
			{
				ImFontAtlasBuildMultiplyCalcLookupTableNative((byte*)poutTable, inMultiplyFactor, gammaFactor);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyCalcLookupTable(ReadOnlySpan<byte> outTable, float inMultiplyFactor, float gammaFactor)
		{
			fixed (byte* poutTable = outTable)
			{
				ImFontAtlasBuildMultiplyCalcLookupTableNative((byte*)poutTable, inMultiplyFactor, gammaFactor);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildMultiplyRectAlpha8Native(byte* table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, int, int, int, int, int, void>)funcTable[1267])(table, pixels, x, y, w, h, stride);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, int, void>)funcTable[1267])((nint)table, (nint)pixels, x, y, w, h, stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(byte* table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			ImFontAtlasBuildMultiplyRectAlpha8Native(table, pixels, x, y, w, h, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = &table)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, pixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(ReadOnlySpan<byte> table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = table)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, pixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(byte* table, ref byte pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ppixels = &pixels)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native(table, (byte*)ppixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, ref byte pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = &table)
			{
				fixed (byte* ppixels = &pixels)
				{
					ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, (byte*)ppixels, x, y, w, h, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMultiplyRectAlpha8(ReadOnlySpan<byte> table, ref byte pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = table)
			{
				fixed (byte* ppixels = &pixels)
				{
					ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, (byte*)ppixels, x, y, w, h, stride);
				}
			}
		}

	}
}
