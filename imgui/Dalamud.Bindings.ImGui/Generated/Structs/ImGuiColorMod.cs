// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiColorMod
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCol Col;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector4 BackupValue;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiColorMod(ImGuiCol col = default, Vector4 backupValue = default)
		{
			Col = col;
			BackupValue = backupValue;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiColorModPtr : IEquatable<ImGuiColorModPtr>
	{
		public ImGuiColorModPtr(ImGuiColorMod* handle) { Handle = handle; }

		public ImGuiColorMod* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiColorModPtr Null => new ImGuiColorModPtr(null);

		public ImGuiColorMod this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiColorModPtr(ImGuiColorMod* handle) => new ImGuiColorModPtr(handle);

		public static implicit operator ImGuiColorMod*(ImGuiColorModPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiColorModPtr left, ImGuiColorModPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiColorModPtr left, ImGuiColorModPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiColorModPtr left, ImGuiColorMod* right) => left.Handle == right;

		public static bool operator !=(ImGuiColorModPtr left, ImGuiColorMod* right) => left.Handle != right;

		public bool Equals(ImGuiColorModPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiColorModPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiColorModPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiCol Col => ref Unsafe.AsRef<ImGuiCol>(&Handle->Col);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector4 BackupValue => ref Unsafe.AsRef<Vector4>(&Handle->BackupValue);
	}

}
