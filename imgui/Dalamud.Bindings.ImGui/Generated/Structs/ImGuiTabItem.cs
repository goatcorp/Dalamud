// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabItem
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTabItemFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameSelected;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Offset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ContentWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RequestedWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NameOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short BeginOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short IndexDuringLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantClose;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTabItem(uint id = default, ImGuiTabItemFlags flags = default, ImGuiWindowPtr window = default, int lastFrameVisible = default, int lastFrameSelected = default, float offset = default, float width = default, float contentWidth = default, float requestedWidth = default, int nameOffset = default, short beginOrder = default, short indexDuringLayout = default, bool wantClose = default)
		{
			ID = id;
			Flags = flags;
			Window = window;
			LastFrameVisible = lastFrameVisible;
			LastFrameSelected = lastFrameSelected;
			Offset = offset;
			Width = width;
			ContentWidth = contentWidth;
			RequestedWidth = requestedWidth;
			NameOffset = nameOffset;
			BeginOrder = beginOrder;
			IndexDuringLayout = indexDuringLayout;
			WantClose = wantClose ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiTabItem* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTabItemPtr : IEquatable<ImGuiTabItemPtr>
	{
		public ImGuiTabItemPtr(ImGuiTabItem* handle) { Handle = handle; }

		public ImGuiTabItem* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTabItemPtr Null => new ImGuiTabItemPtr(null);

		public ImGuiTabItem this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTabItemPtr(ImGuiTabItem* handle) => new ImGuiTabItemPtr(handle);

		public static implicit operator ImGuiTabItem*(ImGuiTabItemPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTabItemPtr left, ImGuiTabItemPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTabItemPtr left, ImGuiTabItemPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTabItemPtr left, ImGuiTabItem* right) => left.Handle == right;

		public static bool operator !=(ImGuiTabItemPtr left, ImGuiTabItem* right) => left.Handle != right;

		public bool Equals(ImGuiTabItemPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTabItemPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTabItemPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTabItemFlags Flags => ref Unsafe.AsRef<ImGuiTabItemFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameVisible => ref Unsafe.AsRef<int>(&Handle->LastFrameVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameSelected => ref Unsafe.AsRef<int>(&Handle->LastFrameSelected);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Offset => ref Unsafe.AsRef<float>(&Handle->Offset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Width => ref Unsafe.AsRef<float>(&Handle->Width);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ContentWidth => ref Unsafe.AsRef<float>(&Handle->ContentWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RequestedWidth => ref Unsafe.AsRef<float>(&Handle->RequestedWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NameOffset => ref Unsafe.AsRef<int>(&Handle->NameOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short BeginOrder => ref Unsafe.AsRef<short>(&Handle->BeginOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short IndexDuringLayout => ref Unsafe.AsRef<short>(&Handle->IndexDuringLayout);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantClose => ref Unsafe.AsRef<bool>(&Handle->WantClose);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
