// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyphHotData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public float AdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float OccupiedWidth;

		public uint RawBits0;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontGlyphHotData(float advanceX = default, float occupiedWidth = default, uint kerningPairUseBisect = default, uint kerningPairOffset = default, uint kerningPairCount = default)
		{
			AdvanceX = advanceX;
			OccupiedWidth = occupiedWidth;
			KerningPairUseBisect = kerningPairUseBisect;
			KerningPairOffset = kerningPairOffset;
			KerningPairCount = kerningPairCount;
		}


		public uint KerningPairUseBisect { get => Bitfield.Get(RawBits0, 0, 1); set => Bitfield.Set(ref RawBits0, value, 0, 1); }

		public uint KerningPairOffset { get => Bitfield.Get(RawBits0, 1, 19); set => Bitfield.Set(ref RawBits0, value, 1, 19); }

		public uint KerningPairCount { get => Bitfield.Get(RawBits0, 20, 12); set => Bitfield.Set(ref RawBits0, value, 20, 12); }

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontGlyphHotDataPtr : IEquatable<ImFontGlyphHotDataPtr>
	{
		public ImFontGlyphHotDataPtr(ImFontGlyphHotData* handle) { Handle = handle; }

		public ImFontGlyphHotData* Handle;

		public bool IsNull => Handle == null;

		public static ImFontGlyphHotDataPtr Null => new ImFontGlyphHotDataPtr(null);

		public ImFontGlyphHotData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontGlyphHotDataPtr(ImFontGlyphHotData* handle) => new ImFontGlyphHotDataPtr(handle);

		public static implicit operator ImFontGlyphHotData*(ImFontGlyphHotDataPtr handle) => handle.Handle;

		public static bool operator ==(ImFontGlyphHotDataPtr left, ImFontGlyphHotDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontGlyphHotDataPtr left, ImFontGlyphHotDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontGlyphHotDataPtr left, ImFontGlyphHotData* right) => left.Handle == right;

		public static bool operator !=(ImFontGlyphHotDataPtr left, ImFontGlyphHotData* right) => left.Handle != right;

		public bool Equals(ImFontGlyphHotDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontGlyphHotDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontGlyphHotDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float AdvanceX => ref Unsafe.AsRef<float>(&Handle->AdvanceX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float OccupiedWidth => ref Unsafe.AsRef<float>(&Handle->OccupiedWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint KerningPairUseBisect { get => Handle->KerningPairUseBisect; set => Handle->KerningPairUseBisect = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint KerningPairOffset { get => Handle->KerningPairOffset; set => Handle->KerningPairOffset = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint KerningPairCount { get => Handle->KerningPairCount; set => Handle->KerningPairCount = value; }
	}

}
