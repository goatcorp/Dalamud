// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawVert
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Uv;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Col;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawVert(Vector2 pos = default, Vector2 uv = default, uint col = default)
		{
			Pos = pos;
			Uv = uv;
			Col = col;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImDrawVertPtr : IEquatable<ImDrawVertPtr>
	{
		public ImDrawVertPtr(ImDrawVert* handle) { Handle = handle; }

		public ImDrawVert* Handle;

		public bool IsNull => Handle == null;

		public static ImDrawVertPtr Null => new ImDrawVertPtr(null);

		public ImDrawVert this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImDrawVertPtr(ImDrawVert* handle) => new ImDrawVertPtr(handle);

		public static implicit operator ImDrawVert*(ImDrawVertPtr handle) => handle.Handle;

		public static bool operator ==(ImDrawVertPtr left, ImDrawVertPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImDrawVertPtr left, ImDrawVertPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImDrawVertPtr left, ImDrawVert* right) => left.Handle == right;

		public static bool operator !=(ImDrawVertPtr left, ImDrawVert* right) => left.Handle != right;

		public bool Equals(ImDrawVertPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImDrawVertPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImDrawVertPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Uv => ref Unsafe.AsRef<Vector2>(&Handle->Uv);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint Col => ref Unsafe.AsRef<uint>(&Handle->Col);
	}

}
