// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* RawData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTableTempData* TempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImSpanImGuiTableColumn Columns;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImSpanImGuiTableColumnIdx DisplayOrderToIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImSpanImGuiTableCellData RowCellData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ulong EnabledMaskByDisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ulong EnabledMaskByIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ulong VisibleMaskByIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ulong RequestOutputMaskByIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableFlags SettingsLoadedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SettingsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CurrentRow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CurrentColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short InstanceCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short InstanceInteracted;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RowPosY1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RowPosY2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RowMinHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RowTextBaseline;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RowIndentOffsetX;

		public ImGuiTableRowFlags RawBits0;
		/// <summary>
		/// To be documented.
		/// </summary>
		public int RowBgColorCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint RowBgColor_0;
		public uint RowBgColor_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint BorderColorStrong;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint BorderColorLight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BorderX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BorderX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HostIndentX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MinColumnWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float OuterPaddingX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CellPaddingX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CellPaddingY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CellSpacingX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CellSpacingX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float InnerWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColumnsGivenWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColumnsAutoFitWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColumnsStretchSumWeights;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ResizedColumnNextWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ResizeLockMinContentsX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RefScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect OuterRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect InnerRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect WorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect InnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect BgClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect Bg0ClipRectForDrawCmd;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect Bg2ClipRectForDrawCmd;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect HostClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect HostBackupInnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* OuterWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* InnerWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer ColumnsNames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawListSplitter* DrawSplitter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableInstanceData InstanceDataFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTableInstanceData> InstanceDataExtra;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableColumnSortSpecs SortSpecsSingle;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableSortSpecs SortSpecs;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte SortSpecsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ColumnsEnabledCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ColumnsEnabledFixedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte DeclColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HoveredColumnBody;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HoveredColumnBorder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte AutoFitSingleColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ResizedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte LastResizedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HeldHeaderColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ReorderColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ReorderColumnDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte LeftMostEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte RightMostEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte LeftMostStretchedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte RightMostStretchedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte ContextPopupColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte FreezeRowsRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte FreezeRowsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte FreezeColumnsRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte FreezeColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte RowCellDataCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DummyDrawChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Bg2DrawChannelCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Bg2DrawChannelUnfrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsLayoutLocked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsInsideRow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsInitializing;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsSortSpecsDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsUsingHeaders;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsContextPopupOpen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsSettingsRequestLoad;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsSettingsDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsDefaultDisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsResetAllRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsResetDisplayOrderRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsUnfrozenRows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsDefaultSizingPolicy;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte MemoryCompacted;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HostSkipItems;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTable(uint id = default, ImGuiTableFlags flags = default, void* rawData = default, ImGuiTableTempData* tempData = default, ImSpanImGuiTableColumn columns = default, ImSpanImGuiTableColumnIdx displayOrderToIndex = default, ImSpanImGuiTableCellData rowCellData = default, ulong enabledMaskByDisplayOrder = default, ulong enabledMaskByIndex = default, ulong visibleMaskByIndex = default, ulong requestOutputMaskByIndex = default, ImGuiTableFlags settingsLoadedFlags = default, int settingsOffset = default, int lastFrameActive = default, int columnsCount = default, int currentRow = default, int currentColumn = default, short instanceCurrent = default, short instanceInteracted = default, float rowPosY1 = default, float rowPosY2 = default, float rowMinHeight = default, float rowTextBaseline = default, float rowIndentOffsetX = default, ImGuiTableRowFlags rowFlags = default, ImGuiTableRowFlags lastRowFlags = default, int rowBgColorCounter = default, uint* rowBgColor = default, uint borderColorStrong = default, uint borderColorLight = default, float borderX1 = default, float borderX2 = default, float hostIndentX = default, float minColumnWidth = default, float outerPaddingX = default, float cellPaddingX = default, float cellPaddingY = default, float cellSpacingX1 = default, float cellSpacingX2 = default, float innerWidth = default, float columnsGivenWidth = default, float columnsAutoFitWidth = default, float columnsStretchSumWeights = default, float resizedColumnNextWidth = default, float resizeLockMinContentsX2 = default, float refScale = default, ImRect outerRect = default, ImRect innerRect = default, ImRect workRect = default, ImRect innerClipRect = default, ImRect bgClipRect = default, ImRect bg0ClipRectForDrawCmd = default, ImRect bg2ClipRectForDrawCmd = default, ImRect hostClipRect = default, ImRect hostBackupInnerClipRect = default, ImGuiWindowPtr outerWindow = default, ImGuiWindowPtr innerWindow = default, ImGuiTextBuffer columnsNames = default, ImDrawListSplitterPtr drawSplitter = default, ImGuiTableInstanceData instanceDataFirst = default, ImVector<ImGuiTableInstanceData> instanceDataExtra = default, ImGuiTableColumnSortSpecs sortSpecsSingle = default, ImVector<ImGuiTableColumnSortSpecs> sortSpecsMulti = default, ImGuiTableSortSpecs sortSpecs = default, sbyte sortSpecsCount = default, sbyte columnsEnabledCount = default, sbyte columnsEnabledFixedCount = default, sbyte declColumnsCount = default, sbyte hoveredColumnBody = default, sbyte hoveredColumnBorder = default, sbyte autoFitSingleColumn = default, sbyte resizedColumn = default, sbyte lastResizedColumn = default, sbyte heldHeaderColumn = default, sbyte reorderColumn = default, sbyte reorderColumnDir = default, sbyte leftMostEnabledColumn = default, sbyte rightMostEnabledColumn = default, sbyte leftMostStretchedColumn = default, sbyte rightMostStretchedColumn = default, sbyte contextPopupColumn = default, sbyte freezeRowsRequest = default, sbyte freezeRowsCount = default, sbyte freezeColumnsRequest = default, sbyte freezeColumnsCount = default, sbyte rowCellDataCurrent = default, byte dummyDrawChannel = default, byte bg2DrawChannelCurrent = default, byte bg2DrawChannelUnfrozen = default, bool isLayoutLocked = default, bool isInsideRow = default, bool isInitializing = default, bool isSortSpecsDirty = default, bool isUsingHeaders = default, bool isContextPopupOpen = default, bool isSettingsRequestLoad = default, bool isSettingsDirty = default, bool isDefaultDisplayOrder = default, bool isResetAllRequest = default, bool isResetDisplayOrderRequest = default, bool isUnfrozenRows = default, bool isDefaultSizingPolicy = default, bool memoryCompacted = default, bool hostSkipItems = default)
		{
			ID = id;
			Flags = flags;
			RawData = rawData;
			TempData = tempData;
			Columns = columns;
			DisplayOrderToIndex = displayOrderToIndex;
			RowCellData = rowCellData;
			EnabledMaskByDisplayOrder = enabledMaskByDisplayOrder;
			EnabledMaskByIndex = enabledMaskByIndex;
			VisibleMaskByIndex = visibleMaskByIndex;
			RequestOutputMaskByIndex = requestOutputMaskByIndex;
			SettingsLoadedFlags = settingsLoadedFlags;
			SettingsOffset = settingsOffset;
			LastFrameActive = lastFrameActive;
			ColumnsCount = columnsCount;
			CurrentRow = currentRow;
			CurrentColumn = currentColumn;
			InstanceCurrent = instanceCurrent;
			InstanceInteracted = instanceInteracted;
			RowPosY1 = rowPosY1;
			RowPosY2 = rowPosY2;
			RowMinHeight = rowMinHeight;
			RowTextBaseline = rowTextBaseline;
			RowIndentOffsetX = rowIndentOffsetX;
			RowFlags = rowFlags;
			LastRowFlags = lastRowFlags;
			RowBgColorCounter = rowBgColorCounter;
			if (rowBgColor != default(uint*))
			{
				RowBgColor_0 = rowBgColor[0];
				RowBgColor_1 = rowBgColor[1];
			}
			BorderColorStrong = borderColorStrong;
			BorderColorLight = borderColorLight;
			BorderX1 = borderX1;
			BorderX2 = borderX2;
			HostIndentX = hostIndentX;
			MinColumnWidth = minColumnWidth;
			OuterPaddingX = outerPaddingX;
			CellPaddingX = cellPaddingX;
			CellPaddingY = cellPaddingY;
			CellSpacingX1 = cellSpacingX1;
			CellSpacingX2 = cellSpacingX2;
			InnerWidth = innerWidth;
			ColumnsGivenWidth = columnsGivenWidth;
			ColumnsAutoFitWidth = columnsAutoFitWidth;
			ColumnsStretchSumWeights = columnsStretchSumWeights;
			ResizedColumnNextWidth = resizedColumnNextWidth;
			ResizeLockMinContentsX2 = resizeLockMinContentsX2;
			RefScale = refScale;
			OuterRect = outerRect;
			InnerRect = innerRect;
			WorkRect = workRect;
			InnerClipRect = innerClipRect;
			BgClipRect = bgClipRect;
			Bg0ClipRectForDrawCmd = bg0ClipRectForDrawCmd;
			Bg2ClipRectForDrawCmd = bg2ClipRectForDrawCmd;
			HostClipRect = hostClipRect;
			HostBackupInnerClipRect = hostBackupInnerClipRect;
			OuterWindow = outerWindow;
			InnerWindow = innerWindow;
			ColumnsNames = columnsNames;
			DrawSplitter = drawSplitter;
			InstanceDataFirst = instanceDataFirst;
			InstanceDataExtra = instanceDataExtra;
			SortSpecsSingle = sortSpecsSingle;
			SortSpecsMulti = sortSpecsMulti;
			SortSpecs = sortSpecs;
			SortSpecsCount = sortSpecsCount;
			ColumnsEnabledCount = columnsEnabledCount;
			ColumnsEnabledFixedCount = columnsEnabledFixedCount;
			DeclColumnsCount = declColumnsCount;
			HoveredColumnBody = hoveredColumnBody;
			HoveredColumnBorder = hoveredColumnBorder;
			AutoFitSingleColumn = autoFitSingleColumn;
			ResizedColumn = resizedColumn;
			LastResizedColumn = lastResizedColumn;
			HeldHeaderColumn = heldHeaderColumn;
			ReorderColumn = reorderColumn;
			ReorderColumnDir = reorderColumnDir;
			LeftMostEnabledColumn = leftMostEnabledColumn;
			RightMostEnabledColumn = rightMostEnabledColumn;
			LeftMostStretchedColumn = leftMostStretchedColumn;
			RightMostStretchedColumn = rightMostStretchedColumn;
			ContextPopupColumn = contextPopupColumn;
			FreezeRowsRequest = freezeRowsRequest;
			FreezeRowsCount = freezeRowsCount;
			FreezeColumnsRequest = freezeColumnsRequest;
			FreezeColumnsCount = freezeColumnsCount;
			RowCellDataCurrent = rowCellDataCurrent;
			DummyDrawChannel = dummyDrawChannel;
			Bg2DrawChannelCurrent = bg2DrawChannelCurrent;
			Bg2DrawChannelUnfrozen = bg2DrawChannelUnfrozen;
			IsLayoutLocked = isLayoutLocked ? (byte)1 : (byte)0;
			IsInsideRow = isInsideRow ? (byte)1 : (byte)0;
			IsInitializing = isInitializing ? (byte)1 : (byte)0;
			IsSortSpecsDirty = isSortSpecsDirty ? (byte)1 : (byte)0;
			IsUsingHeaders = isUsingHeaders ? (byte)1 : (byte)0;
			IsContextPopupOpen = isContextPopupOpen ? (byte)1 : (byte)0;
			IsSettingsRequestLoad = isSettingsRequestLoad ? (byte)1 : (byte)0;
			IsSettingsDirty = isSettingsDirty ? (byte)1 : (byte)0;
			IsDefaultDisplayOrder = isDefaultDisplayOrder ? (byte)1 : (byte)0;
			IsResetAllRequest = isResetAllRequest ? (byte)1 : (byte)0;
			IsResetDisplayOrderRequest = isResetDisplayOrderRequest ? (byte)1 : (byte)0;
			IsUnfrozenRows = isUnfrozenRows ? (byte)1 : (byte)0;
			IsDefaultSizingPolicy = isDefaultSizingPolicy ? (byte)1 : (byte)0;
			MemoryCompacted = memoryCompacted ? (byte)1 : (byte)0;
			HostSkipItems = hostSkipItems ? (byte)1 : (byte)0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTable(uint id = default, ImGuiTableFlags flags = default, void* rawData = default, ImGuiTableTempData* tempData = default, ImSpanImGuiTableColumn columns = default, ImSpanImGuiTableColumnIdx displayOrderToIndex = default, ImSpanImGuiTableCellData rowCellData = default, ulong enabledMaskByDisplayOrder = default, ulong enabledMaskByIndex = default, ulong visibleMaskByIndex = default, ulong requestOutputMaskByIndex = default, ImGuiTableFlags settingsLoadedFlags = default, int settingsOffset = default, int lastFrameActive = default, int columnsCount = default, int currentRow = default, int currentColumn = default, short instanceCurrent = default, short instanceInteracted = default, float rowPosY1 = default, float rowPosY2 = default, float rowMinHeight = default, float rowTextBaseline = default, float rowIndentOffsetX = default, ImGuiTableRowFlags rowFlags = default, ImGuiTableRowFlags lastRowFlags = default, int rowBgColorCounter = default, Span<uint> rowBgColor = default, uint borderColorStrong = default, uint borderColorLight = default, float borderX1 = default, float borderX2 = default, float hostIndentX = default, float minColumnWidth = default, float outerPaddingX = default, float cellPaddingX = default, float cellPaddingY = default, float cellSpacingX1 = default, float cellSpacingX2 = default, float innerWidth = default, float columnsGivenWidth = default, float columnsAutoFitWidth = default, float columnsStretchSumWeights = default, float resizedColumnNextWidth = default, float resizeLockMinContentsX2 = default, float refScale = default, ImRect outerRect = default, ImRect innerRect = default, ImRect workRect = default, ImRect innerClipRect = default, ImRect bgClipRect = default, ImRect bg0ClipRectForDrawCmd = default, ImRect bg2ClipRectForDrawCmd = default, ImRect hostClipRect = default, ImRect hostBackupInnerClipRect = default, ImGuiWindowPtr outerWindow = default, ImGuiWindowPtr innerWindow = default, ImGuiTextBuffer columnsNames = default, ImDrawListSplitterPtr drawSplitter = default, ImGuiTableInstanceData instanceDataFirst = default, ImVector<ImGuiTableInstanceData> instanceDataExtra = default, ImGuiTableColumnSortSpecs sortSpecsSingle = default, ImVector<ImGuiTableColumnSortSpecs> sortSpecsMulti = default, ImGuiTableSortSpecs sortSpecs = default, sbyte sortSpecsCount = default, sbyte columnsEnabledCount = default, sbyte columnsEnabledFixedCount = default, sbyte declColumnsCount = default, sbyte hoveredColumnBody = default, sbyte hoveredColumnBorder = default, sbyte autoFitSingleColumn = default, sbyte resizedColumn = default, sbyte lastResizedColumn = default, sbyte heldHeaderColumn = default, sbyte reorderColumn = default, sbyte reorderColumnDir = default, sbyte leftMostEnabledColumn = default, sbyte rightMostEnabledColumn = default, sbyte leftMostStretchedColumn = default, sbyte rightMostStretchedColumn = default, sbyte contextPopupColumn = default, sbyte freezeRowsRequest = default, sbyte freezeRowsCount = default, sbyte freezeColumnsRequest = default, sbyte freezeColumnsCount = default, sbyte rowCellDataCurrent = default, byte dummyDrawChannel = default, byte bg2DrawChannelCurrent = default, byte bg2DrawChannelUnfrozen = default, bool isLayoutLocked = default, bool isInsideRow = default, bool isInitializing = default, bool isSortSpecsDirty = default, bool isUsingHeaders = default, bool isContextPopupOpen = default, bool isSettingsRequestLoad = default, bool isSettingsDirty = default, bool isDefaultDisplayOrder = default, bool isResetAllRequest = default, bool isResetDisplayOrderRequest = default, bool isUnfrozenRows = default, bool isDefaultSizingPolicy = default, bool memoryCompacted = default, bool hostSkipItems = default)
		{
			ID = id;
			Flags = flags;
			RawData = rawData;
			TempData = tempData;
			Columns = columns;
			DisplayOrderToIndex = displayOrderToIndex;
			RowCellData = rowCellData;
			EnabledMaskByDisplayOrder = enabledMaskByDisplayOrder;
			EnabledMaskByIndex = enabledMaskByIndex;
			VisibleMaskByIndex = visibleMaskByIndex;
			RequestOutputMaskByIndex = requestOutputMaskByIndex;
			SettingsLoadedFlags = settingsLoadedFlags;
			SettingsOffset = settingsOffset;
			LastFrameActive = lastFrameActive;
			ColumnsCount = columnsCount;
			CurrentRow = currentRow;
			CurrentColumn = currentColumn;
			InstanceCurrent = instanceCurrent;
			InstanceInteracted = instanceInteracted;
			RowPosY1 = rowPosY1;
			RowPosY2 = rowPosY2;
			RowMinHeight = rowMinHeight;
			RowTextBaseline = rowTextBaseline;
			RowIndentOffsetX = rowIndentOffsetX;
			RowFlags = rowFlags;
			LastRowFlags = lastRowFlags;
			RowBgColorCounter = rowBgColorCounter;
			if (rowBgColor != default(Span<uint>))
			{
				RowBgColor_0 = rowBgColor[0];
				RowBgColor_1 = rowBgColor[1];
			}
			BorderColorStrong = borderColorStrong;
			BorderColorLight = borderColorLight;
			BorderX1 = borderX1;
			BorderX2 = borderX2;
			HostIndentX = hostIndentX;
			MinColumnWidth = minColumnWidth;
			OuterPaddingX = outerPaddingX;
			CellPaddingX = cellPaddingX;
			CellPaddingY = cellPaddingY;
			CellSpacingX1 = cellSpacingX1;
			CellSpacingX2 = cellSpacingX2;
			InnerWidth = innerWidth;
			ColumnsGivenWidth = columnsGivenWidth;
			ColumnsAutoFitWidth = columnsAutoFitWidth;
			ColumnsStretchSumWeights = columnsStretchSumWeights;
			ResizedColumnNextWidth = resizedColumnNextWidth;
			ResizeLockMinContentsX2 = resizeLockMinContentsX2;
			RefScale = refScale;
			OuterRect = outerRect;
			InnerRect = innerRect;
			WorkRect = workRect;
			InnerClipRect = innerClipRect;
			BgClipRect = bgClipRect;
			Bg0ClipRectForDrawCmd = bg0ClipRectForDrawCmd;
			Bg2ClipRectForDrawCmd = bg2ClipRectForDrawCmd;
			HostClipRect = hostClipRect;
			HostBackupInnerClipRect = hostBackupInnerClipRect;
			OuterWindow = outerWindow;
			InnerWindow = innerWindow;
			ColumnsNames = columnsNames;
			DrawSplitter = drawSplitter;
			InstanceDataFirst = instanceDataFirst;
			InstanceDataExtra = instanceDataExtra;
			SortSpecsSingle = sortSpecsSingle;
			SortSpecsMulti = sortSpecsMulti;
			SortSpecs = sortSpecs;
			SortSpecsCount = sortSpecsCount;
			ColumnsEnabledCount = columnsEnabledCount;
			ColumnsEnabledFixedCount = columnsEnabledFixedCount;
			DeclColumnsCount = declColumnsCount;
			HoveredColumnBody = hoveredColumnBody;
			HoveredColumnBorder = hoveredColumnBorder;
			AutoFitSingleColumn = autoFitSingleColumn;
			ResizedColumn = resizedColumn;
			LastResizedColumn = lastResizedColumn;
			HeldHeaderColumn = heldHeaderColumn;
			ReorderColumn = reorderColumn;
			ReorderColumnDir = reorderColumnDir;
			LeftMostEnabledColumn = leftMostEnabledColumn;
			RightMostEnabledColumn = rightMostEnabledColumn;
			LeftMostStretchedColumn = leftMostStretchedColumn;
			RightMostStretchedColumn = rightMostStretchedColumn;
			ContextPopupColumn = contextPopupColumn;
			FreezeRowsRequest = freezeRowsRequest;
			FreezeRowsCount = freezeRowsCount;
			FreezeColumnsRequest = freezeColumnsRequest;
			FreezeColumnsCount = freezeColumnsCount;
			RowCellDataCurrent = rowCellDataCurrent;
			DummyDrawChannel = dummyDrawChannel;
			Bg2DrawChannelCurrent = bg2DrawChannelCurrent;
			Bg2DrawChannelUnfrozen = bg2DrawChannelUnfrozen;
			IsLayoutLocked = isLayoutLocked ? (byte)1 : (byte)0;
			IsInsideRow = isInsideRow ? (byte)1 : (byte)0;
			IsInitializing = isInitializing ? (byte)1 : (byte)0;
			IsSortSpecsDirty = isSortSpecsDirty ? (byte)1 : (byte)0;
			IsUsingHeaders = isUsingHeaders ? (byte)1 : (byte)0;
			IsContextPopupOpen = isContextPopupOpen ? (byte)1 : (byte)0;
			IsSettingsRequestLoad = isSettingsRequestLoad ? (byte)1 : (byte)0;
			IsSettingsDirty = isSettingsDirty ? (byte)1 : (byte)0;
			IsDefaultDisplayOrder = isDefaultDisplayOrder ? (byte)1 : (byte)0;
			IsResetAllRequest = isResetAllRequest ? (byte)1 : (byte)0;
			IsResetDisplayOrderRequest = isResetDisplayOrderRequest ? (byte)1 : (byte)0;
			IsUnfrozenRows = isUnfrozenRows ? (byte)1 : (byte)0;
			IsDefaultSizingPolicy = isDefaultSizingPolicy ? (byte)1 : (byte)0;
			MemoryCompacted = memoryCompacted ? (byte)1 : (byte)0;
			HostSkipItems = hostSkipItems ? (byte)1 : (byte)0;
		}


		public ImGuiTableRowFlags RowFlags { get => Bitfield.Get(RawBits0, 0, 16); set => Bitfield.Set(ref RawBits0, value, 0, 16); }

		public ImGuiTableRowFlags LastRowFlags { get => Bitfield.Get(RawBits0, 16, 16); set => Bitfield.Set(ref RawBits0, value, 16, 16); }

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTablePtr : IEquatable<ImGuiTablePtr>
	{
		public ImGuiTablePtr(ImGuiTable* handle) { Handle = handle; }

		public ImGuiTable* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTablePtr Null => new ImGuiTablePtr(null);

		public ImGuiTable this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTablePtr(ImGuiTable* handle) => new ImGuiTablePtr(handle);

		public static implicit operator ImGuiTable*(ImGuiTablePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTablePtr left, ImGuiTablePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTablePtr left, ImGuiTablePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTablePtr left, ImGuiTable* right) => left.Handle == right;

		public static bool operator !=(ImGuiTablePtr left, ImGuiTable* right) => left.Handle != right;

		public bool Equals(ImGuiTablePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTablePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTablePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableFlags Flags => ref Unsafe.AsRef<ImGuiTableFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* RawData { get => Handle->RawData; set => Handle->RawData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableTempDataPtr TempData => ref Unsafe.AsRef<ImGuiTableTempDataPtr>(&Handle->TempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImSpanImGuiTableColumn Columns => ref Unsafe.AsRef<ImSpanImGuiTableColumn>(&Handle->Columns);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImSpanImGuiTableColumnIdx DisplayOrderToIndex => ref Unsafe.AsRef<ImSpanImGuiTableColumnIdx>(&Handle->DisplayOrderToIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImSpanImGuiTableCellData RowCellData => ref Unsafe.AsRef<ImSpanImGuiTableCellData>(&Handle->RowCellData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ulong EnabledMaskByDisplayOrder => ref Unsafe.AsRef<ulong>(&Handle->EnabledMaskByDisplayOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ulong EnabledMaskByIndex => ref Unsafe.AsRef<ulong>(&Handle->EnabledMaskByIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ulong VisibleMaskByIndex => ref Unsafe.AsRef<ulong>(&Handle->VisibleMaskByIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ulong RequestOutputMaskByIndex => ref Unsafe.AsRef<ulong>(&Handle->RequestOutputMaskByIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableFlags SettingsLoadedFlags => ref Unsafe.AsRef<ImGuiTableFlags>(&Handle->SettingsLoadedFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SettingsOffset => ref Unsafe.AsRef<int>(&Handle->SettingsOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameActive => ref Unsafe.AsRef<int>(&Handle->LastFrameActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ColumnsCount => ref Unsafe.AsRef<int>(&Handle->ColumnsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int CurrentRow => ref Unsafe.AsRef<int>(&Handle->CurrentRow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int CurrentColumn => ref Unsafe.AsRef<int>(&Handle->CurrentColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short InstanceCurrent => ref Unsafe.AsRef<short>(&Handle->InstanceCurrent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short InstanceInteracted => ref Unsafe.AsRef<short>(&Handle->InstanceInteracted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RowPosY1 => ref Unsafe.AsRef<float>(&Handle->RowPosY1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RowPosY2 => ref Unsafe.AsRef<float>(&Handle->RowPosY2);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RowMinHeight => ref Unsafe.AsRef<float>(&Handle->RowMinHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RowTextBaseline => ref Unsafe.AsRef<float>(&Handle->RowTextBaseline);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RowIndentOffsetX => ref Unsafe.AsRef<float>(&Handle->RowIndentOffsetX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableRowFlags RowFlags { get => Handle->RowFlags; set => Handle->RowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTableRowFlags LastRowFlags { get => Handle->LastRowFlags; set => Handle->LastRowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int RowBgColorCounter => ref Unsafe.AsRef<int>(&Handle->RowBgColorCounter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<uint> RowBgColor
		
		{
			get
			{
				return new Span<uint>(&Handle->RowBgColor_0, 2);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint BorderColorStrong => ref Unsafe.AsRef<uint>(&Handle->BorderColorStrong);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint BorderColorLight => ref Unsafe.AsRef<uint>(&Handle->BorderColorLight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float BorderX1 => ref Unsafe.AsRef<float>(&Handle->BorderX1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float BorderX2 => ref Unsafe.AsRef<float>(&Handle->BorderX2);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HostIndentX => ref Unsafe.AsRef<float>(&Handle->HostIndentX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MinColumnWidth => ref Unsafe.AsRef<float>(&Handle->MinColumnWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float OuterPaddingX => ref Unsafe.AsRef<float>(&Handle->OuterPaddingX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CellPaddingX => ref Unsafe.AsRef<float>(&Handle->CellPaddingX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CellPaddingY => ref Unsafe.AsRef<float>(&Handle->CellPaddingY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CellSpacingX1 => ref Unsafe.AsRef<float>(&Handle->CellSpacingX1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CellSpacingX2 => ref Unsafe.AsRef<float>(&Handle->CellSpacingX2);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float InnerWidth => ref Unsafe.AsRef<float>(&Handle->InnerWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColumnsGivenWidth => ref Unsafe.AsRef<float>(&Handle->ColumnsGivenWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColumnsAutoFitWidth => ref Unsafe.AsRef<float>(&Handle->ColumnsAutoFitWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColumnsStretchSumWeights => ref Unsafe.AsRef<float>(&Handle->ColumnsStretchSumWeights);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ResizedColumnNextWidth => ref Unsafe.AsRef<float>(&Handle->ResizedColumnNextWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ResizeLockMinContentsX2 => ref Unsafe.AsRef<float>(&Handle->ResizeLockMinContentsX2);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float RefScale => ref Unsafe.AsRef<float>(&Handle->RefScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect OuterRect => ref Unsafe.AsRef<ImRect>(&Handle->OuterRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect InnerRect => ref Unsafe.AsRef<ImRect>(&Handle->InnerRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect WorkRect => ref Unsafe.AsRef<ImRect>(&Handle->WorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect InnerClipRect => ref Unsafe.AsRef<ImRect>(&Handle->InnerClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect BgClipRect => ref Unsafe.AsRef<ImRect>(&Handle->BgClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect Bg0ClipRectForDrawCmd => ref Unsafe.AsRef<ImRect>(&Handle->Bg0ClipRectForDrawCmd);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect Bg2ClipRectForDrawCmd => ref Unsafe.AsRef<ImRect>(&Handle->Bg2ClipRectForDrawCmd);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect HostClipRect => ref Unsafe.AsRef<ImRect>(&Handle->HostClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect HostBackupInnerClipRect => ref Unsafe.AsRef<ImRect>(&Handle->HostBackupInnerClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr OuterWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->OuterWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr InnerWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->InnerWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer ColumnsNames => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->ColumnsNames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawListSplitterPtr DrawSplitter => ref Unsafe.AsRef<ImDrawListSplitterPtr>(&Handle->DrawSplitter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableInstanceData InstanceDataFirst => ref Unsafe.AsRef<ImGuiTableInstanceData>(&Handle->InstanceDataFirst);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTableInstanceData> InstanceDataExtra => ref Unsafe.AsRef<ImVector<ImGuiTableInstanceData>>(&Handle->InstanceDataExtra);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableColumnSortSpecs SortSpecsSingle => ref Unsafe.AsRef<ImGuiTableColumnSortSpecs>(&Handle->SortSpecsSingle);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti => ref Unsafe.AsRef<ImVector<ImGuiTableColumnSortSpecs>>(&Handle->SortSpecsMulti);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTableSortSpecs SortSpecs => ref Unsafe.AsRef<ImGuiTableSortSpecs>(&Handle->SortSpecs);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte SortSpecsCount => ref Unsafe.AsRef<sbyte>(&Handle->SortSpecsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ColumnsEnabledCount => ref Unsafe.AsRef<sbyte>(&Handle->ColumnsEnabledCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ColumnsEnabledFixedCount => ref Unsafe.AsRef<sbyte>(&Handle->ColumnsEnabledFixedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte DeclColumnsCount => ref Unsafe.AsRef<sbyte>(&Handle->DeclColumnsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HoveredColumnBody => ref Unsafe.AsRef<sbyte>(&Handle->HoveredColumnBody);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HoveredColumnBorder => ref Unsafe.AsRef<sbyte>(&Handle->HoveredColumnBorder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte AutoFitSingleColumn => ref Unsafe.AsRef<sbyte>(&Handle->AutoFitSingleColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ResizedColumn => ref Unsafe.AsRef<sbyte>(&Handle->ResizedColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte LastResizedColumn => ref Unsafe.AsRef<sbyte>(&Handle->LastResizedColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HeldHeaderColumn => ref Unsafe.AsRef<sbyte>(&Handle->HeldHeaderColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ReorderColumn => ref Unsafe.AsRef<sbyte>(&Handle->ReorderColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ReorderColumnDir => ref Unsafe.AsRef<sbyte>(&Handle->ReorderColumnDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte LeftMostEnabledColumn => ref Unsafe.AsRef<sbyte>(&Handle->LeftMostEnabledColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte RightMostEnabledColumn => ref Unsafe.AsRef<sbyte>(&Handle->RightMostEnabledColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte LeftMostStretchedColumn => ref Unsafe.AsRef<sbyte>(&Handle->LeftMostStretchedColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte RightMostStretchedColumn => ref Unsafe.AsRef<sbyte>(&Handle->RightMostStretchedColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte ContextPopupColumn => ref Unsafe.AsRef<sbyte>(&Handle->ContextPopupColumn);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte FreezeRowsRequest => ref Unsafe.AsRef<sbyte>(&Handle->FreezeRowsRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte FreezeRowsCount => ref Unsafe.AsRef<sbyte>(&Handle->FreezeRowsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte FreezeColumnsRequest => ref Unsafe.AsRef<sbyte>(&Handle->FreezeColumnsRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte FreezeColumnsCount => ref Unsafe.AsRef<sbyte>(&Handle->FreezeColumnsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte RowCellDataCurrent => ref Unsafe.AsRef<sbyte>(&Handle->RowCellDataCurrent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte DummyDrawChannel => ref Unsafe.AsRef<byte>(&Handle->DummyDrawChannel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte Bg2DrawChannelCurrent => ref Unsafe.AsRef<byte>(&Handle->Bg2DrawChannelCurrent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte Bg2DrawChannelUnfrozen => ref Unsafe.AsRef<byte>(&Handle->Bg2DrawChannelUnfrozen);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsLayoutLocked => ref Unsafe.AsRef<bool>(&Handle->IsLayoutLocked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsInsideRow => ref Unsafe.AsRef<bool>(&Handle->IsInsideRow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsInitializing => ref Unsafe.AsRef<bool>(&Handle->IsInitializing);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsSortSpecsDirty => ref Unsafe.AsRef<bool>(&Handle->IsSortSpecsDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsUsingHeaders => ref Unsafe.AsRef<bool>(&Handle->IsUsingHeaders);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsContextPopupOpen => ref Unsafe.AsRef<bool>(&Handle->IsContextPopupOpen);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsSettingsRequestLoad => ref Unsafe.AsRef<bool>(&Handle->IsSettingsRequestLoad);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsSettingsDirty => ref Unsafe.AsRef<bool>(&Handle->IsSettingsDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsDefaultDisplayOrder => ref Unsafe.AsRef<bool>(&Handle->IsDefaultDisplayOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsResetAllRequest => ref Unsafe.AsRef<bool>(&Handle->IsResetAllRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsResetDisplayOrderRequest => ref Unsafe.AsRef<bool>(&Handle->IsResetDisplayOrderRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsUnfrozenRows => ref Unsafe.AsRef<bool>(&Handle->IsUnfrozenRows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsDefaultSizingPolicy => ref Unsafe.AsRef<bool>(&Handle->IsDefaultSizingPolicy);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool MemoryCompacted => ref Unsafe.AsRef<bool>(&Handle->MemoryCompacted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HostSkipItems => ref Unsafe.AsRef<bool>(&Handle->HostSkipItems);
	}

}
