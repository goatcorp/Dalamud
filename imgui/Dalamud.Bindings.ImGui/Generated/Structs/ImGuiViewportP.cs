// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewportP
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiViewport ImGuiViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Idx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrontMostStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint LastNameHash;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LastPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Alpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short PlatformMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PlatformWindowCreated;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DrawListsLastFrame_0;
		public int DrawListsLastFrame_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawList* DrawLists_0;
		public unsafe ImDrawList* DrawLists_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawData DrawDataP;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawDataBuilder DrawDataBuilder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LastPlatformPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LastPlatformSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LastRendererSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WorkOffsetMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BuildWorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BuildWorkOffsetMax;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP(ImGuiViewport imGuiViewport = default, int idx = default, int lastFrameActive = default, int lastFrontMostStampCount = default, uint lastNameHash = default, Vector2 lastPos = default, float alpha = default, float lastAlpha = default, short platformMonitor = default, bool platformWindowCreated = default, ImGuiWindowPtr window = default, int* drawListsLastFrame = default, ImDrawListPtrPtr drawLists = default, ImDrawData drawDataP = default, ImDrawDataBuilder drawDataBuilder = default, Vector2 lastPlatformPos = default, Vector2 lastPlatformSize = default, Vector2 lastRendererSize = default, Vector2 workOffsetMin = default, Vector2 workOffsetMax = default, Vector2 buildWorkOffsetMin = default, Vector2 buildWorkOffsetMax = default)
		{
			ImGuiViewport = imGuiViewport;
			Idx = idx;
			LastFrameActive = lastFrameActive;
			LastFrontMostStampCount = lastFrontMostStampCount;
			LastNameHash = lastNameHash;
			LastPos = lastPos;
			Alpha = alpha;
			LastAlpha = lastAlpha;
			PlatformMonitor = platformMonitor;
			PlatformWindowCreated = platformWindowCreated ? (byte)1 : (byte)0;
			Window = window;
			if (drawListsLastFrame != default(int*))
			{
				DrawListsLastFrame_0 = drawListsLastFrame[0];
				DrawListsLastFrame_1 = drawListsLastFrame[1];
			}
			if (drawLists != default(ImDrawListPtrPtr))
			{
				DrawLists_0 = drawLists[0];
				DrawLists_1 = drawLists[1];
			}
			DrawDataP = drawDataP;
			DrawDataBuilder = drawDataBuilder;
			LastPlatformPos = lastPlatformPos;
			LastPlatformSize = lastPlatformSize;
			LastRendererSize = lastRendererSize;
			WorkOffsetMin = workOffsetMin;
			WorkOffsetMax = workOffsetMax;
			BuildWorkOffsetMin = buildWorkOffsetMin;
			BuildWorkOffsetMax = buildWorkOffsetMax;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP(ImGuiViewport imGuiViewport = default, int idx = default, int lastFrameActive = default, int lastFrontMostStampCount = default, uint lastNameHash = default, Vector2 lastPos = default, float alpha = default, float lastAlpha = default, short platformMonitor = default, bool platformWindowCreated = default, ImGuiWindowPtr window = default, Span<int> drawListsLastFrame = default, Span<Pointer<ImDrawList>> drawLists = default, ImDrawData drawDataP = default, ImDrawDataBuilder drawDataBuilder = default, Vector2 lastPlatformPos = default, Vector2 lastPlatformSize = default, Vector2 lastRendererSize = default, Vector2 workOffsetMin = default, Vector2 workOffsetMax = default, Vector2 buildWorkOffsetMin = default, Vector2 buildWorkOffsetMax = default)
		{
			ImGuiViewport = imGuiViewport;
			Idx = idx;
			LastFrameActive = lastFrameActive;
			LastFrontMostStampCount = lastFrontMostStampCount;
			LastNameHash = lastNameHash;
			LastPos = lastPos;
			Alpha = alpha;
			LastAlpha = lastAlpha;
			PlatformMonitor = platformMonitor;
			PlatformWindowCreated = platformWindowCreated ? (byte)1 : (byte)0;
			Window = window;
			if (drawListsLastFrame != default(Span<int>))
			{
				DrawListsLastFrame_0 = drawListsLastFrame[0];
				DrawListsLastFrame_1 = drawListsLastFrame[1];
			}
			if (drawLists != default(Span<Pointer<ImDrawList>>))
			{
				DrawLists_0 = drawLists[0];
				DrawLists_1 = drawLists[1];
			}
			DrawDataP = drawDataP;
			DrawDataBuilder = drawDataBuilder;
			LastPlatformPos = lastPlatformPos;
			LastPlatformSize = lastPlatformSize;
			LastRendererSize = lastRendererSize;
			WorkOffsetMin = workOffsetMin;
			WorkOffsetMax = workOffsetMax;
			BuildWorkOffsetMin = buildWorkOffsetMin;
			BuildWorkOffsetMax = buildWorkOffsetMax;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ImDrawList>> DrawLists
		
		{
			get
			{
				fixed (ImDrawList** p = &this.DrawLists_0)
				{
					return new Span<Pointer<ImDrawList>>(p, 2);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiViewportPPtr : IEquatable<ImGuiViewportPPtr>
	{
		public ImGuiViewportPPtr(ImGuiViewportP* handle) { Handle = handle; }

		public ImGuiViewportP* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiViewportPPtr Null => new ImGuiViewportPPtr(null);

		public ImGuiViewportP this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiViewportPPtr(ImGuiViewportP* handle) => new ImGuiViewportPPtr(handle);

		public static implicit operator ImGuiViewportP*(ImGuiViewportPPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiViewportPPtr left, ImGuiViewportPPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiViewportPPtr left, ImGuiViewportPPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiViewportPPtr left, ImGuiViewportP* right) => left.Handle == right;

		public static bool operator !=(ImGuiViewportPPtr left, ImGuiViewportP* right) => left.Handle != right;

		public bool Equals(ImGuiViewportPPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiViewportPPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiViewportPPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewport ImGuiViewport => ref Unsafe.AsRef<ImGuiViewport>(&Handle->ImGuiViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Idx => ref Unsafe.AsRef<int>(&Handle->Idx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameActive => ref Unsafe.AsRef<int>(&Handle->LastFrameActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrontMostStampCount => ref Unsafe.AsRef<int>(&Handle->LastFrontMostStampCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint LastNameHash => ref Unsafe.AsRef<uint>(&Handle->LastNameHash);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LastPos => ref Unsafe.AsRef<Vector2>(&Handle->LastPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Alpha => ref Unsafe.AsRef<float>(&Handle->Alpha);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastAlpha => ref Unsafe.AsRef<float>(&Handle->LastAlpha);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short PlatformMonitor => ref Unsafe.AsRef<short>(&Handle->PlatformMonitor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PlatformWindowCreated => ref Unsafe.AsRef<bool>(&Handle->PlatformWindowCreated);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<int> DrawListsLastFrame
		
		{
			get
			{
				return new Span<int>(&Handle->DrawListsLastFrame_0, 2);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawData DrawDataP => ref Unsafe.AsRef<ImDrawData>(&Handle->DrawDataP);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawDataBuilder DrawDataBuilder => ref Unsafe.AsRef<ImDrawDataBuilder>(&Handle->DrawDataBuilder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LastPlatformPos => ref Unsafe.AsRef<Vector2>(&Handle->LastPlatformPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LastPlatformSize => ref Unsafe.AsRef<Vector2>(&Handle->LastPlatformSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LastRendererSize => ref Unsafe.AsRef<Vector2>(&Handle->LastRendererSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WorkOffsetMin => ref Unsafe.AsRef<Vector2>(&Handle->WorkOffsetMin);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WorkOffsetMax => ref Unsafe.AsRef<Vector2>(&Handle->WorkOffsetMax);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BuildWorkOffsetMin => ref Unsafe.AsRef<Vector2>(&Handle->BuildWorkOffsetMin);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BuildWorkOffsetMax => ref Unsafe.AsRef<Vector2>(&Handle->BuildWorkOffsetMax);
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiViewportPPtrPtr : IEquatable<ImGuiViewportPPtrPtr>
	{
		public ImGuiViewportPPtrPtr(ImGuiViewportP** handle) { Handle = handle; }

		public ImGuiViewportP** Handle;

		public bool IsNull => Handle == null;

		public static ImGuiViewportPPtrPtr Null => new ImGuiViewportPPtrPtr(null);

		public ImGuiViewportP* this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiViewportPPtrPtr(ImGuiViewportP** handle) => new ImGuiViewportPPtrPtr(handle);

		public static implicit operator ImGuiViewportP**(ImGuiViewportPPtrPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiViewportPPtrPtr left, ImGuiViewportPPtrPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiViewportPPtrPtr left, ImGuiViewportPPtrPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiViewportPPtrPtr left, ImGuiViewportP** right) => left.Handle == right;

		public static bool operator !=(ImGuiViewportPPtrPtr left, ImGuiViewportP** right) => left.Handle != right;

		public bool Equals(ImGuiViewportPPtrPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiViewportPPtrPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiViewportPPtrPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
