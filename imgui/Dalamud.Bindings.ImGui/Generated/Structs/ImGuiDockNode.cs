// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNode
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockNodeFlags SharedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockNodeFlags LocalFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockNodeFlags LocalFlagsInWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockNodeFlags MergedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockNodeState State;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* ParentNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* ChildNodes_0;
		public unsafe ImGuiDockNode* ChildNodes_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTabBar* TabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 SizeRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiAxis SplitAxis;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint LastBgColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HostWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* VisibleWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* CentralNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* OnlyNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CountNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint LastFocusedNodeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint SelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint WantCloseTabId;

		public ImGuiDataAuthority RawBits0;
		public bool RawBits1;
		public bool RawBits2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode(uint id = default, ImGuiDockNodeFlags sharedFlags = default, ImGuiDockNodeFlags localFlags = default, ImGuiDockNodeFlags localFlagsInWindows = default, ImGuiDockNodeFlags mergedFlags = default, ImGuiDockNodeState state = default, ImGuiDockNode* parentNode = default, ImGuiDockNode** childNodes = default, ImVector<ImGuiWindowPtr> windows = default, ImGuiTabBar* tabBar = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeRef = default, ImGuiAxis splitAxis = default, ImGuiWindowClass windowClass = default, uint lastBgColor = default, ImGuiWindowPtr hostWindow = default, ImGuiWindowPtr visibleWindow = default, ImGuiDockNode* centralNode = default, ImGuiDockNode* onlyNodeWithWindows = default, int countNodeWithWindows = default, int lastFrameAlive = default, int lastFrameActive = default, int lastFrameFocused = default, uint lastFocusedNodeId = default, uint selectedTabId = default, uint wantCloseTabId = default, ImGuiDataAuthority authorityForPos = default, ImGuiDataAuthority authorityForSize = default, ImGuiDataAuthority authorityForViewport = default, bool isVisible = default, bool isFocused = default, bool isBgDrawnThisFrame = default, bool hasCloseButton = default, bool hasWindowMenuButton = default, bool hasCentralNodeChild = default, bool wantCloseAll = default, bool wantLockSizeOnce = default, bool wantMouseMove = default, bool wantHiddenTabBarUpdate = default, bool wantHiddenTabBarToggle = default)
		{
			ID = id;
			SharedFlags = sharedFlags;
			LocalFlags = localFlags;
			LocalFlagsInWindows = localFlagsInWindows;
			MergedFlags = mergedFlags;
			State = state;
			ParentNode = parentNode;
			if (childNodes != default(ImGuiDockNode**))
			{
				ChildNodes_0 = childNodes[0];
				ChildNodes_1 = childNodes[1];
			}
			Windows = windows;
			TabBar = tabBar;
			Pos = pos;
			Size = size;
			SizeRef = sizeRef;
			SplitAxis = splitAxis;
			WindowClass = windowClass;
			LastBgColor = lastBgColor;
			HostWindow = hostWindow;
			VisibleWindow = visibleWindow;
			CentralNode = centralNode;
			OnlyNodeWithWindows = onlyNodeWithWindows;
			CountNodeWithWindows = countNodeWithWindows;
			LastFrameAlive = lastFrameAlive;
			LastFrameActive = lastFrameActive;
			LastFrameFocused = lastFrameFocused;
			LastFocusedNodeId = lastFocusedNodeId;
			SelectedTabId = selectedTabId;
			WantCloseTabId = wantCloseTabId;
			AuthorityForPos = authorityForPos;
			AuthorityForSize = authorityForSize;
			AuthorityForViewport = authorityForViewport;
			IsVisible = isVisible;
			IsFocused = isFocused;
			IsBgDrawnThisFrame = isBgDrawnThisFrame;
			HasCloseButton = hasCloseButton;
			HasWindowMenuButton = hasWindowMenuButton;
			HasCentralNodeChild = hasCentralNodeChild;
			WantCloseAll = wantCloseAll;
			WantLockSizeOnce = wantLockSizeOnce;
			WantMouseMove = wantMouseMove;
			WantHiddenTabBarUpdate = wantHiddenTabBarUpdate;
			WantHiddenTabBarToggle = wantHiddenTabBarToggle;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode(uint id = default, ImGuiDockNodeFlags sharedFlags = default, ImGuiDockNodeFlags localFlags = default, ImGuiDockNodeFlags localFlagsInWindows = default, ImGuiDockNodeFlags mergedFlags = default, ImGuiDockNodeState state = default, ImGuiDockNode* parentNode = default, Span<Pointer<ImGuiDockNode>> childNodes = default, ImVector<ImGuiWindowPtr> windows = default, ImGuiTabBar* tabBar = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeRef = default, ImGuiAxis splitAxis = default, ImGuiWindowClass windowClass = default, uint lastBgColor = default, ImGuiWindowPtr hostWindow = default, ImGuiWindowPtr visibleWindow = default, ImGuiDockNode* centralNode = default, ImGuiDockNode* onlyNodeWithWindows = default, int countNodeWithWindows = default, int lastFrameAlive = default, int lastFrameActive = default, int lastFrameFocused = default, uint lastFocusedNodeId = default, uint selectedTabId = default, uint wantCloseTabId = default, ImGuiDataAuthority authorityForPos = default, ImGuiDataAuthority authorityForSize = default, ImGuiDataAuthority authorityForViewport = default, bool isVisible = default, bool isFocused = default, bool isBgDrawnThisFrame = default, bool hasCloseButton = default, bool hasWindowMenuButton = default, bool hasCentralNodeChild = default, bool wantCloseAll = default, bool wantLockSizeOnce = default, bool wantMouseMove = default, bool wantHiddenTabBarUpdate = default, bool wantHiddenTabBarToggle = default)
		{
			ID = id;
			SharedFlags = sharedFlags;
			LocalFlags = localFlags;
			LocalFlagsInWindows = localFlagsInWindows;
			MergedFlags = mergedFlags;
			State = state;
			ParentNode = parentNode;
			if (childNodes != default(Span<Pointer<ImGuiDockNode>>))
			{
				ChildNodes_0 = childNodes[0];
				ChildNodes_1 = childNodes[1];
			}
			Windows = windows;
			TabBar = tabBar;
			Pos = pos;
			Size = size;
			SizeRef = sizeRef;
			SplitAxis = splitAxis;
			WindowClass = windowClass;
			LastBgColor = lastBgColor;
			HostWindow = hostWindow;
			VisibleWindow = visibleWindow;
			CentralNode = centralNode;
			OnlyNodeWithWindows = onlyNodeWithWindows;
			CountNodeWithWindows = countNodeWithWindows;
			LastFrameAlive = lastFrameAlive;
			LastFrameActive = lastFrameActive;
			LastFrameFocused = lastFrameFocused;
			LastFocusedNodeId = lastFocusedNodeId;
			SelectedTabId = selectedTabId;
			WantCloseTabId = wantCloseTabId;
			AuthorityForPos = authorityForPos;
			AuthorityForSize = authorityForSize;
			AuthorityForViewport = authorityForViewport;
			IsVisible = isVisible;
			IsFocused = isFocused;
			IsBgDrawnThisFrame = isBgDrawnThisFrame;
			HasCloseButton = hasCloseButton;
			HasWindowMenuButton = hasWindowMenuButton;
			HasCentralNodeChild = hasCentralNodeChild;
			WantCloseAll = wantCloseAll;
			WantLockSizeOnce = wantLockSizeOnce;
			WantMouseMove = wantMouseMove;
			WantHiddenTabBarUpdate = wantHiddenTabBarUpdate;
			WantHiddenTabBarToggle = wantHiddenTabBarToggle;
		}


		public ImGuiDataAuthority AuthorityForPos { get => Bitfield.Get(RawBits0, 0, 3); set => Bitfield.Set(ref RawBits0, value, 0, 3); }

		public ImGuiDataAuthority AuthorityForSize { get => Bitfield.Get(RawBits0, 3, 3); set => Bitfield.Set(ref RawBits0, value, 3, 3); }

		public ImGuiDataAuthority AuthorityForViewport { get => Bitfield.Get(RawBits0, 6, 3); set => Bitfield.Set(ref RawBits0, value, 6, 3); }

		public bool IsVisible { get => Bitfield.Get(RawBits1, 0, 1); set => Bitfield.Set(ref RawBits1, value, 0, 1); }

		public bool IsFocused { get => Bitfield.Get(RawBits1, 1, 1); set => Bitfield.Set(ref RawBits1, value, 1, 1); }

		public bool IsBgDrawnThisFrame { get => Bitfield.Get(RawBits1, 2, 1); set => Bitfield.Set(ref RawBits1, value, 2, 1); }

		public bool HasCloseButton { get => Bitfield.Get(RawBits1, 3, 1); set => Bitfield.Set(ref RawBits1, value, 3, 1); }

		public bool HasWindowMenuButton { get => Bitfield.Get(RawBits1, 4, 1); set => Bitfield.Set(ref RawBits1, value, 4, 1); }

		public bool HasCentralNodeChild { get => Bitfield.Get(RawBits1, 5, 1); set => Bitfield.Set(ref RawBits1, value, 5, 1); }

		public bool WantCloseAll { get => Bitfield.Get(RawBits1, 6, 1); set => Bitfield.Set(ref RawBits1, value, 6, 1); }

		public bool WantLockSizeOnce { get => Bitfield.Get(RawBits1, 7, 1); set => Bitfield.Set(ref RawBits1, value, 7, 1); }

		public bool WantMouseMove { get => Bitfield.Get(RawBits2, 0, 1); set => Bitfield.Set(ref RawBits2, value, 0, 1); }

		public bool WantHiddenTabBarUpdate { get => Bitfield.Get(RawBits2, 1, 1); set => Bitfield.Set(ref RawBits2, value, 1, 1); }

		public bool WantHiddenTabBarToggle { get => Bitfield.Get(RawBits2, 2, 1); set => Bitfield.Set(ref RawBits2, value, 2, 1); }

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ImGuiDockNode>> ChildNodes
		
		{
			get
			{
				fixed (ImGuiDockNode** p = &this.ChildNodes_0)
				{
					return new Span<Pointer<ImGuiDockNode>>(p, 2);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiDockNodePtr : IEquatable<ImGuiDockNodePtr>
	{
		public ImGuiDockNodePtr(ImGuiDockNode* handle) { Handle = handle; }

		public ImGuiDockNode* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiDockNodePtr Null => new ImGuiDockNodePtr(null);

		public ImGuiDockNode this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiDockNodePtr(ImGuiDockNode* handle) => new ImGuiDockNodePtr(handle);

		public static implicit operator ImGuiDockNode*(ImGuiDockNodePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiDockNodePtr left, ImGuiDockNodePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiDockNodePtr left, ImGuiDockNodePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiDockNodePtr left, ImGuiDockNode* right) => left.Handle == right;

		public static bool operator !=(ImGuiDockNodePtr left, ImGuiDockNode* right) => left.Handle != right;

		public bool Equals(ImGuiDockNodePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiDockNodePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiDockNodePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodeFlags SharedFlags => ref Unsafe.AsRef<ImGuiDockNodeFlags>(&Handle->SharedFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodeFlags LocalFlags => ref Unsafe.AsRef<ImGuiDockNodeFlags>(&Handle->LocalFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodeFlags LocalFlagsInWindows => ref Unsafe.AsRef<ImGuiDockNodeFlags>(&Handle->LocalFlagsInWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodeFlags MergedFlags => ref Unsafe.AsRef<ImGuiDockNodeFlags>(&Handle->MergedFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodeState State => ref Unsafe.AsRef<ImGuiDockNodeState>(&Handle->State);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr ParentNode => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->ParentNode);
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> Windows => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->Windows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTabBarPtr TabBar => ref Unsafe.AsRef<ImGuiTabBarPtr>(&Handle->TabBar);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Size => ref Unsafe.AsRef<Vector2>(&Handle->Size);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 SizeRef => ref Unsafe.AsRef<Vector2>(&Handle->SizeRef);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiAxis SplitAxis => ref Unsafe.AsRef<ImGuiAxis>(&Handle->SplitAxis);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowClass WindowClass => ref Unsafe.AsRef<ImGuiWindowClass>(&Handle->WindowClass);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint LastBgColor => ref Unsafe.AsRef<uint>(&Handle->LastBgColor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HostWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HostWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr VisibleWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->VisibleWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr CentralNode => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->CentralNode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr OnlyNodeWithWindows => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->OnlyNodeWithWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int CountNodeWithWindows => ref Unsafe.AsRef<int>(&Handle->CountNodeWithWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameAlive => ref Unsafe.AsRef<int>(&Handle->LastFrameAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameActive => ref Unsafe.AsRef<int>(&Handle->LastFrameActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameFocused => ref Unsafe.AsRef<int>(&Handle->LastFrameFocused);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint LastFocusedNodeId => ref Unsafe.AsRef<uint>(&Handle->LastFocusedNodeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint SelectedTabId => ref Unsafe.AsRef<uint>(&Handle->SelectedTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint WantCloseTabId => ref Unsafe.AsRef<uint>(&Handle->WantCloseTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataAuthority AuthorityForPos { get => Handle->AuthorityForPos; set => Handle->AuthorityForPos = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataAuthority AuthorityForSize { get => Handle->AuthorityForSize; set => Handle->AuthorityForSize = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataAuthority AuthorityForViewport { get => Handle->AuthorityForViewport; set => Handle->AuthorityForViewport = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool IsVisible { get => Handle->IsVisible; set => Handle->IsVisible = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool IsFocused { get => Handle->IsFocused; set => Handle->IsFocused = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool IsBgDrawnThisFrame { get => Handle->IsBgDrawnThisFrame; set => Handle->IsBgDrawnThisFrame = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool HasCloseButton { get => Handle->HasCloseButton; set => Handle->HasCloseButton = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool HasWindowMenuButton { get => Handle->HasWindowMenuButton; set => Handle->HasWindowMenuButton = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool HasCentralNodeChild { get => Handle->HasCentralNodeChild; set => Handle->HasCentralNodeChild = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool WantCloseAll { get => Handle->WantCloseAll; set => Handle->WantCloseAll = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool WantLockSizeOnce { get => Handle->WantLockSizeOnce; set => Handle->WantLockSizeOnce = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool WantMouseMove { get => Handle->WantMouseMove; set => Handle->WantMouseMove = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool WantHiddenTabBarUpdate { get => Handle->WantHiddenTabBarUpdate; set => Handle->WantHiddenTabBarUpdate = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool WantHiddenTabBarToggle { get => Handle->WantHiddenTabBarToggle; set => Handle->WantHiddenTabBarToggle = value; }
	}

}
