// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLastItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemFlags InFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemStatusFlags StatusFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect Rect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect DisplayRect;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiLastItemData(uint id = default, ImGuiItemFlags inFlags = default, ImGuiItemStatusFlags statusFlags = default, ImRect rect = default, ImRect navRect = default, ImRect displayRect = default)
		{
			ID = id;
			InFlags = inFlags;
			StatusFlags = statusFlags;
			Rect = rect;
			NavRect = navRect;
			DisplayRect = displayRect;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiLastItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiLastItemDataPtr : IEquatable<ImGuiLastItemDataPtr>
	{
		public ImGuiLastItemDataPtr(ImGuiLastItemData* handle) { Handle = handle; }

		public ImGuiLastItemData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiLastItemDataPtr Null => new ImGuiLastItemDataPtr(null);

		public ImGuiLastItemData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiLastItemDataPtr(ImGuiLastItemData* handle) => new ImGuiLastItemDataPtr(handle);

		public static implicit operator ImGuiLastItemData*(ImGuiLastItemDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiLastItemDataPtr left, ImGuiLastItemDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiLastItemDataPtr left, ImGuiLastItemDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiLastItemDataPtr left, ImGuiLastItemData* right) => left.Handle == right;

		public static bool operator !=(ImGuiLastItemDataPtr left, ImGuiLastItemData* right) => left.Handle != right;

		public bool Equals(ImGuiLastItemDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiLastItemDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiLastItemDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemFlags InFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&Handle->InFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemStatusFlags StatusFlags => ref Unsafe.AsRef<ImGuiItemStatusFlags>(&Handle->StatusFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect Rect => ref Unsafe.AsRef<ImRect>(&Handle->Rect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavRect => ref Unsafe.AsRef<ImRect>(&Handle->NavRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect DisplayRect => ref Unsafe.AsRef<ImRect>(&Handle->DisplayRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
