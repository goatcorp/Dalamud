// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPopupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PopupId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* SourceWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ParentNavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int OpenFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint OpenParentId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 OpenPopupPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 OpenMousePos;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiPopupData(uint popupId = default, ImGuiWindowPtr window = default, ImGuiWindowPtr sourceWindow = default, int parentNavLayer = default, int openFrameCount = default, uint openParentId = default, Vector2 openPopupPos = default, Vector2 openMousePos = default)
		{
			PopupId = popupId;
			Window = window;
			SourceWindow = sourceWindow;
			ParentNavLayer = parentNavLayer;
			OpenFrameCount = openFrameCount;
			OpenParentId = openParentId;
			OpenPopupPos = openPopupPos;
			OpenMousePos = openMousePos;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiPopupData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiPopupDataPtr : IEquatable<ImGuiPopupDataPtr>
	{
		public ImGuiPopupDataPtr(ImGuiPopupData* handle) { Handle = handle; }

		public ImGuiPopupData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiPopupDataPtr Null => new ImGuiPopupDataPtr(null);

		public ImGuiPopupData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiPopupDataPtr(ImGuiPopupData* handle) => new ImGuiPopupDataPtr(handle);

		public static implicit operator ImGuiPopupData*(ImGuiPopupDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiPopupDataPtr left, ImGuiPopupDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiPopupDataPtr left, ImGuiPopupDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiPopupDataPtr left, ImGuiPopupData* right) => left.Handle == right;

		public static bool operator !=(ImGuiPopupDataPtr left, ImGuiPopupData* right) => left.Handle != right;

		public bool Equals(ImGuiPopupDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiPopupDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiPopupDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint PopupId => ref Unsafe.AsRef<uint>(&Handle->PopupId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr SourceWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->SourceWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ParentNavLayer => ref Unsafe.AsRef<int>(&Handle->ParentNavLayer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int OpenFrameCount => ref Unsafe.AsRef<int>(&Handle->OpenFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint OpenParentId => ref Unsafe.AsRef<uint>(&Handle->OpenParentId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 OpenPopupPos => ref Unsafe.AsRef<Vector2>(&Handle->OpenPopupPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 OpenMousePos => ref Unsafe.AsRef<Vector2>(&Handle->OpenMousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
