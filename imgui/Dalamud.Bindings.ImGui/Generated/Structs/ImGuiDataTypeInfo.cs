// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* PrintFmt;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* ScanFmt;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDataTypeInfo(nuint size = default, byte* name = default, byte* printFmt = default, byte* scanFmt = default)
		{
			Size = size;
			Name = name;
			PrintFmt = printFmt;
			ScanFmt = scanFmt;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiDataTypeInfoPtr : IEquatable<ImGuiDataTypeInfoPtr>
	{
		public ImGuiDataTypeInfoPtr(ImGuiDataTypeInfo* handle) { Handle = handle; }

		public ImGuiDataTypeInfo* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiDataTypeInfoPtr Null => new ImGuiDataTypeInfoPtr(null);

		public ImGuiDataTypeInfo this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiDataTypeInfoPtr(ImGuiDataTypeInfo* handle) => new ImGuiDataTypeInfoPtr(handle);

		public static implicit operator ImGuiDataTypeInfo*(ImGuiDataTypeInfoPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiDataTypeInfoPtr left, ImGuiDataTypeInfoPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiDataTypeInfoPtr left, ImGuiDataTypeInfoPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiDataTypeInfoPtr left, ImGuiDataTypeInfo* right) => left.Handle == right;

		public static bool operator !=(ImGuiDataTypeInfoPtr left, ImGuiDataTypeInfo* right) => left.Handle != right;

		public bool Equals(ImGuiDataTypeInfoPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiDataTypeInfoPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiDataTypeInfoPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref nuint Size => ref Unsafe.AsRef<nuint>(&Handle->Size);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* Name { get => Handle->Name; set => Handle->Name = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* PrintFmt { get => Handle->PrintFmt; set => Handle->PrintFmt = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* ScanFmt { get => Handle->ScanFmt; set => Handle->ScanFmt = value; }
	}

}
