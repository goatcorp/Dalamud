// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipperRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Max;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PosToIndexConvert;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte PosToIndexOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte PosToIndexOffsetMax;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiListClipperRange(int min = default, int max = default, bool posToIndexConvert = default, sbyte posToIndexOffsetMin = default, sbyte posToIndexOffsetMax = default)
		{
			Min = min;
			Max = max;
			PosToIndexConvert = posToIndexConvert ? (byte)1 : (byte)0;
			PosToIndexOffsetMin = posToIndexOffsetMin;
			PosToIndexOffsetMax = posToIndexOffsetMax;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiListClipperRangePtr : IEquatable<ImGuiListClipperRangePtr>
	{
		public ImGuiListClipperRangePtr(ImGuiListClipperRange* handle) { Handle = handle; }

		public ImGuiListClipperRange* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiListClipperRangePtr Null => new ImGuiListClipperRangePtr(null);

		public ImGuiListClipperRange this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiListClipperRangePtr(ImGuiListClipperRange* handle) => new ImGuiListClipperRangePtr(handle);

		public static implicit operator ImGuiListClipperRange*(ImGuiListClipperRangePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiListClipperRangePtr left, ImGuiListClipperRangePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiListClipperRangePtr left, ImGuiListClipperRangePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiListClipperRangePtr left, ImGuiListClipperRange* right) => left.Handle == right;

		public static bool operator !=(ImGuiListClipperRangePtr left, ImGuiListClipperRange* right) => left.Handle != right;

		public bool Equals(ImGuiListClipperRangePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiListClipperRangePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiListClipperRangePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Min => ref Unsafe.AsRef<int>(&Handle->Min);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Max => ref Unsafe.AsRef<int>(&Handle->Max);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PosToIndexConvert => ref Unsafe.AsRef<bool>(&Handle->PosToIndexConvert);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte PosToIndexOffsetMin => ref Unsafe.AsRef<sbyte>(&Handle->PosToIndexOffsetMin);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte PosToIndexOffsetMax => ref Unsafe.AsRef<sbyte>(&Handle->PosToIndexOffsetMax);
	}

}
