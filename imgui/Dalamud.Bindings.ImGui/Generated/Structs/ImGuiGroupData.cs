// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiGroupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint WindowID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec1 BackupIndent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec1 BackupGroupOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCurrLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BackupCurrLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint BackupActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte BackupActiveIdPreviousFrameIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte BackupHoveredIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte EmitItem;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiGroupData(uint windowId = default, Vector2 backupCursorPos = default, Vector2 backupCursorMaxPos = default, ImVec1 backupIndent = default, ImVec1 backupGroupOffset = default, Vector2 backupCurrLineSize = default, float backupCurrLineTextBaseOffset = default, uint backupActiveIdIsAlive = default, bool backupActiveIdPreviousFrameIsAlive = default, bool backupHoveredIdIsAlive = default, bool emitItem = default)
		{
			WindowID = windowId;
			BackupCursorPos = backupCursorPos;
			BackupCursorMaxPos = backupCursorMaxPos;
			BackupIndent = backupIndent;
			BackupGroupOffset = backupGroupOffset;
			BackupCurrLineSize = backupCurrLineSize;
			BackupCurrLineTextBaseOffset = backupCurrLineTextBaseOffset;
			BackupActiveIdIsAlive = backupActiveIdIsAlive;
			BackupActiveIdPreviousFrameIsAlive = backupActiveIdPreviousFrameIsAlive ? (byte)1 : (byte)0;
			BackupHoveredIdIsAlive = backupHoveredIdIsAlive ? (byte)1 : (byte)0;
			EmitItem = emitItem ? (byte)1 : (byte)0;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiGroupDataPtr : IEquatable<ImGuiGroupDataPtr>
	{
		public ImGuiGroupDataPtr(ImGuiGroupData* handle) { Handle = handle; }

		public ImGuiGroupData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiGroupDataPtr Null => new ImGuiGroupDataPtr(null);

		public ImGuiGroupData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiGroupDataPtr(ImGuiGroupData* handle) => new ImGuiGroupDataPtr(handle);

		public static implicit operator ImGuiGroupData*(ImGuiGroupDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiGroupDataPtr left, ImGuiGroupDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiGroupDataPtr left, ImGuiGroupDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiGroupDataPtr left, ImGuiGroupData* right) => left.Handle == right;

		public static bool operator !=(ImGuiGroupDataPtr left, ImGuiGroupData* right) => left.Handle != right;

		public bool Equals(ImGuiGroupDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiGroupDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiGroupDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint WindowID => ref Unsafe.AsRef<uint>(&Handle->WindowID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorMaxPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec1 BackupIndent => ref Unsafe.AsRef<ImVec1>(&Handle->BackupIndent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec1 BackupGroupOffset => ref Unsafe.AsRef<ImVec1>(&Handle->BackupGroupOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCurrLineSize => ref Unsafe.AsRef<Vector2>(&Handle->BackupCurrLineSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float BackupCurrLineTextBaseOffset => ref Unsafe.AsRef<float>(&Handle->BackupCurrLineTextBaseOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint BackupActiveIdIsAlive => ref Unsafe.AsRef<uint>(&Handle->BackupActiveIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool BackupActiveIdPreviousFrameIsAlive => ref Unsafe.AsRef<bool>(&Handle->BackupActiveIdPreviousFrameIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool BackupHoveredIdIsAlive => ref Unsafe.AsRef<bool>(&Handle->BackupHoveredIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool EmitItem => ref Unsafe.AsRef<bool>(&Handle->EmitItem);
	}

}
