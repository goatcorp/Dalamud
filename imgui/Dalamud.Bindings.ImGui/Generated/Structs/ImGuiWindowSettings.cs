// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih ViewportPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ClassId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short DockOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Collapsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantApply;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindowSettings(uint id = default, ImVec2Ih pos = default, ImVec2Ih size = default, ImVec2Ih viewportPos = default, uint viewportId = default, uint dockId = default, uint classId = default, short dockOrder = default, bool collapsed = default, bool wantApply = default)
		{
			ID = id;
			Pos = pos;
			Size = size;
			ViewportPos = viewportPos;
			ViewportId = viewportId;
			DockId = dockId;
			ClassId = classId;
			DockOrder = dockOrder;
			Collapsed = collapsed ? (byte)1 : (byte)0;
			WantApply = wantApply ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiWindowSettingsPtr : IEquatable<ImGuiWindowSettingsPtr>
	{
		public ImGuiWindowSettingsPtr(ImGuiWindowSettings* handle) { Handle = handle; }

		public ImGuiWindowSettings* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiWindowSettingsPtr Null => new ImGuiWindowSettingsPtr(null);

		public ImGuiWindowSettings this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiWindowSettingsPtr(ImGuiWindowSettings* handle) => new ImGuiWindowSettingsPtr(handle);

		public static implicit operator ImGuiWindowSettings*(ImGuiWindowSettingsPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiWindowSettingsPtr left, ImGuiWindowSettingsPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiWindowSettingsPtr left, ImGuiWindowSettingsPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiWindowSettingsPtr left, ImGuiWindowSettings* right) => left.Handle == right;

		public static bool operator !=(ImGuiWindowSettingsPtr left, ImGuiWindowSettings* right) => left.Handle != right;

		public bool Equals(ImGuiWindowSettingsPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiWindowSettingsPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiWindowSettingsPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2Ih Pos => ref Unsafe.AsRef<ImVec2Ih>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2Ih Size => ref Unsafe.AsRef<ImVec2Ih>(&Handle->Size);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2Ih ViewportPos => ref Unsafe.AsRef<ImVec2Ih>(&Handle->ViewportPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ViewportId => ref Unsafe.AsRef<uint>(&Handle->ViewportId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DockId => ref Unsafe.AsRef<uint>(&Handle->DockId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ClassId => ref Unsafe.AsRef<uint>(&Handle->ClassId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short DockOrder => ref Unsafe.AsRef<short>(&Handle->DockOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Collapsed => ref Unsafe.AsRef<bool>(&Handle->Collapsed);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantApply => ref Unsafe.AsRef<bool>(&Handle->WantApply);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
