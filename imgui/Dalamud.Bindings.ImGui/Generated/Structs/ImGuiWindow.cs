// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindow
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowFlags FlagsPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* Viewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ViewportPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ViewportAllowPlatformMonitorExtend;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 SizeFull;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ContentSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ContentSizeIdeal;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ContentSizeExplicit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WindowPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WindowRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WindowBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NameBufLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MoveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ChildId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Scroll;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollTargetCenterRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollTargetEdgeSnapDist;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollbarSizes;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ScrollbarX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ScrollbarY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ViewportOwned;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Active;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WasActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WriteAccessed;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Collapsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantCollapseToggle;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Appearing;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Hidden;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsFallbackWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsExplicitChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HasCloseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ResizeBorderHeld;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short BeginCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short BeginOrderWithinParent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short BeginOrderWithinContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short FocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PopupId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte AutoFitFramesX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte AutoFitFramesY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte AutoFitChildAxises;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte AutoFitOnlyGrows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir AutoPosLastDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HiddenFramesCanSkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HiddenFramesCannotSkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte HiddenFramesForRenderOnly;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte DisableInputsFrames;

		public ImGuiCond RawBits0;
		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 SetWindowPosVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 SetWindowPosPivot;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<uint> IDStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowTempData DC;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect OuterRectClipped;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect InnerRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect InnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect WorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect ParentWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect ContentRegionRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih HitTestHoleSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih HitTestHoleOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameJustFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ItemWidthDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStorage StateStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiOldColumns> ColumnsStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontWindowScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SettingsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawList* DrawList;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawList DrawListInst;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* ParentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* ParentWindowInBeginStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* RootWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* RootWindowPopupTree;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* RootWindowDockTree;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* RootWindowForTitleBarHighlight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* RootWindowForNav;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavLastChildNavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavLastIds_0;
		public uint NavLastIds_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavRectRel_0;
		public ImRect NavRectRel_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MemoryDrawListIdxCapacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MemoryDrawListVtxCapacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte MemoryCompacted;

		public bool RawBits1;
		/// <summary>
		/// To be documented.
		/// </summary>
		public short DockOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiWindowDockStyle DockStyle;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* DockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* DockNodeAsHost;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemStatusFlags DockTabItemStatusFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect DockTabItemRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte InheritNoInputs;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow(byte* name = default, uint id = default, ImGuiWindowFlags flags = default, ImGuiWindowFlags flagsPreviousFrame = default, ImGuiWindowClass windowClass = default, ImGuiViewportP* viewport = default, uint viewportId = default, Vector2 viewportPos = default, int viewportAllowPlatformMonitorExtend = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeFull = default, Vector2 contentSize = default, Vector2 contentSizeIdeal = default, Vector2 contentSizeExplicit = default, Vector2 windowPadding = default, float windowRounding = default, float windowBorderSize = default, int nameBufLen = default, uint moveId = default, uint tabId = default, uint childId = default, Vector2 scroll = default, Vector2 scrollMax = default, Vector2 scrollTarget = default, Vector2 scrollTargetCenterRatio = default, Vector2 scrollTargetEdgeSnapDist = default, Vector2 scrollbarSizes = default, bool scrollbarX = default, bool scrollbarY = default, bool viewportOwned = default, bool active = default, bool wasActive = default, bool writeAccessed = default, bool collapsed = default, bool wantCollapseToggle = default, bool skipItems = default, bool appearing = default, bool hidden = default, bool isFallbackWindow = default, bool isExplicitChild = default, bool hasCloseButton = default, byte resizeBorderHeld = default, short beginCount = default, short beginOrderWithinParent = default, short beginOrderWithinContext = default, short focusOrder = default, uint popupId = default, sbyte autoFitFramesX = default, sbyte autoFitFramesY = default, sbyte autoFitChildAxises = default, bool autoFitOnlyGrows = default, ImGuiDir autoPosLastDirection = default, sbyte hiddenFramesCanSkipItems = default, sbyte hiddenFramesCannotSkipItems = default, sbyte hiddenFramesForRenderOnly = default, sbyte disableInputsFrames = default, ImGuiCond setWindowPosAllowFlags = default, ImGuiCond setWindowSizeAllowFlags = default, ImGuiCond setWindowCollapsedAllowFlags = default, ImGuiCond setWindowDockAllowFlags = default, Vector2 setWindowPosVal = default, Vector2 setWindowPosPivot = default, ImVector<uint> idStack = default, ImGuiWindowTempData dc = default, ImRect outerRectClipped = default, ImRect innerRect = default, ImRect innerClipRect = default, ImRect workRect = default, ImRect parentWorkRect = default, ImRect clipRect = default, ImRect contentRegionRect = default, ImVec2Ih hitTestHoleSize = default, ImVec2Ih hitTestHoleOffset = default, int lastFrameActive = default, int lastFrameJustFocused = default, float lastTimeActive = default, float itemWidthDefault = default, ImGuiStorage stateStorage = default, ImVector<ImGuiOldColumns> columnsStorage = default, float fontWindowScale = default, float fontDpiScale = default, int settingsOffset = default, ImDrawListPtr drawList = default, ImDrawList drawListInst = default, ImGuiWindow* parentWindow = default, ImGuiWindow* parentWindowInBeginStack = default, ImGuiWindow* rootWindow = default, ImGuiWindow* rootWindowPopupTree = default, ImGuiWindow* rootWindowDockTree = default, ImGuiWindow* rootWindowForTitleBarHighlight = default, ImGuiWindow* rootWindowForNav = default, ImGuiWindow* navLastChildNavWindow = default, uint* navLastIds = default, ImRect* navRectRel = default, int memoryDrawListIdxCapacity = default, int memoryDrawListVtxCapacity = default, bool memoryCompacted = default, bool dockIsActive = default, bool dockNodeIsVisible = default, bool dockTabIsVisible = default, bool dockTabWantClose = default, short dockOrder = default, ImGuiWindowDockStyle dockStyle = default, ImGuiDockNode* dockNode = default, ImGuiDockNode* dockNodeAsHost = default, uint dockId = default, ImGuiItemStatusFlags dockTabItemStatusFlags = default, ImRect dockTabItemRect = default, bool inheritNoInputs = default)
		{
			Name = name;
			ID = id;
			Flags = flags;
			FlagsPreviousFrame = flagsPreviousFrame;
			WindowClass = windowClass;
			Viewport = viewport;
			ViewportId = viewportId;
			ViewportPos = viewportPos;
			ViewportAllowPlatformMonitorExtend = viewportAllowPlatformMonitorExtend;
			Pos = pos;
			Size = size;
			SizeFull = sizeFull;
			ContentSize = contentSize;
			ContentSizeIdeal = contentSizeIdeal;
			ContentSizeExplicit = contentSizeExplicit;
			WindowPadding = windowPadding;
			WindowRounding = windowRounding;
			WindowBorderSize = windowBorderSize;
			NameBufLen = nameBufLen;
			MoveId = moveId;
			TabId = tabId;
			ChildId = childId;
			Scroll = scroll;
			ScrollMax = scrollMax;
			ScrollTarget = scrollTarget;
			ScrollTargetCenterRatio = scrollTargetCenterRatio;
			ScrollTargetEdgeSnapDist = scrollTargetEdgeSnapDist;
			ScrollbarSizes = scrollbarSizes;
			ScrollbarX = scrollbarX ? (byte)1 : (byte)0;
			ScrollbarY = scrollbarY ? (byte)1 : (byte)0;
			ViewportOwned = viewportOwned ? (byte)1 : (byte)0;
			Active = active ? (byte)1 : (byte)0;
			WasActive = wasActive ? (byte)1 : (byte)0;
			WriteAccessed = writeAccessed ? (byte)1 : (byte)0;
			Collapsed = collapsed ? (byte)1 : (byte)0;
			WantCollapseToggle = wantCollapseToggle ? (byte)1 : (byte)0;
			SkipItems = skipItems ? (byte)1 : (byte)0;
			Appearing = appearing ? (byte)1 : (byte)0;
			Hidden = hidden ? (byte)1 : (byte)0;
			IsFallbackWindow = isFallbackWindow ? (byte)1 : (byte)0;
			IsExplicitChild = isExplicitChild ? (byte)1 : (byte)0;
			HasCloseButton = hasCloseButton ? (byte)1 : (byte)0;
			ResizeBorderHeld = resizeBorderHeld;
			BeginCount = beginCount;
			BeginOrderWithinParent = beginOrderWithinParent;
			BeginOrderWithinContext = beginOrderWithinContext;
			FocusOrder = focusOrder;
			PopupId = popupId;
			AutoFitFramesX = autoFitFramesX;
			AutoFitFramesY = autoFitFramesY;
			AutoFitChildAxises = autoFitChildAxises;
			AutoFitOnlyGrows = autoFitOnlyGrows ? (byte)1 : (byte)0;
			AutoPosLastDirection = autoPosLastDirection;
			HiddenFramesCanSkipItems = hiddenFramesCanSkipItems;
			HiddenFramesCannotSkipItems = hiddenFramesCannotSkipItems;
			HiddenFramesForRenderOnly = hiddenFramesForRenderOnly;
			DisableInputsFrames = disableInputsFrames;
			SetWindowPosAllowFlags = setWindowPosAllowFlags;
			SetWindowSizeAllowFlags = setWindowSizeAllowFlags;
			SetWindowCollapsedAllowFlags = setWindowCollapsedAllowFlags;
			SetWindowDockAllowFlags = setWindowDockAllowFlags;
			SetWindowPosVal = setWindowPosVal;
			SetWindowPosPivot = setWindowPosPivot;
			IDStack = idStack;
			DC = dc;
			OuterRectClipped = outerRectClipped;
			InnerRect = innerRect;
			InnerClipRect = innerClipRect;
			WorkRect = workRect;
			ParentWorkRect = parentWorkRect;
			ClipRect = clipRect;
			ContentRegionRect = contentRegionRect;
			HitTestHoleSize = hitTestHoleSize;
			HitTestHoleOffset = hitTestHoleOffset;
			LastFrameActive = lastFrameActive;
			LastFrameJustFocused = lastFrameJustFocused;
			LastTimeActive = lastTimeActive;
			ItemWidthDefault = itemWidthDefault;
			StateStorage = stateStorage;
			ColumnsStorage = columnsStorage;
			FontWindowScale = fontWindowScale;
			FontDpiScale = fontDpiScale;
			SettingsOffset = settingsOffset;
			DrawList = drawList;
			DrawListInst = drawListInst;
			ParentWindow = parentWindow;
			ParentWindowInBeginStack = parentWindowInBeginStack;
			RootWindow = rootWindow;
			RootWindowPopupTree = rootWindowPopupTree;
			RootWindowDockTree = rootWindowDockTree;
			RootWindowForTitleBarHighlight = rootWindowForTitleBarHighlight;
			RootWindowForNav = rootWindowForNav;
			NavLastChildNavWindow = navLastChildNavWindow;
			if (navLastIds != default(uint*))
			{
				NavLastIds_0 = navLastIds[0];
				NavLastIds_1 = navLastIds[1];
			}
			if (navRectRel != default(ImRect*))
			{
				NavRectRel_0 = navRectRel[0];
				NavRectRel_1 = navRectRel[1];
			}
			MemoryDrawListIdxCapacity = memoryDrawListIdxCapacity;
			MemoryDrawListVtxCapacity = memoryDrawListVtxCapacity;
			MemoryCompacted = memoryCompacted ? (byte)1 : (byte)0;
			DockIsActive = dockIsActive;
			DockNodeIsVisible = dockNodeIsVisible;
			DockTabIsVisible = dockTabIsVisible;
			DockTabWantClose = dockTabWantClose;
			DockOrder = dockOrder;
			DockStyle = dockStyle;
			DockNode = dockNode;
			DockNodeAsHost = dockNodeAsHost;
			DockId = dockId;
			DockTabItemStatusFlags = dockTabItemStatusFlags;
			DockTabItemRect = dockTabItemRect;
			InheritNoInputs = inheritNoInputs ? (byte)1 : (byte)0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow(byte* name = default, uint id = default, ImGuiWindowFlags flags = default, ImGuiWindowFlags flagsPreviousFrame = default, ImGuiWindowClass windowClass = default, ImGuiViewportP* viewport = default, uint viewportId = default, Vector2 viewportPos = default, int viewportAllowPlatformMonitorExtend = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeFull = default, Vector2 contentSize = default, Vector2 contentSizeIdeal = default, Vector2 contentSizeExplicit = default, Vector2 windowPadding = default, float windowRounding = default, float windowBorderSize = default, int nameBufLen = default, uint moveId = default, uint tabId = default, uint childId = default, Vector2 scroll = default, Vector2 scrollMax = default, Vector2 scrollTarget = default, Vector2 scrollTargetCenterRatio = default, Vector2 scrollTargetEdgeSnapDist = default, Vector2 scrollbarSizes = default, bool scrollbarX = default, bool scrollbarY = default, bool viewportOwned = default, bool active = default, bool wasActive = default, bool writeAccessed = default, bool collapsed = default, bool wantCollapseToggle = default, bool skipItems = default, bool appearing = default, bool hidden = default, bool isFallbackWindow = default, bool isExplicitChild = default, bool hasCloseButton = default, byte resizeBorderHeld = default, short beginCount = default, short beginOrderWithinParent = default, short beginOrderWithinContext = default, short focusOrder = default, uint popupId = default, sbyte autoFitFramesX = default, sbyte autoFitFramesY = default, sbyte autoFitChildAxises = default, bool autoFitOnlyGrows = default, ImGuiDir autoPosLastDirection = default, sbyte hiddenFramesCanSkipItems = default, sbyte hiddenFramesCannotSkipItems = default, sbyte hiddenFramesForRenderOnly = default, sbyte disableInputsFrames = default, ImGuiCond setWindowPosAllowFlags = default, ImGuiCond setWindowSizeAllowFlags = default, ImGuiCond setWindowCollapsedAllowFlags = default, ImGuiCond setWindowDockAllowFlags = default, Vector2 setWindowPosVal = default, Vector2 setWindowPosPivot = default, ImVector<uint> idStack = default, ImGuiWindowTempData dc = default, ImRect outerRectClipped = default, ImRect innerRect = default, ImRect innerClipRect = default, ImRect workRect = default, ImRect parentWorkRect = default, ImRect clipRect = default, ImRect contentRegionRect = default, ImVec2Ih hitTestHoleSize = default, ImVec2Ih hitTestHoleOffset = default, int lastFrameActive = default, int lastFrameJustFocused = default, float lastTimeActive = default, float itemWidthDefault = default, ImGuiStorage stateStorage = default, ImVector<ImGuiOldColumns> columnsStorage = default, float fontWindowScale = default, float fontDpiScale = default, int settingsOffset = default, ImDrawListPtr drawList = default, ImDrawList drawListInst = default, ImGuiWindow* parentWindow = default, ImGuiWindow* parentWindowInBeginStack = default, ImGuiWindow* rootWindow = default, ImGuiWindow* rootWindowPopupTree = default, ImGuiWindow* rootWindowDockTree = default, ImGuiWindow* rootWindowForTitleBarHighlight = default, ImGuiWindow* rootWindowForNav = default, ImGuiWindow* navLastChildNavWindow = default, Span<uint> navLastIds = default, Span<ImRect> navRectRel = default, int memoryDrawListIdxCapacity = default, int memoryDrawListVtxCapacity = default, bool memoryCompacted = default, bool dockIsActive = default, bool dockNodeIsVisible = default, bool dockTabIsVisible = default, bool dockTabWantClose = default, short dockOrder = default, ImGuiWindowDockStyle dockStyle = default, ImGuiDockNode* dockNode = default, ImGuiDockNode* dockNodeAsHost = default, uint dockId = default, ImGuiItemStatusFlags dockTabItemStatusFlags = default, ImRect dockTabItemRect = default, bool inheritNoInputs = default)
		{
			Name = name;
			ID = id;
			Flags = flags;
			FlagsPreviousFrame = flagsPreviousFrame;
			WindowClass = windowClass;
			Viewport = viewport;
			ViewportId = viewportId;
			ViewportPos = viewportPos;
			ViewportAllowPlatformMonitorExtend = viewportAllowPlatformMonitorExtend;
			Pos = pos;
			Size = size;
			SizeFull = sizeFull;
			ContentSize = contentSize;
			ContentSizeIdeal = contentSizeIdeal;
			ContentSizeExplicit = contentSizeExplicit;
			WindowPadding = windowPadding;
			WindowRounding = windowRounding;
			WindowBorderSize = windowBorderSize;
			NameBufLen = nameBufLen;
			MoveId = moveId;
			TabId = tabId;
			ChildId = childId;
			Scroll = scroll;
			ScrollMax = scrollMax;
			ScrollTarget = scrollTarget;
			ScrollTargetCenterRatio = scrollTargetCenterRatio;
			ScrollTargetEdgeSnapDist = scrollTargetEdgeSnapDist;
			ScrollbarSizes = scrollbarSizes;
			ScrollbarX = scrollbarX ? (byte)1 : (byte)0;
			ScrollbarY = scrollbarY ? (byte)1 : (byte)0;
			ViewportOwned = viewportOwned ? (byte)1 : (byte)0;
			Active = active ? (byte)1 : (byte)0;
			WasActive = wasActive ? (byte)1 : (byte)0;
			WriteAccessed = writeAccessed ? (byte)1 : (byte)0;
			Collapsed = collapsed ? (byte)1 : (byte)0;
			WantCollapseToggle = wantCollapseToggle ? (byte)1 : (byte)0;
			SkipItems = skipItems ? (byte)1 : (byte)0;
			Appearing = appearing ? (byte)1 : (byte)0;
			Hidden = hidden ? (byte)1 : (byte)0;
			IsFallbackWindow = isFallbackWindow ? (byte)1 : (byte)0;
			IsExplicitChild = isExplicitChild ? (byte)1 : (byte)0;
			HasCloseButton = hasCloseButton ? (byte)1 : (byte)0;
			ResizeBorderHeld = resizeBorderHeld;
			BeginCount = beginCount;
			BeginOrderWithinParent = beginOrderWithinParent;
			BeginOrderWithinContext = beginOrderWithinContext;
			FocusOrder = focusOrder;
			PopupId = popupId;
			AutoFitFramesX = autoFitFramesX;
			AutoFitFramesY = autoFitFramesY;
			AutoFitChildAxises = autoFitChildAxises;
			AutoFitOnlyGrows = autoFitOnlyGrows ? (byte)1 : (byte)0;
			AutoPosLastDirection = autoPosLastDirection;
			HiddenFramesCanSkipItems = hiddenFramesCanSkipItems;
			HiddenFramesCannotSkipItems = hiddenFramesCannotSkipItems;
			HiddenFramesForRenderOnly = hiddenFramesForRenderOnly;
			DisableInputsFrames = disableInputsFrames;
			SetWindowPosAllowFlags = setWindowPosAllowFlags;
			SetWindowSizeAllowFlags = setWindowSizeAllowFlags;
			SetWindowCollapsedAllowFlags = setWindowCollapsedAllowFlags;
			SetWindowDockAllowFlags = setWindowDockAllowFlags;
			SetWindowPosVal = setWindowPosVal;
			SetWindowPosPivot = setWindowPosPivot;
			IDStack = idStack;
			DC = dc;
			OuterRectClipped = outerRectClipped;
			InnerRect = innerRect;
			InnerClipRect = innerClipRect;
			WorkRect = workRect;
			ParentWorkRect = parentWorkRect;
			ClipRect = clipRect;
			ContentRegionRect = contentRegionRect;
			HitTestHoleSize = hitTestHoleSize;
			HitTestHoleOffset = hitTestHoleOffset;
			LastFrameActive = lastFrameActive;
			LastFrameJustFocused = lastFrameJustFocused;
			LastTimeActive = lastTimeActive;
			ItemWidthDefault = itemWidthDefault;
			StateStorage = stateStorage;
			ColumnsStorage = columnsStorage;
			FontWindowScale = fontWindowScale;
			FontDpiScale = fontDpiScale;
			SettingsOffset = settingsOffset;
			DrawList = drawList;
			DrawListInst = drawListInst;
			ParentWindow = parentWindow;
			ParentWindowInBeginStack = parentWindowInBeginStack;
			RootWindow = rootWindow;
			RootWindowPopupTree = rootWindowPopupTree;
			RootWindowDockTree = rootWindowDockTree;
			RootWindowForTitleBarHighlight = rootWindowForTitleBarHighlight;
			RootWindowForNav = rootWindowForNav;
			NavLastChildNavWindow = navLastChildNavWindow;
			if (navLastIds != default(Span<uint>))
			{
				NavLastIds_0 = navLastIds[0];
				NavLastIds_1 = navLastIds[1];
			}
			if (navRectRel != default(Span<ImRect>))
			{
				NavRectRel_0 = navRectRel[0];
				NavRectRel_1 = navRectRel[1];
			}
			MemoryDrawListIdxCapacity = memoryDrawListIdxCapacity;
			MemoryDrawListVtxCapacity = memoryDrawListVtxCapacity;
			MemoryCompacted = memoryCompacted ? (byte)1 : (byte)0;
			DockIsActive = dockIsActive;
			DockNodeIsVisible = dockNodeIsVisible;
			DockTabIsVisible = dockTabIsVisible;
			DockTabWantClose = dockTabWantClose;
			DockOrder = dockOrder;
			DockStyle = dockStyle;
			DockNode = dockNode;
			DockNodeAsHost = dockNodeAsHost;
			DockId = dockId;
			DockTabItemStatusFlags = dockTabItemStatusFlags;
			DockTabItemRect = dockTabItemRect;
			InheritNoInputs = inheritNoInputs ? (byte)1 : (byte)0;
		}


		public ImGuiCond SetWindowPosAllowFlags { get => Bitfield.Get(RawBits0, 0, 8); set => Bitfield.Set(ref RawBits0, value, 0, 8); }

		public ImGuiCond SetWindowSizeAllowFlags { get => Bitfield.Get(RawBits0, 8, 8); set => Bitfield.Set(ref RawBits0, value, 8, 8); }

		public ImGuiCond SetWindowCollapsedAllowFlags { get => Bitfield.Get(RawBits0, 16, 8); set => Bitfield.Set(ref RawBits0, value, 16, 8); }

		public ImGuiCond SetWindowDockAllowFlags { get => Bitfield.Get(RawBits0, 24, 8); set => Bitfield.Set(ref RawBits0, value, 24, 8); }

		public bool DockIsActive { get => Bitfield.Get(RawBits1, 0, 1); set => Bitfield.Set(ref RawBits1, value, 0, 1); }

		public bool DockNodeIsVisible { get => Bitfield.Get(RawBits1, 1, 1); set => Bitfield.Set(ref RawBits1, value, 1, 1); }

		public bool DockTabIsVisible { get => Bitfield.Get(RawBits1, 2, 1); set => Bitfield.Set(ref RawBits1, value, 2, 1); }

		public bool DockTabWantClose { get => Bitfield.Get(RawBits1, 3, 1); set => Bitfield.Set(ref RawBits1, value, 3, 1); }

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImRect> NavRectRel
		
		{
			get
			{
				fixed (ImRect* p = &this.NavRectRel_0)
				{
					return new Span<ImRect>(p, 2);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiWindowPtr : IEquatable<ImGuiWindowPtr>
	{
		public ImGuiWindowPtr(ImGuiWindow* handle) { Handle = handle; }

		public ImGuiWindow* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiWindowPtr Null => new ImGuiWindowPtr(null);

		public ImGuiWindow this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiWindowPtr(ImGuiWindow* handle) => new ImGuiWindowPtr(handle);

		public static implicit operator ImGuiWindow*(ImGuiWindowPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiWindowPtr left, ImGuiWindowPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiWindowPtr left, ImGuiWindowPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiWindowPtr left, ImGuiWindow* right) => left.Handle == right;

		public static bool operator !=(ImGuiWindowPtr left, ImGuiWindow* right) => left.Handle != right;

		public bool Equals(ImGuiWindowPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiWindowPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiWindowPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* Name { get => Handle->Name; set => Handle->Name = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowFlags Flags => ref Unsafe.AsRef<ImGuiWindowFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowFlags FlagsPreviousFrame => ref Unsafe.AsRef<ImGuiWindowFlags>(&Handle->FlagsPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowClass WindowClass => ref Unsafe.AsRef<ImGuiWindowClass>(&Handle->WindowClass);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr Viewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->Viewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ViewportId => ref Unsafe.AsRef<uint>(&Handle->ViewportId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ViewportPos => ref Unsafe.AsRef<Vector2>(&Handle->ViewportPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ViewportAllowPlatformMonitorExtend => ref Unsafe.AsRef<int>(&Handle->ViewportAllowPlatformMonitorExtend);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Size => ref Unsafe.AsRef<Vector2>(&Handle->Size);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 SizeFull => ref Unsafe.AsRef<Vector2>(&Handle->SizeFull);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ContentSize => ref Unsafe.AsRef<Vector2>(&Handle->ContentSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ContentSizeIdeal => ref Unsafe.AsRef<Vector2>(&Handle->ContentSizeIdeal);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ContentSizeExplicit => ref Unsafe.AsRef<Vector2>(&Handle->ContentSizeExplicit);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WindowPadding => ref Unsafe.AsRef<Vector2>(&Handle->WindowPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WindowRounding => ref Unsafe.AsRef<float>(&Handle->WindowRounding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WindowBorderSize => ref Unsafe.AsRef<float>(&Handle->WindowBorderSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NameBufLen => ref Unsafe.AsRef<int>(&Handle->NameBufLen);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint MoveId => ref Unsafe.AsRef<uint>(&Handle->MoveId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint TabId => ref Unsafe.AsRef<uint>(&Handle->TabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ChildId => ref Unsafe.AsRef<uint>(&Handle->ChildId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Scroll => ref Unsafe.AsRef<Vector2>(&Handle->Scroll);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollMax => ref Unsafe.AsRef<Vector2>(&Handle->ScrollMax);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollTarget => ref Unsafe.AsRef<Vector2>(&Handle->ScrollTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollTargetCenterRatio => ref Unsafe.AsRef<Vector2>(&Handle->ScrollTargetCenterRatio);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollTargetEdgeSnapDist => ref Unsafe.AsRef<Vector2>(&Handle->ScrollTargetEdgeSnapDist);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollbarSizes => ref Unsafe.AsRef<Vector2>(&Handle->ScrollbarSizes);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ScrollbarX => ref Unsafe.AsRef<bool>(&Handle->ScrollbarX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ScrollbarY => ref Unsafe.AsRef<bool>(&Handle->ScrollbarY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ViewportOwned => ref Unsafe.AsRef<bool>(&Handle->ViewportOwned);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Active => ref Unsafe.AsRef<bool>(&Handle->Active);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WasActive => ref Unsafe.AsRef<bool>(&Handle->WasActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WriteAccessed => ref Unsafe.AsRef<bool>(&Handle->WriteAccessed);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Collapsed => ref Unsafe.AsRef<bool>(&Handle->Collapsed);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantCollapseToggle => ref Unsafe.AsRef<bool>(&Handle->WantCollapseToggle);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SkipItems => ref Unsafe.AsRef<bool>(&Handle->SkipItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Appearing => ref Unsafe.AsRef<bool>(&Handle->Appearing);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Hidden => ref Unsafe.AsRef<bool>(&Handle->Hidden);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsFallbackWindow => ref Unsafe.AsRef<bool>(&Handle->IsFallbackWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsExplicitChild => ref Unsafe.AsRef<bool>(&Handle->IsExplicitChild);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HasCloseButton => ref Unsafe.AsRef<bool>(&Handle->HasCloseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte ResizeBorderHeld => ref Unsafe.AsRef<byte>(&Handle->ResizeBorderHeld);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short BeginCount => ref Unsafe.AsRef<short>(&Handle->BeginCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short BeginOrderWithinParent => ref Unsafe.AsRef<short>(&Handle->BeginOrderWithinParent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short BeginOrderWithinContext => ref Unsafe.AsRef<short>(&Handle->BeginOrderWithinContext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short FocusOrder => ref Unsafe.AsRef<short>(&Handle->FocusOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint PopupId => ref Unsafe.AsRef<uint>(&Handle->PopupId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte AutoFitFramesX => ref Unsafe.AsRef<sbyte>(&Handle->AutoFitFramesX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte AutoFitFramesY => ref Unsafe.AsRef<sbyte>(&Handle->AutoFitFramesY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte AutoFitChildAxises => ref Unsafe.AsRef<sbyte>(&Handle->AutoFitChildAxises);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool AutoFitOnlyGrows => ref Unsafe.AsRef<bool>(&Handle->AutoFitOnlyGrows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir AutoPosLastDirection => ref Unsafe.AsRef<ImGuiDir>(&Handle->AutoPosLastDirection);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HiddenFramesCanSkipItems => ref Unsafe.AsRef<sbyte>(&Handle->HiddenFramesCanSkipItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HiddenFramesCannotSkipItems => ref Unsafe.AsRef<sbyte>(&Handle->HiddenFramesCannotSkipItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte HiddenFramesForRenderOnly => ref Unsafe.AsRef<sbyte>(&Handle->HiddenFramesForRenderOnly);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte DisableInputsFrames => ref Unsafe.AsRef<sbyte>(&Handle->DisableInputsFrames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCond SetWindowPosAllowFlags { get => Handle->SetWindowPosAllowFlags; set => Handle->SetWindowPosAllowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCond SetWindowSizeAllowFlags { get => Handle->SetWindowSizeAllowFlags; set => Handle->SetWindowSizeAllowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCond SetWindowCollapsedAllowFlags { get => Handle->SetWindowCollapsedAllowFlags; set => Handle->SetWindowCollapsedAllowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCond SetWindowDockAllowFlags { get => Handle->SetWindowDockAllowFlags; set => Handle->SetWindowDockAllowFlags = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 SetWindowPosVal => ref Unsafe.AsRef<Vector2>(&Handle->SetWindowPosVal);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 SetWindowPosPivot => ref Unsafe.AsRef<Vector2>(&Handle->SetWindowPosPivot);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<uint> IDStack => ref Unsafe.AsRef<ImVector<uint>>(&Handle->IDStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowTempData DC => ref Unsafe.AsRef<ImGuiWindowTempData>(&Handle->DC);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect OuterRectClipped => ref Unsafe.AsRef<ImRect>(&Handle->OuterRectClipped);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect InnerRect => ref Unsafe.AsRef<ImRect>(&Handle->InnerRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect InnerClipRect => ref Unsafe.AsRef<ImRect>(&Handle->InnerClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect WorkRect => ref Unsafe.AsRef<ImRect>(&Handle->WorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect ParentWorkRect => ref Unsafe.AsRef<ImRect>(&Handle->ParentWorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect ClipRect => ref Unsafe.AsRef<ImRect>(&Handle->ClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect ContentRegionRect => ref Unsafe.AsRef<ImRect>(&Handle->ContentRegionRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2Ih HitTestHoleSize => ref Unsafe.AsRef<ImVec2Ih>(&Handle->HitTestHoleSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec2Ih HitTestHoleOffset => ref Unsafe.AsRef<ImVec2Ih>(&Handle->HitTestHoleOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameActive => ref Unsafe.AsRef<int>(&Handle->LastFrameActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameJustFocused => ref Unsafe.AsRef<int>(&Handle->LastFrameJustFocused);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastTimeActive => ref Unsafe.AsRef<float>(&Handle->LastTimeActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ItemWidthDefault => ref Unsafe.AsRef<float>(&Handle->ItemWidthDefault);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStorage StateStorage => ref Unsafe.AsRef<ImGuiStorage>(&Handle->StateStorage);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiOldColumns> ColumnsStorage => ref Unsafe.AsRef<ImVector<ImGuiOldColumns>>(&Handle->ColumnsStorage);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontWindowScale => ref Unsafe.AsRef<float>(&Handle->FontWindowScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontDpiScale => ref Unsafe.AsRef<float>(&Handle->FontDpiScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SettingsOffset => ref Unsafe.AsRef<int>(&Handle->SettingsOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawListPtr DrawList => ref Unsafe.AsRef<ImDrawListPtr>(&Handle->DrawList);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawList DrawListInst => ref Unsafe.AsRef<ImDrawList>(&Handle->DrawListInst);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr ParentWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->ParentWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr ParentWindowInBeginStack => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->ParentWindowInBeginStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr RootWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->RootWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr RootWindowPopupTree => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->RootWindowPopupTree);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr RootWindowDockTree => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->RootWindowDockTree);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr RootWindowForTitleBarHighlight => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->RootWindowForTitleBarHighlight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr RootWindowForNav => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->RootWindowForNav);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavLastChildNavWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavLastChildNavWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<uint> NavLastIds
		
		{
			get
			{
				return new Span<uint>(&Handle->NavLastIds_0, 2);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImRect> NavRectRel
		
		{
			get
			{
				return new Span<ImRect>(&Handle->NavRectRel_0, 2);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MemoryDrawListIdxCapacity => ref Unsafe.AsRef<int>(&Handle->MemoryDrawListIdxCapacity);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MemoryDrawListVtxCapacity => ref Unsafe.AsRef<int>(&Handle->MemoryDrawListVtxCapacity);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool MemoryCompacted => ref Unsafe.AsRef<bool>(&Handle->MemoryCompacted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool DockIsActive { get => Handle->DockIsActive; set => Handle->DockIsActive = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool DockNodeIsVisible { get => Handle->DockNodeIsVisible; set => Handle->DockNodeIsVisible = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool DockTabIsVisible { get => Handle->DockTabIsVisible; set => Handle->DockTabIsVisible = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool DockTabWantClose { get => Handle->DockTabWantClose; set => Handle->DockTabWantClose = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short DockOrder => ref Unsafe.AsRef<short>(&Handle->DockOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowDockStyle DockStyle => ref Unsafe.AsRef<ImGuiWindowDockStyle>(&Handle->DockStyle);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr DockNode => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->DockNode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr DockNodeAsHost => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->DockNodeAsHost);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DockId => ref Unsafe.AsRef<uint>(&Handle->DockId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemStatusFlags DockTabItemStatusFlags => ref Unsafe.AsRef<ImGuiItemStatusFlags>(&Handle->DockTabItemStatusFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect DockTabItemRect => ref Unsafe.AsRef<ImRect>(&Handle->DockTabItemRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool InheritNoInputs => ref Unsafe.AsRef<bool>(&Handle->InheritNoInputs);
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiWindowPtrPtr : IEquatable<ImGuiWindowPtrPtr>
	{
		public ImGuiWindowPtrPtr(ImGuiWindow** handle) { Handle = handle; }

		public ImGuiWindow** Handle;

		public bool IsNull => Handle == null;

		public static ImGuiWindowPtrPtr Null => new ImGuiWindowPtrPtr(null);

		public ImGuiWindow* this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiWindowPtrPtr(ImGuiWindow** handle) => new ImGuiWindowPtrPtr(handle);

		public static implicit operator ImGuiWindow**(ImGuiWindowPtrPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiWindowPtrPtr left, ImGuiWindowPtrPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiWindowPtrPtr left, ImGuiWindowPtrPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiWindowPtrPtr left, ImGuiWindow** right) => left.Handle == right;

		public static bool operator !=(ImGuiWindowPtrPtr left, ImGuiWindow** right) => left.Handle != right;

		public bool Equals(ImGuiWindowPtrPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiWindowPtrPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiWindowPtrPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
