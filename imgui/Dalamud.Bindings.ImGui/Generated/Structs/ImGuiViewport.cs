// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiViewportFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WorkPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WorkSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ParentViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawData* DrawData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* RendererUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* PlatformUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* PlatformHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* PlatformHandleRaw;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PlatformRequestMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PlatformRequestResize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PlatformRequestClose;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewport(uint id = default, ImGuiViewportFlags flags = default, Vector2 pos = default, Vector2 size = default, Vector2 workPos = default, Vector2 workSize = default, float dpiScale = default, uint parentViewportId = default, ImDrawDataPtr drawData = default, void* rendererUserData = default, void* platformUserData = default, void* platformHandle = default, void* platformHandleRaw = default, bool platformRequestMove = default, bool platformRequestResize = default, bool platformRequestClose = default)
		{
			ID = id;
			Flags = flags;
			Pos = pos;
			Size = size;
			WorkPos = workPos;
			WorkSize = workSize;
			DpiScale = dpiScale;
			ParentViewportId = parentViewportId;
			DrawData = drawData;
			RendererUserData = rendererUserData;
			PlatformUserData = platformUserData;
			PlatformHandle = platformHandle;
			PlatformHandleRaw = platformHandleRaw;
			PlatformRequestMove = platformRequestMove ? (byte)1 : (byte)0;
			PlatformRequestResize = platformRequestResize ? (byte)1 : (byte)0;
			PlatformRequestClose = platformRequestClose ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiViewport* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiViewportPtr : IEquatable<ImGuiViewportPtr>
	{
		public ImGuiViewportPtr(ImGuiViewport* handle) { Handle = handle; }

		public ImGuiViewport* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiViewportPtr Null => new ImGuiViewportPtr(null);

		public ImGuiViewport this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiViewportPtr(ImGuiViewport* handle) => new ImGuiViewportPtr(handle);

		public static implicit operator ImGuiViewport*(ImGuiViewportPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiViewportPtr left, ImGuiViewportPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiViewportPtr left, ImGuiViewportPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiViewportPtr left, ImGuiViewport* right) => left.Handle == right;

		public static bool operator !=(ImGuiViewportPtr left, ImGuiViewport* right) => left.Handle != right;

		public bool Equals(ImGuiViewportPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiViewportPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiViewportPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportFlags Flags => ref Unsafe.AsRef<ImGuiViewportFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 Size => ref Unsafe.AsRef<Vector2>(&Handle->Size);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WorkPos => ref Unsafe.AsRef<Vector2>(&Handle->WorkPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WorkSize => ref Unsafe.AsRef<Vector2>(&Handle->WorkSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DpiScale => ref Unsafe.AsRef<float>(&Handle->DpiScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ParentViewportId => ref Unsafe.AsRef<uint>(&Handle->ParentViewportId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawDataPtr DrawData => ref Unsafe.AsRef<ImDrawDataPtr>(&Handle->DrawData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* RendererUserData { get => Handle->RendererUserData; set => Handle->RendererUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* PlatformUserData { get => Handle->PlatformUserData; set => Handle->PlatformUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* PlatformHandle { get => Handle->PlatformHandle; set => Handle->PlatformHandle = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* PlatformHandleRaw { get => Handle->PlatformHandleRaw; set => Handle->PlatformHandleRaw = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PlatformRequestMove => ref Unsafe.AsRef<bool>(&Handle->PlatformRequestMove);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PlatformRequestResize => ref Unsafe.AsRef<bool>(&Handle->PlatformRequestResize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool PlatformRequestClose => ref Unsafe.AsRef<bool>(&Handle->PlatformRequestClose);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiViewportPtrPtr : IEquatable<ImGuiViewportPtrPtr>
	{
		public ImGuiViewportPtrPtr(ImGuiViewport** handle) { Handle = handle; }

		public ImGuiViewport** Handle;

		public bool IsNull => Handle == null;

		public static ImGuiViewportPtrPtr Null => new ImGuiViewportPtrPtr(null);

		public ImGuiViewport* this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiViewportPtrPtr(ImGuiViewport** handle) => new ImGuiViewportPtrPtr(handle);

		public static implicit operator ImGuiViewport**(ImGuiViewportPtrPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiViewportPtrPtr left, ImGuiViewportPtrPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiViewportPtrPtr left, ImGuiViewportPtrPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiViewportPtrPtr left, ImGuiViewport** right) => left.Handle == right;

		public static bool operator !=(ImGuiViewportPtrPtr left, ImGuiViewport** right) => left.Handle != right;

		public bool Equals(ImGuiViewportPtrPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiViewportPtrPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiViewportPtrPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
