// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableTempData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int TableIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 UserOuterSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawListSplitter DrawSplitter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect HostBackupWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect HostBackupParentWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 HostBackupPrevLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 HostBackupCurrLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 HostBackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec1 HostBackupColumnsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HostBackupItemWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int HostBackupItemWidthStackSize;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTableTempData(int tableIndex = default, float lastTimeActive = default, Vector2 userOuterSize = default, ImDrawListSplitter drawSplitter = default, ImRect hostBackupWorkRect = default, ImRect hostBackupParentWorkRect = default, Vector2 hostBackupPrevLineSize = default, Vector2 hostBackupCurrLineSize = default, Vector2 hostBackupCursorMaxPos = default, ImVec1 hostBackupColumnsOffset = default, float hostBackupItemWidth = default, int hostBackupItemWidthStackSize = default)
		{
			TableIndex = tableIndex;
			LastTimeActive = lastTimeActive;
			UserOuterSize = userOuterSize;
			DrawSplitter = drawSplitter;
			HostBackupWorkRect = hostBackupWorkRect;
			HostBackupParentWorkRect = hostBackupParentWorkRect;
			HostBackupPrevLineSize = hostBackupPrevLineSize;
			HostBackupCurrLineSize = hostBackupCurrLineSize;
			HostBackupCursorMaxPos = hostBackupCursorMaxPos;
			HostBackupColumnsOffset = hostBackupColumnsOffset;
			HostBackupItemWidth = hostBackupItemWidth;
			HostBackupItemWidthStackSize = hostBackupItemWidthStackSize;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiTableTempData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTableTempDataPtr : IEquatable<ImGuiTableTempDataPtr>
	{
		public ImGuiTableTempDataPtr(ImGuiTableTempData* handle) { Handle = handle; }

		public ImGuiTableTempData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTableTempDataPtr Null => new ImGuiTableTempDataPtr(null);

		public ImGuiTableTempData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTableTempDataPtr(ImGuiTableTempData* handle) => new ImGuiTableTempDataPtr(handle);

		public static implicit operator ImGuiTableTempData*(ImGuiTableTempDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTableTempDataPtr left, ImGuiTableTempDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTableTempDataPtr left, ImGuiTableTempDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTableTempDataPtr left, ImGuiTableTempData* right) => left.Handle == right;

		public static bool operator !=(ImGuiTableTempDataPtr left, ImGuiTableTempData* right) => left.Handle != right;

		public bool Equals(ImGuiTableTempDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTableTempDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTableTempDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int TableIndex => ref Unsafe.AsRef<int>(&Handle->TableIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastTimeActive => ref Unsafe.AsRef<float>(&Handle->LastTimeActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 UserOuterSize => ref Unsafe.AsRef<Vector2>(&Handle->UserOuterSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawListSplitter DrawSplitter => ref Unsafe.AsRef<ImDrawListSplitter>(&Handle->DrawSplitter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect HostBackupWorkRect => ref Unsafe.AsRef<ImRect>(&Handle->HostBackupWorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect HostBackupParentWorkRect => ref Unsafe.AsRef<ImRect>(&Handle->HostBackupParentWorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 HostBackupPrevLineSize => ref Unsafe.AsRef<Vector2>(&Handle->HostBackupPrevLineSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 HostBackupCurrLineSize => ref Unsafe.AsRef<Vector2>(&Handle->HostBackupCurrLineSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 HostBackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&Handle->HostBackupCursorMaxPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVec1 HostBackupColumnsOffset => ref Unsafe.AsRef<ImVec1>(&Handle->HostBackupColumnsOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HostBackupItemWidth => ref Unsafe.AsRef<float>(&Handle->HostBackupItemWidth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int HostBackupItemWidthStackSize => ref Unsafe.AsRef<int>(&Handle->HostBackupItemWidthStackSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
