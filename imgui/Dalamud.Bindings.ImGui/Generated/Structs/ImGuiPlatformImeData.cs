// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformImeData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 InputPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float InputLineHeight;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiPlatformImeData(bool wantVisible = default, Vector2 inputPos = default, float inputLineHeight = default)
		{
			WantVisible = wantVisible ? (byte)1 : (byte)0;
			InputPos = inputPos;
			InputLineHeight = inputLineHeight;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformImeData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiPlatformImeDataPtr : IEquatable<ImGuiPlatformImeDataPtr>
	{
		public ImGuiPlatformImeDataPtr(ImGuiPlatformImeData* handle) { Handle = handle; }

		public ImGuiPlatformImeData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiPlatformImeDataPtr Null => new ImGuiPlatformImeDataPtr(null);

		public ImGuiPlatformImeData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiPlatformImeDataPtr(ImGuiPlatformImeData* handle) => new ImGuiPlatformImeDataPtr(handle);

		public static implicit operator ImGuiPlatformImeData*(ImGuiPlatformImeDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiPlatformImeDataPtr left, ImGuiPlatformImeDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiPlatformImeDataPtr left, ImGuiPlatformImeDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiPlatformImeDataPtr left, ImGuiPlatformImeData* right) => left.Handle == right;

		public static bool operator !=(ImGuiPlatformImeDataPtr left, ImGuiPlatformImeData* right) => left.Handle != right;

		public bool Equals(ImGuiPlatformImeDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiPlatformImeDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiPlatformImeDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantVisible => ref Unsafe.AsRef<bool>(&Handle->WantVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 InputPos => ref Unsafe.AsRef<Vector2>(&Handle->InputPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float InputLineHeight => ref Unsafe.AsRef<float>(&Handle->InputLineHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
