// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontKerningPair
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort Left;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort Right;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float AdvanceXAdjustment;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontKerningPair(ushort left = default, ushort right = default, float advanceXAdjustment = default)
		{
			Left = left;
			Right = right;
			AdvanceXAdjustment = advanceXAdjustment;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontKerningPairPtr : IEquatable<ImFontKerningPairPtr>
	{
		public ImFontKerningPairPtr(ImFontKerningPair* handle) { Handle = handle; }

		public ImFontKerningPair* Handle;

		public bool IsNull => Handle == null;

		public static ImFontKerningPairPtr Null => new ImFontKerningPairPtr(null);

		public ImFontKerningPair this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontKerningPairPtr(ImFontKerningPair* handle) => new ImFontKerningPairPtr(handle);

		public static implicit operator ImFontKerningPair*(ImFontKerningPairPtr handle) => handle.Handle;

		public static bool operator ==(ImFontKerningPairPtr left, ImFontKerningPairPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontKerningPairPtr left, ImFontKerningPairPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontKerningPairPtr left, ImFontKerningPair* right) => left.Handle == right;

		public static bool operator !=(ImFontKerningPairPtr left, ImFontKerningPair* right) => left.Handle != right;

		public bool Equals(ImFontKerningPairPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontKerningPairPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontKerningPairPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort Left => ref Unsafe.AsRef<ushort>(&Handle->Left);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort Right => ref Unsafe.AsRef<ushort>(&Handle->Right);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float AdvanceXAdjustment => ref Unsafe.AsRef<float>(&Handle->AdvanceXAdjustment);
	}

}
