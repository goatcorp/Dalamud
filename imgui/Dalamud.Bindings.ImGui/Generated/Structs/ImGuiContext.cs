// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Initialized;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte FontAtlasOwnedByContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiIO IO;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformIO PlatformIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiInputEvent> InputEventsQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiInputEvent> InputEventsTrail;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStyle Style;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiConfigFlags ConfigFlagsCurrFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiConfigFlags ConfigFlagsLastFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontBaseSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawListSharedData DrawListSharedData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Time;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountPlatformEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountRendered;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WithinFrameScope;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WithinFrameScopeWithImplicitWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WithinEndChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte GcCompactAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte TestEngineHookItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* TestEngine;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> WindowsFocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> WindowsTempSortBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowStackData> CurrentWindowStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStorage WindowsById;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WindowsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WindowsHoverPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* CurrentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HoveredWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HoveredWindowUnderMovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* HoveredDockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* MovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* WheelingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WheelingWindowRefMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WheelingWindowTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugHookIdInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoveredId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoveredIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdUsingMouseWheel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdPreviousFrameUsingMouseWheel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdDisabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoveredIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoveredIdNotActiveTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdIsJustActivated;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdNoClearOnFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenPressedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenEditedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ActiveIdClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* ActiveIdWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputSource ActiveIdSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ActiveIdMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdPreviousFrameIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdPreviousFrameHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* ActiveIdPreviousFrameWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint LastActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdUsingMouseWheel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdUsingNavDirMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdUsingNavInputMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint ActiveIdUsingKeyInputMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemFlags CurrentItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNextItemData NextItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLastItemData LastItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNextWindowData NextWindowData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiColorMod> ColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiStyleMod> StyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImFontPtr> FontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<uint> FocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiItemFlags> ItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiGroupData> GroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPopupData> OpenPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPopupData> BeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BeginMenuCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiViewportPPtr> Viewports;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CurrentDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* CurrentViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* MouseViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* MouseLastHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PlatformLastFocusedViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformMonitor FallbackMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ViewportFrontMostStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivateDownId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivatePressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivateInputId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiActivateFlags NavActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavJustMovedToId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavJustMovedToFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiModFlags NavJustMovedToKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavNextActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiActivateFlags NavNextActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputSource NavInputSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavLayer NavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMousePosDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavDisableHighlight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavDisableMouseHover;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavAnyRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavInitRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavInitRequestFromMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavInitResultId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavInitResultRectRel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveScoringItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveForwardToNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavMoveFlags NavMoveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiScrollFlags NavMoveScrollFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiModFlags NavMoveKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveDirForDebug;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveClipDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavScoringRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavScoringNoClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavScoringDebugCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavTabbingDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavTabbingCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultLocal;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultLocalVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultOther;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavTabbingResultFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingTargetAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingListWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float NavWindowingTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float NavWindowingHighlightAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavWindowingToggleLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DimBgRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseCursor MouseCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropWithinSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropWithinTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDragDropFlags DragDropSourceFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropSourceFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPayload DragDropPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect DragDropTargetRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropTargetId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDragDropFlags DragDropAcceptFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragDropAcceptIdCurrRectSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropAcceptIdCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropAcceptIdPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropAcceptFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropHoldJustPressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> DragDropPayloadBufHeap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropPayloadBufLocal_0;
		public byte DragDropPayloadBufLocal_1;
		public byte DragDropPayloadBufLocal_2;
		public byte DragDropPayloadBufLocal_3;
		public byte DragDropPayloadBufLocal_4;
		public byte DragDropPayloadBufLocal_5;
		public byte DragDropPayloadBufLocal_6;
		public byte DragDropPayloadBufLocal_7;
		public byte DragDropPayloadBufLocal_8;
		public byte DragDropPayloadBufLocal_9;
		public byte DragDropPayloadBufLocal_10;
		public byte DragDropPayloadBufLocal_11;
		public byte DragDropPayloadBufLocal_12;
		public byte DragDropPayloadBufLocal_13;
		public byte DragDropPayloadBufLocal_14;
		public byte DragDropPayloadBufLocal_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ClipperTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiListClipperData> ClipperTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTable* CurrentTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int TablesTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTableTempData> TablesTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImGuiTable Tables;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<float> TablesLastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImDrawChannel> DrawChannelsTempMergeBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTabBar* CurrentTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImGuiTabBar TabBars;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPtrOrIndex> CurrentTabBarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiShrinkWidthItem> ShrinkWidthBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MouseLastValidPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputTextState InputTextState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImFont InputTextPasswordFont;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TempInputId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiColorEditFlags ColorEditOptions;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColorEditLastHue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColorEditLastSat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorEditLastColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector4 ColorPickerRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiComboPreviewData ComboPreviewData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SliderGrabClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SliderCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SliderCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragSpeedDefaultRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollbarClickDeltaToGrabCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DisabledAlphaBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short DisabledStackSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short TooltipOverrideCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float TooltipSlowDelay;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> ClipboardHandlerData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<uint> MenusIdSubmittedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformImeData PlatformImeData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformImeData PlatformImeDataPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PlatformImeViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte PlatformLocaleDecimalPoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockContext DockContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SettingsLoaded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SettingsDirtyTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer SettingsIniData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiSettingsHandler> SettingsHandlers;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImChunkStreamImGuiWindowSettings SettingsWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImChunkStreamImGuiTableSettings SettingsTables;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiContextHook> Hooks;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HookIdNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LogEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLogType LogType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImFileHandle LogFile;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer LogBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LogNextPrefix;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LogNextSuffix;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LogLinePosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LogLineFirstItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthToExpand;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthToExpandDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDebugLogFlags DebugLogFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer DebugLogBuf;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugItemPickerActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugItemPickerBreakId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMetricsConfig DebugMetricsConfig;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStackTool DebugStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FramerateSecPerFrame_0;
		public float FramerateSecPerFrame_1;
		public float FramerateSecPerFrame_2;
		public float FramerateSecPerFrame_3;
		public float FramerateSecPerFrame_4;
		public float FramerateSecPerFrame_5;
		public float FramerateSecPerFrame_6;
		public float FramerateSecPerFrame_7;
		public float FramerateSecPerFrame_8;
		public float FramerateSecPerFrame_9;
		public float FramerateSecPerFrame_10;
		public float FramerateSecPerFrame_11;
		public float FramerateSecPerFrame_12;
		public float FramerateSecPerFrame_13;
		public float FramerateSecPerFrame_14;
		public float FramerateSecPerFrame_15;
		public float FramerateSecPerFrame_16;
		public float FramerateSecPerFrame_17;
		public float FramerateSecPerFrame_18;
		public float FramerateSecPerFrame_19;
		public float FramerateSecPerFrame_20;
		public float FramerateSecPerFrame_21;
		public float FramerateSecPerFrame_22;
		public float FramerateSecPerFrame_23;
		public float FramerateSecPerFrame_24;
		public float FramerateSecPerFrame_25;
		public float FramerateSecPerFrame_26;
		public float FramerateSecPerFrame_27;
		public float FramerateSecPerFrame_28;
		public float FramerateSecPerFrame_29;
		public float FramerateSecPerFrame_30;
		public float FramerateSecPerFrame_31;
		public float FramerateSecPerFrame_32;
		public float FramerateSecPerFrame_33;
		public float FramerateSecPerFrame_34;
		public float FramerateSecPerFrame_35;
		public float FramerateSecPerFrame_36;
		public float FramerateSecPerFrame_37;
		public float FramerateSecPerFrame_38;
		public float FramerateSecPerFrame_39;
		public float FramerateSecPerFrame_40;
		public float FramerateSecPerFrame_41;
		public float FramerateSecPerFrame_42;
		public float FramerateSecPerFrame_43;
		public float FramerateSecPerFrame_44;
		public float FramerateSecPerFrame_45;
		public float FramerateSecPerFrame_46;
		public float FramerateSecPerFrame_47;
		public float FramerateSecPerFrame_48;
		public float FramerateSecPerFrame_49;
		public float FramerateSecPerFrame_50;
		public float FramerateSecPerFrame_51;
		public float FramerateSecPerFrame_52;
		public float FramerateSecPerFrame_53;
		public float FramerateSecPerFrame_54;
		public float FramerateSecPerFrame_55;
		public float FramerateSecPerFrame_56;
		public float FramerateSecPerFrame_57;
		public float FramerateSecPerFrame_58;
		public float FramerateSecPerFrame_59;
		public float FramerateSecPerFrame_60;
		public float FramerateSecPerFrame_61;
		public float FramerateSecPerFrame_62;
		public float FramerateSecPerFrame_63;
		public float FramerateSecPerFrame_64;
		public float FramerateSecPerFrame_65;
		public float FramerateSecPerFrame_66;
		public float FramerateSecPerFrame_67;
		public float FramerateSecPerFrame_68;
		public float FramerateSecPerFrame_69;
		public float FramerateSecPerFrame_70;
		public float FramerateSecPerFrame_71;
		public float FramerateSecPerFrame_72;
		public float FramerateSecPerFrame_73;
		public float FramerateSecPerFrame_74;
		public float FramerateSecPerFrame_75;
		public float FramerateSecPerFrame_76;
		public float FramerateSecPerFrame_77;
		public float FramerateSecPerFrame_78;
		public float FramerateSecPerFrame_79;
		public float FramerateSecPerFrame_80;
		public float FramerateSecPerFrame_81;
		public float FramerateSecPerFrame_82;
		public float FramerateSecPerFrame_83;
		public float FramerateSecPerFrame_84;
		public float FramerateSecPerFrame_85;
		public float FramerateSecPerFrame_86;
		public float FramerateSecPerFrame_87;
		public float FramerateSecPerFrame_88;
		public float FramerateSecPerFrame_89;
		public float FramerateSecPerFrame_90;
		public float FramerateSecPerFrame_91;
		public float FramerateSecPerFrame_92;
		public float FramerateSecPerFrame_93;
		public float FramerateSecPerFrame_94;
		public float FramerateSecPerFrame_95;
		public float FramerateSecPerFrame_96;
		public float FramerateSecPerFrame_97;
		public float FramerateSecPerFrame_98;
		public float FramerateSecPerFrame_99;
		public float FramerateSecPerFrame_100;
		public float FramerateSecPerFrame_101;
		public float FramerateSecPerFrame_102;
		public float FramerateSecPerFrame_103;
		public float FramerateSecPerFrame_104;
		public float FramerateSecPerFrame_105;
		public float FramerateSecPerFrame_106;
		public float FramerateSecPerFrame_107;
		public float FramerateSecPerFrame_108;
		public float FramerateSecPerFrame_109;
		public float FramerateSecPerFrame_110;
		public float FramerateSecPerFrame_111;
		public float FramerateSecPerFrame_112;
		public float FramerateSecPerFrame_113;
		public float FramerateSecPerFrame_114;
		public float FramerateSecPerFrame_115;
		public float FramerateSecPerFrame_116;
		public float FramerateSecPerFrame_117;
		public float FramerateSecPerFrame_118;
		public float FramerateSecPerFrame_119;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FramerateSecPerFrameIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FramerateSecPerFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FramerateSecPerFrameAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantCaptureMouseNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantCaptureKeyboardNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantTextInputNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> TempBuffer;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, bool fontAtlasOwnedByContext = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImVector<ImGuiInputEvent> inputEventsQueue = default, ImVector<ImGuiInputEvent> inputEventsTrail = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImFontPtr font = default, float fontSize = default, float fontBaseSize = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool withinEndChild = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, ImVector<ImGuiWindowPtr> windows = default, ImVector<ImGuiWindowPtr> windowsFocusOrder = default, ImVector<ImGuiWindowPtr> windowsTempSortBuffer = default, ImVector<ImGuiWindowStackData> currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, Vector2 windowsHoverPadding = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiDockNode* hoveredDockNode = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, float wheelingWindowTimer = default, uint debugHookIdInfo = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, bool hoveredIdAllowOverlap = default, bool hoveredIdUsingMouseWheel = default, bool hoveredIdPreviousFrameUsingMouseWheel = default, bool hoveredIdDisabled = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, int activeIdMouseButton = default, uint activeIdPreviousFrame = default, bool activeIdPreviousFrameIsAlive = default, bool activeIdPreviousFrameHasBeenEditedBefore = default, ImGuiWindow* activeIdPreviousFrameWindow = default, uint lastActiveId = default, float lastActiveIdTimer = default, bool activeIdUsingMouseWheel = default, uint activeIdUsingNavDirMask = default, uint activeIdUsingNavInputMask = default, nuint activeIdUsingKeyInputMask = default, ImGuiItemFlags currentItemFlags = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, ImVector<ImGuiColorMod> colorStack = default, ImVector<ImGuiStyleMod> styleVarStack = default, ImVector<ImFontPtr> fontStack = default, ImVector<uint> focusScopeStack = default, ImVector<ImGuiItemFlags> itemFlagsStack = default, ImVector<ImGuiGroupData> groupStack = default, ImVector<ImGuiPopupData> openPopupStack = default, ImVector<ImGuiPopupData> beginPopupStack = default, int beginMenuCount = default, ImVector<ImGuiViewportPPtr> viewports = default, float currentDpiScale = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, int viewportFrontMostStampCount = default, ImGuiWindow* navWindow = default, uint navId = default, uint navFocusScopeId = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, uint navActivateInputId = default, ImGuiActivateFlags navActivateFlags = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, ImGuiModFlags navJustMovedToKeyMods = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, ImGuiNavLayer navLayer = default, bool navIdIsAlive = default, bool navMousePosDirty = default, bool navDisableHighlight = default, bool navDisableMouseHover = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, uint navInitResultId = default, ImRect navInitResultRectRel = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, ImGuiModFlags navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, bool navWindowingToggleLayer = default, float dimBgRatio = default, ImGuiMouseCursor mouseCursor = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVector<byte> dragDropPayloadBufHeap = default, byte* dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVector<ImGuiListClipperData> clipperTempData = default, ImGuiTable* currentTable = default, int tablesTempDataStacked = default, ImVector<ImGuiTableTempData> tablesTempData = default, ImPoolImGuiTable tables = default, ImVector<float> tablesLastTimeActive = default, ImVector<ImDrawChannel> drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVector<ImGuiPtrOrIndex> currentTabBarStack = default, ImVector<ImGuiShrinkWidthItem> shrinkWidthBuffer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImFont inputTextPasswordFont = default, uint tempInputId = default, ImGuiColorEditFlags colorEditOptions = default, float colorEditLastHue = default, float colorEditLastSat = default, uint colorEditLastColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float scrollbarClickDeltaToGrabCenter = default, float disabledAlphaBackup = default, short disabledStackSize = default, short tooltipOverrideCount = default, float tooltipSlowDelay = default, ImVector<byte> clipboardHandlerData = default, ImVector<uint> menusIdSubmittedThisFrame = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, uint platformImeViewport = default, byte platformLocaleDecimalPoint = default, ImGuiDockContext dockContext = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVector<ImGuiSettingsHandler> settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVector<ImGuiContextHook> hooks = default, uint hookIdNext = default, bool logEnabled = default, ImGuiLogType logType = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, bool debugItemPickerActive = default, uint debugItemPickerBreakId = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiStackTool debugStackTool = default, float* framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVector<byte> tempBuffer = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			FontAtlasOwnedByContext = fontAtlasOwnedByContext ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			Font = font;
			FontSize = fontSize;
			FontBaseSize = fontBaseSize;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			WithinEndChild = withinEndChild ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsHoverPadding = windowsHoverPadding;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredDockNode = hoveredDockNode;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowTimer = wheelingWindowTimer;
			DebugHookIdInfo = debugHookIdInfo;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdUsingMouseWheel = hoveredIdUsingMouseWheel ? (byte)1 : (byte)0;
			HoveredIdPreviousFrameUsingMouseWheel = hoveredIdPreviousFrameUsingMouseWheel ? (byte)1 : (byte)0;
			HoveredIdDisabled = hoveredIdDisabled ? (byte)1 : (byte)0;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			ActiveIdPreviousFrameIsAlive = activeIdPreviousFrameIsAlive ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameHasBeenEditedBefore = activeIdPreviousFrameHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameWindow = activeIdPreviousFrameWindow;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			ActiveIdUsingMouseWheel = activeIdUsingMouseWheel ? (byte)1 : (byte)0;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingNavInputMask = activeIdUsingNavInputMask;
			ActiveIdUsingKeyInputMask = activeIdUsingKeyInputMask;
			CurrentItemFlags = currentItemFlags;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			BeginMenuCount = beginMenuCount;
			Viewports = viewports;
			CurrentDpiScale = currentDpiScale;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			ViewportFrontMostStampCount = viewportFrontMostStampCount;
			NavWindow = navWindow;
			NavId = navId;
			NavFocusScopeId = navFocusScopeId;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateInputId = navActivateInputId;
			NavActivateFlags = navActivateFlags;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLayer = navLayer;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavDisableHighlight = navDisableHighlight ? (byte)1 : (byte)0;
			NavDisableMouseHover = navDisableMouseHover ? (byte)1 : (byte)0;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResultId = navInitResultId;
			NavInitResultRectRel = navInitResultRectRel;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			DimBgRatio = dimBgRatio;
			MouseCursor = mouseCursor;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(byte*))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextPasswordFont = inputTextPasswordFont;
			TempInputId = tempInputId;
			ColorEditOptions = colorEditOptions;
			ColorEditLastHue = colorEditLastHue;
			ColorEditLastSat = colorEditLastSat;
			ColorEditLastColor = colorEditLastColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			TooltipOverrideCount = tooltipOverrideCount;
			TooltipSlowDelay = tooltipSlowDelay;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			PlatformImeViewport = platformImeViewport;
			PlatformLocaleDecimalPoint = platformLocaleDecimalPoint;
			DockContext = dockContext;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogType = logType;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugMetricsConfig = debugMetricsConfig;
			DebugStackTool = debugStackTool;
			if (framerateSecPerFrame != default(float*))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
				FramerateSecPerFrame_60 = framerateSecPerFrame[60];
				FramerateSecPerFrame_61 = framerateSecPerFrame[61];
				FramerateSecPerFrame_62 = framerateSecPerFrame[62];
				FramerateSecPerFrame_63 = framerateSecPerFrame[63];
				FramerateSecPerFrame_64 = framerateSecPerFrame[64];
				FramerateSecPerFrame_65 = framerateSecPerFrame[65];
				FramerateSecPerFrame_66 = framerateSecPerFrame[66];
				FramerateSecPerFrame_67 = framerateSecPerFrame[67];
				FramerateSecPerFrame_68 = framerateSecPerFrame[68];
				FramerateSecPerFrame_69 = framerateSecPerFrame[69];
				FramerateSecPerFrame_70 = framerateSecPerFrame[70];
				FramerateSecPerFrame_71 = framerateSecPerFrame[71];
				FramerateSecPerFrame_72 = framerateSecPerFrame[72];
				FramerateSecPerFrame_73 = framerateSecPerFrame[73];
				FramerateSecPerFrame_74 = framerateSecPerFrame[74];
				FramerateSecPerFrame_75 = framerateSecPerFrame[75];
				FramerateSecPerFrame_76 = framerateSecPerFrame[76];
				FramerateSecPerFrame_77 = framerateSecPerFrame[77];
				FramerateSecPerFrame_78 = framerateSecPerFrame[78];
				FramerateSecPerFrame_79 = framerateSecPerFrame[79];
				FramerateSecPerFrame_80 = framerateSecPerFrame[80];
				FramerateSecPerFrame_81 = framerateSecPerFrame[81];
				FramerateSecPerFrame_82 = framerateSecPerFrame[82];
				FramerateSecPerFrame_83 = framerateSecPerFrame[83];
				FramerateSecPerFrame_84 = framerateSecPerFrame[84];
				FramerateSecPerFrame_85 = framerateSecPerFrame[85];
				FramerateSecPerFrame_86 = framerateSecPerFrame[86];
				FramerateSecPerFrame_87 = framerateSecPerFrame[87];
				FramerateSecPerFrame_88 = framerateSecPerFrame[88];
				FramerateSecPerFrame_89 = framerateSecPerFrame[89];
				FramerateSecPerFrame_90 = framerateSecPerFrame[90];
				FramerateSecPerFrame_91 = framerateSecPerFrame[91];
				FramerateSecPerFrame_92 = framerateSecPerFrame[92];
				FramerateSecPerFrame_93 = framerateSecPerFrame[93];
				FramerateSecPerFrame_94 = framerateSecPerFrame[94];
				FramerateSecPerFrame_95 = framerateSecPerFrame[95];
				FramerateSecPerFrame_96 = framerateSecPerFrame[96];
				FramerateSecPerFrame_97 = framerateSecPerFrame[97];
				FramerateSecPerFrame_98 = framerateSecPerFrame[98];
				FramerateSecPerFrame_99 = framerateSecPerFrame[99];
				FramerateSecPerFrame_100 = framerateSecPerFrame[100];
				FramerateSecPerFrame_101 = framerateSecPerFrame[101];
				FramerateSecPerFrame_102 = framerateSecPerFrame[102];
				FramerateSecPerFrame_103 = framerateSecPerFrame[103];
				FramerateSecPerFrame_104 = framerateSecPerFrame[104];
				FramerateSecPerFrame_105 = framerateSecPerFrame[105];
				FramerateSecPerFrame_106 = framerateSecPerFrame[106];
				FramerateSecPerFrame_107 = framerateSecPerFrame[107];
				FramerateSecPerFrame_108 = framerateSecPerFrame[108];
				FramerateSecPerFrame_109 = framerateSecPerFrame[109];
				FramerateSecPerFrame_110 = framerateSecPerFrame[110];
				FramerateSecPerFrame_111 = framerateSecPerFrame[111];
				FramerateSecPerFrame_112 = framerateSecPerFrame[112];
				FramerateSecPerFrame_113 = framerateSecPerFrame[113];
				FramerateSecPerFrame_114 = framerateSecPerFrame[114];
				FramerateSecPerFrame_115 = framerateSecPerFrame[115];
				FramerateSecPerFrame_116 = framerateSecPerFrame[116];
				FramerateSecPerFrame_117 = framerateSecPerFrame[117];
				FramerateSecPerFrame_118 = framerateSecPerFrame[118];
				FramerateSecPerFrame_119 = framerateSecPerFrame[119];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, bool fontAtlasOwnedByContext = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImVector<ImGuiInputEvent> inputEventsQueue = default, ImVector<ImGuiInputEvent> inputEventsTrail = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImFontPtr font = default, float fontSize = default, float fontBaseSize = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool withinEndChild = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, ImVector<ImGuiWindowPtr> windows = default, ImVector<ImGuiWindowPtr> windowsFocusOrder = default, ImVector<ImGuiWindowPtr> windowsTempSortBuffer = default, ImVector<ImGuiWindowStackData> currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, Vector2 windowsHoverPadding = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiDockNode* hoveredDockNode = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, float wheelingWindowTimer = default, uint debugHookIdInfo = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, bool hoveredIdAllowOverlap = default, bool hoveredIdUsingMouseWheel = default, bool hoveredIdPreviousFrameUsingMouseWheel = default, bool hoveredIdDisabled = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, int activeIdMouseButton = default, uint activeIdPreviousFrame = default, bool activeIdPreviousFrameIsAlive = default, bool activeIdPreviousFrameHasBeenEditedBefore = default, ImGuiWindow* activeIdPreviousFrameWindow = default, uint lastActiveId = default, float lastActiveIdTimer = default, bool activeIdUsingMouseWheel = default, uint activeIdUsingNavDirMask = default, uint activeIdUsingNavInputMask = default, nuint activeIdUsingKeyInputMask = default, ImGuiItemFlags currentItemFlags = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, ImVector<ImGuiColorMod> colorStack = default, ImVector<ImGuiStyleMod> styleVarStack = default, ImVector<ImFontPtr> fontStack = default, ImVector<uint> focusScopeStack = default, ImVector<ImGuiItemFlags> itemFlagsStack = default, ImVector<ImGuiGroupData> groupStack = default, ImVector<ImGuiPopupData> openPopupStack = default, ImVector<ImGuiPopupData> beginPopupStack = default, int beginMenuCount = default, ImVector<ImGuiViewportPPtr> viewports = default, float currentDpiScale = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, int viewportFrontMostStampCount = default, ImGuiWindow* navWindow = default, uint navId = default, uint navFocusScopeId = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, uint navActivateInputId = default, ImGuiActivateFlags navActivateFlags = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, ImGuiModFlags navJustMovedToKeyMods = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, ImGuiNavLayer navLayer = default, bool navIdIsAlive = default, bool navMousePosDirty = default, bool navDisableHighlight = default, bool navDisableMouseHover = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, uint navInitResultId = default, ImRect navInitResultRectRel = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, ImGuiModFlags navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, bool navWindowingToggleLayer = default, float dimBgRatio = default, ImGuiMouseCursor mouseCursor = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVector<byte> dragDropPayloadBufHeap = default, Span<byte> dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVector<ImGuiListClipperData> clipperTempData = default, ImGuiTable* currentTable = default, int tablesTempDataStacked = default, ImVector<ImGuiTableTempData> tablesTempData = default, ImPoolImGuiTable tables = default, ImVector<float> tablesLastTimeActive = default, ImVector<ImDrawChannel> drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVector<ImGuiPtrOrIndex> currentTabBarStack = default, ImVector<ImGuiShrinkWidthItem> shrinkWidthBuffer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImFont inputTextPasswordFont = default, uint tempInputId = default, ImGuiColorEditFlags colorEditOptions = default, float colorEditLastHue = default, float colorEditLastSat = default, uint colorEditLastColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float scrollbarClickDeltaToGrabCenter = default, float disabledAlphaBackup = default, short disabledStackSize = default, short tooltipOverrideCount = default, float tooltipSlowDelay = default, ImVector<byte> clipboardHandlerData = default, ImVector<uint> menusIdSubmittedThisFrame = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, uint platformImeViewport = default, byte platformLocaleDecimalPoint = default, ImGuiDockContext dockContext = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVector<ImGuiSettingsHandler> settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVector<ImGuiContextHook> hooks = default, uint hookIdNext = default, bool logEnabled = default, ImGuiLogType logType = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, bool debugItemPickerActive = default, uint debugItemPickerBreakId = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiStackTool debugStackTool = default, Span<float> framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVector<byte> tempBuffer = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			FontAtlasOwnedByContext = fontAtlasOwnedByContext ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			Font = font;
			FontSize = fontSize;
			FontBaseSize = fontBaseSize;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			WithinEndChild = withinEndChild ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsHoverPadding = windowsHoverPadding;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredDockNode = hoveredDockNode;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowTimer = wheelingWindowTimer;
			DebugHookIdInfo = debugHookIdInfo;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdUsingMouseWheel = hoveredIdUsingMouseWheel ? (byte)1 : (byte)0;
			HoveredIdPreviousFrameUsingMouseWheel = hoveredIdPreviousFrameUsingMouseWheel ? (byte)1 : (byte)0;
			HoveredIdDisabled = hoveredIdDisabled ? (byte)1 : (byte)0;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			ActiveIdPreviousFrameIsAlive = activeIdPreviousFrameIsAlive ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameHasBeenEditedBefore = activeIdPreviousFrameHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameWindow = activeIdPreviousFrameWindow;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			ActiveIdUsingMouseWheel = activeIdUsingMouseWheel ? (byte)1 : (byte)0;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingNavInputMask = activeIdUsingNavInputMask;
			ActiveIdUsingKeyInputMask = activeIdUsingKeyInputMask;
			CurrentItemFlags = currentItemFlags;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			BeginMenuCount = beginMenuCount;
			Viewports = viewports;
			CurrentDpiScale = currentDpiScale;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			ViewportFrontMostStampCount = viewportFrontMostStampCount;
			NavWindow = navWindow;
			NavId = navId;
			NavFocusScopeId = navFocusScopeId;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateInputId = navActivateInputId;
			NavActivateFlags = navActivateFlags;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLayer = navLayer;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavDisableHighlight = navDisableHighlight ? (byte)1 : (byte)0;
			NavDisableMouseHover = navDisableMouseHover ? (byte)1 : (byte)0;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResultId = navInitResultId;
			NavInitResultRectRel = navInitResultRectRel;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			DimBgRatio = dimBgRatio;
			MouseCursor = mouseCursor;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(Span<byte>))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextPasswordFont = inputTextPasswordFont;
			TempInputId = tempInputId;
			ColorEditOptions = colorEditOptions;
			ColorEditLastHue = colorEditLastHue;
			ColorEditLastSat = colorEditLastSat;
			ColorEditLastColor = colorEditLastColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			TooltipOverrideCount = tooltipOverrideCount;
			TooltipSlowDelay = tooltipSlowDelay;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			PlatformImeViewport = platformImeViewport;
			PlatformLocaleDecimalPoint = platformLocaleDecimalPoint;
			DockContext = dockContext;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogType = logType;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugMetricsConfig = debugMetricsConfig;
			DebugStackTool = debugStackTool;
			if (framerateSecPerFrame != default(Span<float>))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
				FramerateSecPerFrame_60 = framerateSecPerFrame[60];
				FramerateSecPerFrame_61 = framerateSecPerFrame[61];
				FramerateSecPerFrame_62 = framerateSecPerFrame[62];
				FramerateSecPerFrame_63 = framerateSecPerFrame[63];
				FramerateSecPerFrame_64 = framerateSecPerFrame[64];
				FramerateSecPerFrame_65 = framerateSecPerFrame[65];
				FramerateSecPerFrame_66 = framerateSecPerFrame[66];
				FramerateSecPerFrame_67 = framerateSecPerFrame[67];
				FramerateSecPerFrame_68 = framerateSecPerFrame[68];
				FramerateSecPerFrame_69 = framerateSecPerFrame[69];
				FramerateSecPerFrame_70 = framerateSecPerFrame[70];
				FramerateSecPerFrame_71 = framerateSecPerFrame[71];
				FramerateSecPerFrame_72 = framerateSecPerFrame[72];
				FramerateSecPerFrame_73 = framerateSecPerFrame[73];
				FramerateSecPerFrame_74 = framerateSecPerFrame[74];
				FramerateSecPerFrame_75 = framerateSecPerFrame[75];
				FramerateSecPerFrame_76 = framerateSecPerFrame[76];
				FramerateSecPerFrame_77 = framerateSecPerFrame[77];
				FramerateSecPerFrame_78 = framerateSecPerFrame[78];
				FramerateSecPerFrame_79 = framerateSecPerFrame[79];
				FramerateSecPerFrame_80 = framerateSecPerFrame[80];
				FramerateSecPerFrame_81 = framerateSecPerFrame[81];
				FramerateSecPerFrame_82 = framerateSecPerFrame[82];
				FramerateSecPerFrame_83 = framerateSecPerFrame[83];
				FramerateSecPerFrame_84 = framerateSecPerFrame[84];
				FramerateSecPerFrame_85 = framerateSecPerFrame[85];
				FramerateSecPerFrame_86 = framerateSecPerFrame[86];
				FramerateSecPerFrame_87 = framerateSecPerFrame[87];
				FramerateSecPerFrame_88 = framerateSecPerFrame[88];
				FramerateSecPerFrame_89 = framerateSecPerFrame[89];
				FramerateSecPerFrame_90 = framerateSecPerFrame[90];
				FramerateSecPerFrame_91 = framerateSecPerFrame[91];
				FramerateSecPerFrame_92 = framerateSecPerFrame[92];
				FramerateSecPerFrame_93 = framerateSecPerFrame[93];
				FramerateSecPerFrame_94 = framerateSecPerFrame[94];
				FramerateSecPerFrame_95 = framerateSecPerFrame[95];
				FramerateSecPerFrame_96 = framerateSecPerFrame[96];
				FramerateSecPerFrame_97 = framerateSecPerFrame[97];
				FramerateSecPerFrame_98 = framerateSecPerFrame[98];
				FramerateSecPerFrame_99 = framerateSecPerFrame[99];
				FramerateSecPerFrame_100 = framerateSecPerFrame[100];
				FramerateSecPerFrame_101 = framerateSecPerFrame[101];
				FramerateSecPerFrame_102 = framerateSecPerFrame[102];
				FramerateSecPerFrame_103 = framerateSecPerFrame[103];
				FramerateSecPerFrame_104 = framerateSecPerFrame[104];
				FramerateSecPerFrame_105 = framerateSecPerFrame[105];
				FramerateSecPerFrame_106 = framerateSecPerFrame[106];
				FramerateSecPerFrame_107 = framerateSecPerFrame[107];
				FramerateSecPerFrame_108 = framerateSecPerFrame[108];
				FramerateSecPerFrame_109 = framerateSecPerFrame[109];
				FramerateSecPerFrame_110 = framerateSecPerFrame[110];
				FramerateSecPerFrame_111 = framerateSecPerFrame[111];
				FramerateSecPerFrame_112 = framerateSecPerFrame[112];
				FramerateSecPerFrame_113 = framerateSecPerFrame[113];
				FramerateSecPerFrame_114 = framerateSecPerFrame[114];
				FramerateSecPerFrame_115 = framerateSecPerFrame[115];
				FramerateSecPerFrame_116 = framerateSecPerFrame[116];
				FramerateSecPerFrame_117 = framerateSecPerFrame[117];
				FramerateSecPerFrame_118 = framerateSecPerFrame[118];
				FramerateSecPerFrame_119 = framerateSecPerFrame[119];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiContext* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiContextPtr : IEquatable<ImGuiContextPtr>
	{
		public ImGuiContextPtr(ImGuiContext* handle) { Handle = handle; }

		public ImGuiContext* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiContextPtr Null => new ImGuiContextPtr(null);

		public ImGuiContext this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiContextPtr(ImGuiContext* handle) => new ImGuiContextPtr(handle);

		public static implicit operator ImGuiContext*(ImGuiContextPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiContextPtr left, ImGuiContextPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiContextPtr left, ImGuiContextPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiContextPtr left, ImGuiContext* right) => left.Handle == right;

		public static bool operator !=(ImGuiContextPtr left, ImGuiContext* right) => left.Handle != right;

		public bool Equals(ImGuiContextPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiContextPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiContextPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Initialized => ref Unsafe.AsRef<bool>(&Handle->Initialized);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool FontAtlasOwnedByContext => ref Unsafe.AsRef<bool>(&Handle->FontAtlasOwnedByContext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiIO IO => ref Unsafe.AsRef<ImGuiIO>(&Handle->IO);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformIO PlatformIO => ref Unsafe.AsRef<ImGuiPlatformIO>(&Handle->PlatformIO);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiInputEvent> InputEventsQueue => ref Unsafe.AsRef<ImVector<ImGuiInputEvent>>(&Handle->InputEventsQueue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiInputEvent> InputEventsTrail => ref Unsafe.AsRef<ImVector<ImGuiInputEvent>>(&Handle->InputEventsTrail);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStyle Style => ref Unsafe.AsRef<ImGuiStyle>(&Handle->Style);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiConfigFlags ConfigFlagsCurrFrame => ref Unsafe.AsRef<ImGuiConfigFlags>(&Handle->ConfigFlagsCurrFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiConfigFlags ConfigFlagsLastFrame => ref Unsafe.AsRef<ImGuiConfigFlags>(&Handle->ConfigFlagsLastFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontPtr Font => ref Unsafe.AsRef<ImFontPtr>(&Handle->Font);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontSize => ref Unsafe.AsRef<float>(&Handle->FontSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontBaseSize => ref Unsafe.AsRef<float>(&Handle->FontBaseSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawListSharedData DrawListSharedData => ref Unsafe.AsRef<ImDrawListSharedData>(&Handle->DrawListSharedData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Time => ref Unsafe.AsRef<double>(&Handle->Time);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCount => ref Unsafe.AsRef<int>(&Handle->FrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountEnded => ref Unsafe.AsRef<int>(&Handle->FrameCountEnded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountPlatformEnded => ref Unsafe.AsRef<int>(&Handle->FrameCountPlatformEnded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountRendered => ref Unsafe.AsRef<int>(&Handle->FrameCountRendered);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WithinFrameScope => ref Unsafe.AsRef<bool>(&Handle->WithinFrameScope);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WithinFrameScopeWithImplicitWindow => ref Unsafe.AsRef<bool>(&Handle->WithinFrameScopeWithImplicitWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WithinEndChild => ref Unsafe.AsRef<bool>(&Handle->WithinEndChild);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool GcCompactAll => ref Unsafe.AsRef<bool>(&Handle->GcCompactAll);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool TestEngineHookItems => ref Unsafe.AsRef<bool>(&Handle->TestEngineHookItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* TestEngine { get => Handle->TestEngine; set => Handle->TestEngine = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> Windows => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->Windows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> WindowsFocusOrder => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->WindowsFocusOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> WindowsTempSortBuffer => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->WindowsTempSortBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowStackData> CurrentWindowStack => ref Unsafe.AsRef<ImVector<ImGuiWindowStackData>>(&Handle->CurrentWindowStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStorage WindowsById => ref Unsafe.AsRef<ImGuiStorage>(&Handle->WindowsById);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WindowsActiveCount => ref Unsafe.AsRef<int>(&Handle->WindowsActiveCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WindowsHoverPadding => ref Unsafe.AsRef<Vector2>(&Handle->WindowsHoverPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr CurrentWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->CurrentWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HoveredWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HoveredWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HoveredWindowUnderMovingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HoveredWindowUnderMovingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr HoveredDockNode => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->HoveredDockNode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr MovingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->MovingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr WheelingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->WheelingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WheelingWindowRefMousePos => ref Unsafe.AsRef<Vector2>(&Handle->WheelingWindowRefMousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WheelingWindowTimer => ref Unsafe.AsRef<float>(&Handle->WheelingWindowTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugHookIdInfo => ref Unsafe.AsRef<uint>(&Handle->DebugHookIdInfo);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoveredId => ref Unsafe.AsRef<uint>(&Handle->HoveredId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoveredIdPreviousFrame => ref Unsafe.AsRef<uint>(&Handle->HoveredIdPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdAllowOverlap => ref Unsafe.AsRef<bool>(&Handle->HoveredIdAllowOverlap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdUsingMouseWheel => ref Unsafe.AsRef<bool>(&Handle->HoveredIdUsingMouseWheel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdPreviousFrameUsingMouseWheel => ref Unsafe.AsRef<bool>(&Handle->HoveredIdPreviousFrameUsingMouseWheel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdDisabled => ref Unsafe.AsRef<bool>(&Handle->HoveredIdDisabled);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoveredIdTimer => ref Unsafe.AsRef<float>(&Handle->HoveredIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoveredIdNotActiveTimer => ref Unsafe.AsRef<float>(&Handle->HoveredIdNotActiveTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveId => ref Unsafe.AsRef<uint>(&Handle->ActiveId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdIsAlive => ref Unsafe.AsRef<uint>(&Handle->ActiveIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ActiveIdTimer => ref Unsafe.AsRef<float>(&Handle->ActiveIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdIsJustActivated => ref Unsafe.AsRef<bool>(&Handle->ActiveIdIsJustActivated);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdAllowOverlap => ref Unsafe.AsRef<bool>(&Handle->ActiveIdAllowOverlap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdNoClearOnFocusLoss => ref Unsafe.AsRef<bool>(&Handle->ActiveIdNoClearOnFocusLoss);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenPressedBefore => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenPressedBefore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenEditedBefore => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenEditedBefore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenEditedThisFrame => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenEditedThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ActiveIdClickOffset => ref Unsafe.AsRef<Vector2>(&Handle->ActiveIdClickOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr ActiveIdWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->ActiveIdWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputSource ActiveIdSource => ref Unsafe.AsRef<ImGuiInputSource>(&Handle->ActiveIdSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ActiveIdMouseButton => ref Unsafe.AsRef<int>(&Handle->ActiveIdMouseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdPreviousFrame => ref Unsafe.AsRef<uint>(&Handle->ActiveIdPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdPreviousFrameIsAlive => ref Unsafe.AsRef<bool>(&Handle->ActiveIdPreviousFrameIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdPreviousFrameHasBeenEditedBefore => ref Unsafe.AsRef<bool>(&Handle->ActiveIdPreviousFrameHasBeenEditedBefore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr ActiveIdPreviousFrameWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->ActiveIdPreviousFrameWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint LastActiveId => ref Unsafe.AsRef<uint>(&Handle->LastActiveId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastActiveIdTimer => ref Unsafe.AsRef<float>(&Handle->LastActiveIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdUsingMouseWheel => ref Unsafe.AsRef<bool>(&Handle->ActiveIdUsingMouseWheel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdUsingNavDirMask => ref Unsafe.AsRef<uint>(&Handle->ActiveIdUsingNavDirMask);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdUsingNavInputMask => ref Unsafe.AsRef<uint>(&Handle->ActiveIdUsingNavInputMask);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref nuint ActiveIdUsingKeyInputMask => ref Unsafe.AsRef<nuint>(&Handle->ActiveIdUsingKeyInputMask);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemFlags CurrentItemFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&Handle->CurrentItemFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNextItemData NextItemData => ref Unsafe.AsRef<ImGuiNextItemData>(&Handle->NextItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLastItemData LastItemData => ref Unsafe.AsRef<ImGuiLastItemData>(&Handle->LastItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNextWindowData NextWindowData => ref Unsafe.AsRef<ImGuiNextWindowData>(&Handle->NextWindowData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiColorMod> ColorStack => ref Unsafe.AsRef<ImVector<ImGuiColorMod>>(&Handle->ColorStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiStyleMod> StyleVarStack => ref Unsafe.AsRef<ImVector<ImGuiStyleMod>>(&Handle->StyleVarStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImFontPtr> FontStack => ref Unsafe.AsRef<ImVector<ImFontPtr>>(&Handle->FontStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<uint> FocusScopeStack => ref Unsafe.AsRef<ImVector<uint>>(&Handle->FocusScopeStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiItemFlags> ItemFlagsStack => ref Unsafe.AsRef<ImVector<ImGuiItemFlags>>(&Handle->ItemFlagsStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiGroupData> GroupStack => ref Unsafe.AsRef<ImVector<ImGuiGroupData>>(&Handle->GroupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPopupData> OpenPopupStack => ref Unsafe.AsRef<ImVector<ImGuiPopupData>>(&Handle->OpenPopupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPopupData> BeginPopupStack => ref Unsafe.AsRef<ImVector<ImGuiPopupData>>(&Handle->BeginPopupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int BeginMenuCount => ref Unsafe.AsRef<int>(&Handle->BeginMenuCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiViewportPPtr> Viewports => ref Unsafe.AsRef<ImVector<ImGuiViewportPPtr>>(&Handle->Viewports);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CurrentDpiScale => ref Unsafe.AsRef<float>(&Handle->CurrentDpiScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr CurrentViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->CurrentViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr MouseViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->MouseViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr MouseLastHoveredViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->MouseLastHoveredViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint PlatformLastFocusedViewportId => ref Unsafe.AsRef<uint>(&Handle->PlatformLastFocusedViewportId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformMonitor FallbackMonitor => ref Unsafe.AsRef<ImGuiPlatformMonitor>(&Handle->FallbackMonitor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ViewportFrontMostStampCount => ref Unsafe.AsRef<int>(&Handle->ViewportFrontMostStampCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavId => ref Unsafe.AsRef<uint>(&Handle->NavId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->NavFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivateId => ref Unsafe.AsRef<uint>(&Handle->NavActivateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivateDownId => ref Unsafe.AsRef<uint>(&Handle->NavActivateDownId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivatePressedId => ref Unsafe.AsRef<uint>(&Handle->NavActivatePressedId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivateInputId => ref Unsafe.AsRef<uint>(&Handle->NavActivateInputId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiActivateFlags NavActivateFlags => ref Unsafe.AsRef<ImGuiActivateFlags>(&Handle->NavActivateFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavJustMovedToId => ref Unsafe.AsRef<uint>(&Handle->NavJustMovedToId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavJustMovedToFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->NavJustMovedToFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiModFlags NavJustMovedToKeyMods => ref Unsafe.AsRef<ImGuiModFlags>(&Handle->NavJustMovedToKeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavNextActivateId => ref Unsafe.AsRef<uint>(&Handle->NavNextActivateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiActivateFlags NavNextActivateFlags => ref Unsafe.AsRef<ImGuiActivateFlags>(&Handle->NavNextActivateFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputSource NavInputSource => ref Unsafe.AsRef<ImGuiInputSource>(&Handle->NavInputSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavLayer NavLayer => ref Unsafe.AsRef<ImGuiNavLayer>(&Handle->NavLayer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavIdIsAlive => ref Unsafe.AsRef<bool>(&Handle->NavIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMousePosDirty => ref Unsafe.AsRef<bool>(&Handle->NavMousePosDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavDisableHighlight => ref Unsafe.AsRef<bool>(&Handle->NavDisableHighlight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavDisableMouseHover => ref Unsafe.AsRef<bool>(&Handle->NavDisableMouseHover);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavAnyRequest => ref Unsafe.AsRef<bool>(&Handle->NavAnyRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavInitRequest => ref Unsafe.AsRef<bool>(&Handle->NavInitRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavInitRequestFromMove => ref Unsafe.AsRef<bool>(&Handle->NavInitRequestFromMove);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavInitResultId => ref Unsafe.AsRef<uint>(&Handle->NavInitResultId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavInitResultRectRel => ref Unsafe.AsRef<ImRect>(&Handle->NavInitResultRectRel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveSubmitted => ref Unsafe.AsRef<bool>(&Handle->NavMoveSubmitted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveScoringItems => ref Unsafe.AsRef<bool>(&Handle->NavMoveScoringItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveForwardToNextFrame => ref Unsafe.AsRef<bool>(&Handle->NavMoveForwardToNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavMoveFlags NavMoveFlags => ref Unsafe.AsRef<ImGuiNavMoveFlags>(&Handle->NavMoveFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiScrollFlags NavMoveScrollFlags => ref Unsafe.AsRef<ImGuiScrollFlags>(&Handle->NavMoveScrollFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiModFlags NavMoveKeyMods => ref Unsafe.AsRef<ImGuiModFlags>(&Handle->NavMoveKeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveDir => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveDirForDebug => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveDirForDebug);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveClipDir => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveClipDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavScoringRect => ref Unsafe.AsRef<ImRect>(&Handle->NavScoringRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavScoringNoClipRect => ref Unsafe.AsRef<ImRect>(&Handle->NavScoringNoClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavScoringDebugCount => ref Unsafe.AsRef<int>(&Handle->NavScoringDebugCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavTabbingDir => ref Unsafe.AsRef<int>(&Handle->NavTabbingDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavTabbingCounter => ref Unsafe.AsRef<int>(&Handle->NavTabbingCounter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultLocal => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultLocal);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultLocalVisible => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultLocalVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultOther => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultOther);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavTabbingResultFirst => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavTabbingResultFirst);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingTarget => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingTargetAnim => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingTargetAnim);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingListWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingListWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float NavWindowingTimer => ref Unsafe.AsRef<float>(&Handle->NavWindowingTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float NavWindowingHighlightAlpha => ref Unsafe.AsRef<float>(&Handle->NavWindowingHighlightAlpha);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavWindowingToggleLayer => ref Unsafe.AsRef<bool>(&Handle->NavWindowingToggleLayer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DimBgRatio => ref Unsafe.AsRef<float>(&Handle->DimBgRatio);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseCursor MouseCursor => ref Unsafe.AsRef<ImGuiMouseCursor>(&Handle->MouseCursor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropActive => ref Unsafe.AsRef<bool>(&Handle->DragDropActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropWithinSource => ref Unsafe.AsRef<bool>(&Handle->DragDropWithinSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropWithinTarget => ref Unsafe.AsRef<bool>(&Handle->DragDropWithinTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDragDropFlags DragDropSourceFlags => ref Unsafe.AsRef<ImGuiDragDropFlags>(&Handle->DragDropSourceFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropSourceFrameCount => ref Unsafe.AsRef<int>(&Handle->DragDropSourceFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropMouseButton => ref Unsafe.AsRef<int>(&Handle->DragDropMouseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPayload DragDropPayload => ref Unsafe.AsRef<ImGuiPayload>(&Handle->DragDropPayload);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect DragDropTargetRect => ref Unsafe.AsRef<ImRect>(&Handle->DragDropTargetRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropTargetId => ref Unsafe.AsRef<uint>(&Handle->DragDropTargetId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDragDropFlags DragDropAcceptFlags => ref Unsafe.AsRef<ImGuiDragDropFlags>(&Handle->DragDropAcceptFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragDropAcceptIdCurrRectSurface => ref Unsafe.AsRef<float>(&Handle->DragDropAcceptIdCurrRectSurface);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropAcceptIdCurr => ref Unsafe.AsRef<uint>(&Handle->DragDropAcceptIdCurr);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropAcceptIdPrev => ref Unsafe.AsRef<uint>(&Handle->DragDropAcceptIdPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropAcceptFrameCount => ref Unsafe.AsRef<int>(&Handle->DragDropAcceptFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropHoldJustPressedId => ref Unsafe.AsRef<uint>(&Handle->DragDropHoldJustPressedId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> DragDropPayloadBufHeap => ref Unsafe.AsRef<ImVector<byte>>(&Handle->DragDropPayloadBufHeap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<byte> DragDropPayloadBufLocal
		
		{
			get
			{
				return new Span<byte>(&Handle->DragDropPayloadBufLocal_0, 16);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ClipperTempDataStacked => ref Unsafe.AsRef<int>(&Handle->ClipperTempDataStacked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiListClipperData> ClipperTempData => ref Unsafe.AsRef<ImVector<ImGuiListClipperData>>(&Handle->ClipperTempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTablePtr CurrentTable => ref Unsafe.AsRef<ImGuiTablePtr>(&Handle->CurrentTable);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int TablesTempDataStacked => ref Unsafe.AsRef<int>(&Handle->TablesTempDataStacked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTableTempData> TablesTempData => ref Unsafe.AsRef<ImVector<ImGuiTableTempData>>(&Handle->TablesTempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImGuiTable Tables => ref Unsafe.AsRef<ImPoolImGuiTable>(&Handle->Tables);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<float> TablesLastTimeActive => ref Unsafe.AsRef<ImVector<float>>(&Handle->TablesLastTimeActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImDrawChannel> DrawChannelsTempMergeBuffer => ref Unsafe.AsRef<ImVector<ImDrawChannel>>(&Handle->DrawChannelsTempMergeBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTabBarPtr CurrentTabBar => ref Unsafe.AsRef<ImGuiTabBarPtr>(&Handle->CurrentTabBar);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImGuiTabBar TabBars => ref Unsafe.AsRef<ImPoolImGuiTabBar>(&Handle->TabBars);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPtrOrIndex> CurrentTabBarStack => ref Unsafe.AsRef<ImVector<ImGuiPtrOrIndex>>(&Handle->CurrentTabBarStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiShrinkWidthItem> ShrinkWidthBuffer => ref Unsafe.AsRef<ImVector<ImGuiShrinkWidthItem>>(&Handle->ShrinkWidthBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MouseLastValidPos => ref Unsafe.AsRef<Vector2>(&Handle->MouseLastValidPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputTextState InputTextState => ref Unsafe.AsRef<ImGuiInputTextState>(&Handle->InputTextState);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFont InputTextPasswordFont => ref Unsafe.AsRef<ImFont>(&Handle->InputTextPasswordFont);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint TempInputId => ref Unsafe.AsRef<uint>(&Handle->TempInputId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiColorEditFlags ColorEditOptions => ref Unsafe.AsRef<ImGuiColorEditFlags>(&Handle->ColorEditOptions);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColorEditLastHue => ref Unsafe.AsRef<float>(&Handle->ColorEditLastHue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColorEditLastSat => ref Unsafe.AsRef<float>(&Handle->ColorEditLastSat);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorEditLastColor => ref Unsafe.AsRef<uint>(&Handle->ColorEditLastColor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector4 ColorPickerRef => ref Unsafe.AsRef<Vector4>(&Handle->ColorPickerRef);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiComboPreviewData ComboPreviewData => ref Unsafe.AsRef<ImGuiComboPreviewData>(&Handle->ComboPreviewData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SliderGrabClickOffset => ref Unsafe.AsRef<float>(&Handle->SliderGrabClickOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SliderCurrentAccum => ref Unsafe.AsRef<float>(&Handle->SliderCurrentAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SliderCurrentAccumDirty => ref Unsafe.AsRef<bool>(&Handle->SliderCurrentAccumDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragCurrentAccumDirty => ref Unsafe.AsRef<bool>(&Handle->DragCurrentAccumDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragCurrentAccum => ref Unsafe.AsRef<float>(&Handle->DragCurrentAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragSpeedDefaultRatio => ref Unsafe.AsRef<float>(&Handle->DragSpeedDefaultRatio);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollbarClickDeltaToGrabCenter => ref Unsafe.AsRef<float>(&Handle->ScrollbarClickDeltaToGrabCenter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DisabledAlphaBackup => ref Unsafe.AsRef<float>(&Handle->DisabledAlphaBackup);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short DisabledStackSize => ref Unsafe.AsRef<short>(&Handle->DisabledStackSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short TooltipOverrideCount => ref Unsafe.AsRef<short>(&Handle->TooltipOverrideCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float TooltipSlowDelay => ref Unsafe.AsRef<float>(&Handle->TooltipSlowDelay);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> ClipboardHandlerData => ref Unsafe.AsRef<ImVector<byte>>(&Handle->ClipboardHandlerData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<uint> MenusIdSubmittedThisFrame => ref Unsafe.AsRef<ImVector<uint>>(&Handle->MenusIdSubmittedThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformImeData PlatformImeData => ref Unsafe.AsRef<ImGuiPlatformImeData>(&Handle->PlatformImeData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformImeData PlatformImeDataPrev => ref Unsafe.AsRef<ImGuiPlatformImeData>(&Handle->PlatformImeDataPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint PlatformImeViewport => ref Unsafe.AsRef<uint>(&Handle->PlatformImeViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte PlatformLocaleDecimalPoint => ref Unsafe.AsRef<byte>(&Handle->PlatformLocaleDecimalPoint);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockContext DockContext => ref Unsafe.AsRef<ImGuiDockContext>(&Handle->DockContext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SettingsLoaded => ref Unsafe.AsRef<bool>(&Handle->SettingsLoaded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SettingsDirtyTimer => ref Unsafe.AsRef<float>(&Handle->SettingsDirtyTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer SettingsIniData => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->SettingsIniData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiSettingsHandler> SettingsHandlers => ref Unsafe.AsRef<ImVector<ImGuiSettingsHandler>>(&Handle->SettingsHandlers);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImChunkStreamImGuiWindowSettings SettingsWindows => ref Unsafe.AsRef<ImChunkStreamImGuiWindowSettings>(&Handle->SettingsWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImChunkStreamImGuiTableSettings SettingsTables => ref Unsafe.AsRef<ImChunkStreamImGuiTableSettings>(&Handle->SettingsTables);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiContextHook> Hooks => ref Unsafe.AsRef<ImVector<ImGuiContextHook>>(&Handle->Hooks);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HookIdNext => ref Unsafe.AsRef<uint>(&Handle->HookIdNext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LogEnabled => ref Unsafe.AsRef<bool>(&Handle->LogEnabled);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLogType LogType => ref Unsafe.AsRef<ImGuiLogType>(&Handle->LogType);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFileHandle LogFile => ref Unsafe.AsRef<ImFileHandle>(&Handle->LogFile);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer LogBuffer => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->LogBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* LogNextPrefix { get => Handle->LogNextPrefix; set => Handle->LogNextPrefix = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* LogNextSuffix { get => Handle->LogNextSuffix; set => Handle->LogNextSuffix = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LogLinePosY => ref Unsafe.AsRef<float>(&Handle->LogLinePosY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LogLineFirstItem => ref Unsafe.AsRef<bool>(&Handle->LogLineFirstItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthRef => ref Unsafe.AsRef<int>(&Handle->LogDepthRef);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthToExpand => ref Unsafe.AsRef<int>(&Handle->LogDepthToExpand);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthToExpandDefault => ref Unsafe.AsRef<int>(&Handle->LogDepthToExpandDefault);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDebugLogFlags DebugLogFlags => ref Unsafe.AsRef<ImGuiDebugLogFlags>(&Handle->DebugLogFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer DebugLogBuf => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->DebugLogBuf);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DebugItemPickerActive => ref Unsafe.AsRef<bool>(&Handle->DebugItemPickerActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugItemPickerBreakId => ref Unsafe.AsRef<uint>(&Handle->DebugItemPickerBreakId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMetricsConfig DebugMetricsConfig => ref Unsafe.AsRef<ImGuiMetricsConfig>(&Handle->DebugMetricsConfig);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStackTool DebugStackTool => ref Unsafe.AsRef<ImGuiStackTool>(&Handle->DebugStackTool);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> FramerateSecPerFrame
		
		{
			get
			{
				return new Span<float>(&Handle->FramerateSecPerFrame_0, 120);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FramerateSecPerFrameIdx => ref Unsafe.AsRef<int>(&Handle->FramerateSecPerFrameIdx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FramerateSecPerFrameCount => ref Unsafe.AsRef<int>(&Handle->FramerateSecPerFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FramerateSecPerFrameAccum => ref Unsafe.AsRef<float>(&Handle->FramerateSecPerFrameAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantCaptureMouseNextFrame => ref Unsafe.AsRef<int>(&Handle->WantCaptureMouseNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantCaptureKeyboardNextFrame => ref Unsafe.AsRef<int>(&Handle->WantCaptureKeyboardNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantTextInputNextFrame => ref Unsafe.AsRef<int>(&Handle->WantTextInputNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> TempBuffer => ref Unsafe.AsRef<ImVector<byte>>(&Handle->TempBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
