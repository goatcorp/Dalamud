// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawDataBuilder
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImDrawListPtr> Layers_0;
		public ImVector<ImDrawListPtr> Layers_1;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawDataBuilder(ImVector<ImDrawListPtr>* layers = default)
		{
			if (layers != default(ImVector<ImDrawListPtr>*))
			{
				Layers_0 = layers[0];
				Layers_1 = layers[1];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawDataBuilder(Span<ImVector<ImDrawListPtr>> layers = default)
		{
			if (layers != default(Span<ImVector<ImDrawListPtr>>))
			{
				Layers_0 = layers[0];
				Layers_1 = layers[1];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImVector<ImDrawListPtr>> Layers
		
		{
			get
			{
				fixed (ImVector<ImDrawListPtr>* p = &this.Layers_0)
				{
					return new Span<ImVector<ImDrawListPtr>>(p, 2);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImDrawDataBuilderPtr : IEquatable<ImDrawDataBuilderPtr>
	{
		public ImDrawDataBuilderPtr(ImDrawDataBuilder* handle) { Handle = handle; }

		public ImDrawDataBuilder* Handle;

		public bool IsNull => Handle == null;

		public static ImDrawDataBuilderPtr Null => new ImDrawDataBuilderPtr(null);

		public ImDrawDataBuilder this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImDrawDataBuilderPtr(ImDrawDataBuilder* handle) => new ImDrawDataBuilderPtr(handle);

		public static implicit operator ImDrawDataBuilder*(ImDrawDataBuilderPtr handle) => handle.Handle;

		public static bool operator ==(ImDrawDataBuilderPtr left, ImDrawDataBuilderPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImDrawDataBuilderPtr left, ImDrawDataBuilderPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImDrawDataBuilderPtr left, ImDrawDataBuilder* right) => left.Handle == right;

		public static bool operator !=(ImDrawDataBuilderPtr left, ImDrawDataBuilder* right) => left.Handle != right;

		public bool Equals(ImDrawDataBuilderPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImDrawDataBuilderPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImDrawDataBuilderPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImVector<ImDrawListPtr>> Layers
		
		{
			get
			{
				return new Span<ImVector<ImDrawListPtr>>(&Handle->Layers_0, 2);
			}
		}
	}

}
