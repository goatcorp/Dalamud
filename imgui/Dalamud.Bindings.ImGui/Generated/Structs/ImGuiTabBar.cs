// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabBar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTabItem> Tabs;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTabBarFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint SelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NextSelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint VisibleTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CurrFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int PrevFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect BarRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CurrTabsContentsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float PrevTabsContentsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WidthAllTabs;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WidthAllTabsIdeal;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingTargetDistToVisibility;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingSpeed;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingRectMinX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollingRectMaxX;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ReorderRequestTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short ReorderRequestOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte BeginCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte VisibleTabWasSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte TabsAddedNew;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short TabsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short LastTabItemIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ItemSpacingY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 FramePadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer TabsNames;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTabBar(ImVector<ImGuiTabItem> tabs = default, ImGuiTabBarFlags flags = default, uint id = default, uint selectedTabId = default, uint nextSelectedTabId = default, uint visibleTabId = default, int currFrameVisible = default, int prevFrameVisible = default, ImRect barRect = default, float currTabsContentsHeight = default, float prevTabsContentsHeight = default, float widthAllTabs = default, float widthAllTabsIdeal = default, float scrollingAnim = default, float scrollingTarget = default, float scrollingTargetDistToVisibility = default, float scrollingSpeed = default, float scrollingRectMinX = default, float scrollingRectMaxX = default, uint reorderRequestTabId = default, short reorderRequestOffset = default, sbyte beginCount = default, bool wantLayout = default, bool visibleTabWasSubmitted = default, bool tabsAddedNew = default, short tabsActiveCount = default, short lastTabItemIdx = default, float itemSpacingY = default, Vector2 framePadding = default, Vector2 backupCursorPos = default, ImGuiTextBuffer tabsNames = default)
		{
			Tabs = tabs;
			Flags = flags;
			ID = id;
			SelectedTabId = selectedTabId;
			NextSelectedTabId = nextSelectedTabId;
			VisibleTabId = visibleTabId;
			CurrFrameVisible = currFrameVisible;
			PrevFrameVisible = prevFrameVisible;
			BarRect = barRect;
			CurrTabsContentsHeight = currTabsContentsHeight;
			PrevTabsContentsHeight = prevTabsContentsHeight;
			WidthAllTabs = widthAllTabs;
			WidthAllTabsIdeal = widthAllTabsIdeal;
			ScrollingAnim = scrollingAnim;
			ScrollingTarget = scrollingTarget;
			ScrollingTargetDistToVisibility = scrollingTargetDistToVisibility;
			ScrollingSpeed = scrollingSpeed;
			ScrollingRectMinX = scrollingRectMinX;
			ScrollingRectMaxX = scrollingRectMaxX;
			ReorderRequestTabId = reorderRequestTabId;
			ReorderRequestOffset = reorderRequestOffset;
			BeginCount = beginCount;
			WantLayout = wantLayout ? (byte)1 : (byte)0;
			VisibleTabWasSubmitted = visibleTabWasSubmitted ? (byte)1 : (byte)0;
			TabsAddedNew = tabsAddedNew ? (byte)1 : (byte)0;
			TabsActiveCount = tabsActiveCount;
			LastTabItemIdx = lastTabItemIdx;
			ItemSpacingY = itemSpacingY;
			FramePadding = framePadding;
			BackupCursorPos = backupCursorPos;
			TabsNames = tabsNames;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiTabBar* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTabBarPtr : IEquatable<ImGuiTabBarPtr>
	{
		public ImGuiTabBarPtr(ImGuiTabBar* handle) { Handle = handle; }

		public ImGuiTabBar* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTabBarPtr Null => new ImGuiTabBarPtr(null);

		public ImGuiTabBar this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTabBarPtr(ImGuiTabBar* handle) => new ImGuiTabBarPtr(handle);

		public static implicit operator ImGuiTabBar*(ImGuiTabBarPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTabBarPtr left, ImGuiTabBarPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTabBarPtr left, ImGuiTabBarPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTabBarPtr left, ImGuiTabBar* right) => left.Handle == right;

		public static bool operator !=(ImGuiTabBarPtr left, ImGuiTabBar* right) => left.Handle != right;

		public bool Equals(ImGuiTabBarPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTabBarPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTabBarPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTabItem> Tabs => ref Unsafe.AsRef<ImVector<ImGuiTabItem>>(&Handle->Tabs);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTabBarFlags Flags => ref Unsafe.AsRef<ImGuiTabBarFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint SelectedTabId => ref Unsafe.AsRef<uint>(&Handle->SelectedTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NextSelectedTabId => ref Unsafe.AsRef<uint>(&Handle->NextSelectedTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint VisibleTabId => ref Unsafe.AsRef<uint>(&Handle->VisibleTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int CurrFrameVisible => ref Unsafe.AsRef<int>(&Handle->CurrFrameVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int PrevFrameVisible => ref Unsafe.AsRef<int>(&Handle->PrevFrameVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect BarRect => ref Unsafe.AsRef<ImRect>(&Handle->BarRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CurrTabsContentsHeight => ref Unsafe.AsRef<float>(&Handle->CurrTabsContentsHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float PrevTabsContentsHeight => ref Unsafe.AsRef<float>(&Handle->PrevTabsContentsHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WidthAllTabs => ref Unsafe.AsRef<float>(&Handle->WidthAllTabs);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WidthAllTabsIdeal => ref Unsafe.AsRef<float>(&Handle->WidthAllTabsIdeal);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingAnim => ref Unsafe.AsRef<float>(&Handle->ScrollingAnim);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingTarget => ref Unsafe.AsRef<float>(&Handle->ScrollingTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingTargetDistToVisibility => ref Unsafe.AsRef<float>(&Handle->ScrollingTargetDistToVisibility);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingSpeed => ref Unsafe.AsRef<float>(&Handle->ScrollingSpeed);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingRectMinX => ref Unsafe.AsRef<float>(&Handle->ScrollingRectMinX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollingRectMaxX => ref Unsafe.AsRef<float>(&Handle->ScrollingRectMaxX);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ReorderRequestTabId => ref Unsafe.AsRef<uint>(&Handle->ReorderRequestTabId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short ReorderRequestOffset => ref Unsafe.AsRef<short>(&Handle->ReorderRequestOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte BeginCount => ref Unsafe.AsRef<sbyte>(&Handle->BeginCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantLayout => ref Unsafe.AsRef<bool>(&Handle->WantLayout);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool VisibleTabWasSubmitted => ref Unsafe.AsRef<bool>(&Handle->VisibleTabWasSubmitted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool TabsAddedNew => ref Unsafe.AsRef<bool>(&Handle->TabsAddedNew);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short TabsActiveCount => ref Unsafe.AsRef<short>(&Handle->TabsActiveCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short LastTabItemIdx => ref Unsafe.AsRef<short>(&Handle->LastTabItemIdx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ItemSpacingY => ref Unsafe.AsRef<float>(&Handle->ItemSpacingY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 FramePadding => ref Unsafe.AsRef<Vector2>(&Handle->FramePadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer TabsNames => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->TabsNames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
