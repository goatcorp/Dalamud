// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackSizes
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfIDStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfStyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfFontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfFocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfGroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfBeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short SizeOfDisabledStack;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiStackSizes(short sizeOfIdStack = default, short sizeOfColorStack = default, short sizeOfStyleVarStack = default, short sizeOfFontStack = default, short sizeOfFocusScopeStack = default, short sizeOfGroupStack = default, short sizeOfItemFlagsStack = default, short sizeOfBeginPopupStack = default, short sizeOfDisabledStack = default)
		{
			SizeOfIDStack = sizeOfIdStack;
			SizeOfColorStack = sizeOfColorStack;
			SizeOfStyleVarStack = sizeOfStyleVarStack;
			SizeOfFontStack = sizeOfFontStack;
			SizeOfFocusScopeStack = sizeOfFocusScopeStack;
			SizeOfGroupStack = sizeOfGroupStack;
			SizeOfItemFlagsStack = sizeOfItemFlagsStack;
			SizeOfBeginPopupStack = sizeOfBeginPopupStack;
			SizeOfDisabledStack = sizeOfDisabledStack;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiStackSizesPtr : IEquatable<ImGuiStackSizesPtr>
	{
		public ImGuiStackSizesPtr(ImGuiStackSizes* handle) { Handle = handle; }

		public ImGuiStackSizes* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiStackSizesPtr Null => new ImGuiStackSizesPtr(null);

		public ImGuiStackSizes this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiStackSizesPtr(ImGuiStackSizes* handle) => new ImGuiStackSizesPtr(handle);

		public static implicit operator ImGuiStackSizes*(ImGuiStackSizesPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiStackSizesPtr left, ImGuiStackSizesPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiStackSizesPtr left, ImGuiStackSizesPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiStackSizesPtr left, ImGuiStackSizes* right) => left.Handle == right;

		public static bool operator !=(ImGuiStackSizesPtr left, ImGuiStackSizes* right) => left.Handle != right;

		public bool Equals(ImGuiStackSizesPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiStackSizesPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiStackSizesPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfIDStack => ref Unsafe.AsRef<short>(&Handle->SizeOfIDStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfColorStack => ref Unsafe.AsRef<short>(&Handle->SizeOfColorStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfStyleVarStack => ref Unsafe.AsRef<short>(&Handle->SizeOfStyleVarStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfFontStack => ref Unsafe.AsRef<short>(&Handle->SizeOfFontStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfFocusScopeStack => ref Unsafe.AsRef<short>(&Handle->SizeOfFocusScopeStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfGroupStack => ref Unsafe.AsRef<short>(&Handle->SizeOfGroupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfItemFlagsStack => ref Unsafe.AsRef<short>(&Handle->SizeOfItemFlagsStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfBeginPopupStack => ref Unsafe.AsRef<short>(&Handle->SizeOfBeginPopupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short SizeOfDisabledStack => ref Unsafe.AsRef<short>(&Handle->SizeOfDisabledStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
