// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Dalamud.Bindings.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiComboPreviewData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect PreviewRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 BackupCursorPosPrevLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BackupPrevLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLayoutType BackupLayout;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiComboPreviewData(ImRect previewRect = default, Vector2 backupCursorPos = default, Vector2 backupCursorMaxPos = default, Vector2 backupCursorPosPrevLine = default, float backupPrevLineTextBaseOffset = default, ImGuiLayoutType backupLayout = default)
		{
			PreviewRect = previewRect;
			BackupCursorPos = backupCursorPos;
			BackupCursorMaxPos = backupCursorMaxPos;
			BackupCursorPosPrevLine = backupCursorPosPrevLine;
			BackupPrevLineTextBaseOffset = backupPrevLineTextBaseOffset;
			BackupLayout = backupLayout;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiComboPreviewData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiComboPreviewDataPtr : IEquatable<ImGuiComboPreviewDataPtr>
	{
		public ImGuiComboPreviewDataPtr(ImGuiComboPreviewData* handle) { Handle = handle; }

		public ImGuiComboPreviewData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiComboPreviewDataPtr Null => new ImGuiComboPreviewDataPtr(null);

		public ImGuiComboPreviewData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiComboPreviewDataPtr(ImGuiComboPreviewData* handle) => new ImGuiComboPreviewDataPtr(handle);

		public static implicit operator ImGuiComboPreviewData*(ImGuiComboPreviewDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiComboPreviewDataPtr left, ImGuiComboPreviewDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiComboPreviewDataPtr left, ImGuiComboPreviewDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiComboPreviewDataPtr left, ImGuiComboPreviewData* right) => left.Handle == right;

		public static bool operator !=(ImGuiComboPreviewDataPtr left, ImGuiComboPreviewData* right) => left.Handle != right;

		public bool Equals(ImGuiComboPreviewDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiComboPreviewDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiComboPreviewDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect PreviewRect => ref Unsafe.AsRef<ImRect>(&Handle->PreviewRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorMaxPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 BackupCursorPosPrevLine => ref Unsafe.AsRef<Vector2>(&Handle->BackupCursorPosPrevLine);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float BackupPrevLineTextBaseOffset => ref Unsafe.AsRef<float>(&Handle->BackupPrevLineTextBaseOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLayoutType BackupLayout => ref Unsafe.AsRef<ImGuiLayoutType>(&Handle->BackupLayout);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
