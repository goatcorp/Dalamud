// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotSubplot
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotSubplotFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotSubplotFlags PreviousFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotItemGroup Items;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Rows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Cols;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CurrentIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect FrameRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect GridRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 CellSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotAlignmentData> RowAlignmentData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotAlignmentData> ColAlignmentData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<float> RowRatios;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<float> ColRatios;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotRange> RowLinkData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotRange> ColLinkData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float TempSizes_0;
		public float TempSizes_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte FrameHovered;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HasTitle;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotSubplot(uint id = default, ImPlotSubplotFlags flags = default, ImPlotSubplotFlags previousFlags = default, ImPlotItemGroup items = default, int rows = default, int cols = default, int currentIdx = default, ImRect frameRect = default, ImRect gridRect = default, Vector2 cellSize = default, ImVector<ImPlotAlignmentData> rowAlignmentData = default, ImVector<ImPlotAlignmentData> colAlignmentData = default, ImVector<float> rowRatios = default, ImVector<float> colRatios = default, ImVector<ImPlotRange> rowLinkData = default, ImVector<ImPlotRange> colLinkData = default, float* tempSizes = default, bool frameHovered = default, bool hasTitle = default)
		{
			ID = id;
			Flags = flags;
			PreviousFlags = previousFlags;
			Items = items;
			Rows = rows;
			Cols = cols;
			CurrentIdx = currentIdx;
			FrameRect = frameRect;
			GridRect = gridRect;
			CellSize = cellSize;
			RowAlignmentData = rowAlignmentData;
			ColAlignmentData = colAlignmentData;
			RowRatios = rowRatios;
			ColRatios = colRatios;
			RowLinkData = rowLinkData;
			ColLinkData = colLinkData;
			if (tempSizes != default(float*))
			{
				TempSizes_0 = tempSizes[0];
				TempSizes_1 = tempSizes[1];
			}
			FrameHovered = frameHovered ? (byte)1 : (byte)0;
			HasTitle = hasTitle ? (byte)1 : (byte)0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotSubplot(uint id = default, ImPlotSubplotFlags flags = default, ImPlotSubplotFlags previousFlags = default, ImPlotItemGroup items = default, int rows = default, int cols = default, int currentIdx = default, ImRect frameRect = default, ImRect gridRect = default, Vector2 cellSize = default, ImVector<ImPlotAlignmentData> rowAlignmentData = default, ImVector<ImPlotAlignmentData> colAlignmentData = default, ImVector<float> rowRatios = default, ImVector<float> colRatios = default, ImVector<ImPlotRange> rowLinkData = default, ImVector<ImPlotRange> colLinkData = default, Span<float> tempSizes = default, bool frameHovered = default, bool hasTitle = default)
		{
			ID = id;
			Flags = flags;
			PreviousFlags = previousFlags;
			Items = items;
			Rows = rows;
			Cols = cols;
			CurrentIdx = currentIdx;
			FrameRect = frameRect;
			GridRect = gridRect;
			CellSize = cellSize;
			RowAlignmentData = rowAlignmentData;
			ColAlignmentData = colAlignmentData;
			RowRatios = rowRatios;
			ColRatios = colRatios;
			RowLinkData = rowLinkData;
			ColLinkData = colLinkData;
			if (tempSizes != default(Span<float>))
			{
				TempSizes_0 = tempSizes[0];
				TempSizes_1 = tempSizes[1];
			}
			FrameHovered = frameHovered ? (byte)1 : (byte)0;
			HasTitle = hasTitle ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotSubplot* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotSubplotPtr : IEquatable<ImPlotSubplotPtr>
	{
		public ImPlotSubplotPtr(ImPlotSubplot* handle) { Handle = handle; }

		public ImPlotSubplot* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotSubplotPtr Null => new ImPlotSubplotPtr(null);

		public ImPlotSubplot this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotSubplotPtr(ImPlotSubplot* handle) => new ImPlotSubplotPtr(handle);

		public static implicit operator ImPlotSubplot*(ImPlotSubplotPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotSubplotPtr left, ImPlotSubplotPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotSubplotPtr left, ImPlotSubplotPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotSubplotPtr left, ImPlotSubplot* right) => left.Handle == right;

		public static bool operator !=(ImPlotSubplotPtr left, ImPlotSubplot* right) => left.Handle != right;

		public bool Equals(ImPlotSubplotPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotSubplotPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotSubplotPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotSubplotFlags Flags => ref Unsafe.AsRef<ImPlotSubplotFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotSubplotFlags PreviousFlags => ref Unsafe.AsRef<ImPlotSubplotFlags>(&Handle->PreviousFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotItemGroup Items => ref Unsafe.AsRef<ImPlotItemGroup>(&Handle->Items);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Rows => ref Unsafe.AsRef<int>(&Handle->Rows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Cols => ref Unsafe.AsRef<int>(&Handle->Cols);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int CurrentIdx => ref Unsafe.AsRef<int>(&Handle->CurrentIdx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect FrameRect => ref Unsafe.AsRef<ImRect>(&Handle->FrameRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect GridRect => ref Unsafe.AsRef<ImRect>(&Handle->GridRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 CellSize => ref Unsafe.AsRef<Vector2>(&Handle->CellSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotAlignmentData> RowAlignmentData => ref Unsafe.AsRef<ImVector<ImPlotAlignmentData>>(&Handle->RowAlignmentData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotAlignmentData> ColAlignmentData => ref Unsafe.AsRef<ImVector<ImPlotAlignmentData>>(&Handle->ColAlignmentData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<float> RowRatios => ref Unsafe.AsRef<ImVector<float>>(&Handle->RowRatios);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<float> ColRatios => ref Unsafe.AsRef<ImVector<float>>(&Handle->ColRatios);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotRange> RowLinkData => ref Unsafe.AsRef<ImVector<ImPlotRange>>(&Handle->RowLinkData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotRange> ColLinkData => ref Unsafe.AsRef<ImVector<ImPlotRange>>(&Handle->ColLinkData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> TempSizes
		
		{
			get
			{
				return new Span<float>(&Handle->TempSizes_0, 2);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool FrameHovered => ref Unsafe.AsRef<bool>(&Handle->FrameHovered);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HasTitle => ref Unsafe.AsRef<bool>(&Handle->HasTitle);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

	}

}
