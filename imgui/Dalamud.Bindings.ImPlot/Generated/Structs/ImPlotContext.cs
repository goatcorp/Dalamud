// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImPlotPlot Plots;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImPlotSubplot Subplots;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotPlot* CurrentPlot;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotSubplot* CurrentSubplot;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotItemGroup* CurrentItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotItem* CurrentItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotItem* PreviousItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotTicker CTicker;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotAnnotationCollection Annotations;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotTagCollection Tags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ChildWindowMade;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotStyle Style;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiColorMod> ColorModifiers;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiStyleMod> StyleModifiers;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotColormapData ColormapData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotColormap> ColormapModifiers;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Tm Tm;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<double> TempDouble1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<double> TempDouble2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<int> TempInt1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DigitalPlotItemCnt;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DigitalPlotOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotNextPlotData NextPlotData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotNextItemData NextItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotInputMap InputMap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte OpenContextThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer MousePosStringBuilder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImPlotAlignmentData AlignmentData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotAlignmentData* CurrentAlignmentH;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotAlignmentData* CurrentAlignmentV;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotContext(ImPoolImPlotPlot plots = default, ImPoolImPlotSubplot subplots = default, ImPlotPlot* currentPlot = default, ImPlotSubplot* currentSubplot = default, ImPlotItemGroup* currentItems = default, ImPlotItem* currentItem = default, ImPlotItem* previousItem = default, ImPlotTicker cTicker = default, ImPlotAnnotationCollection annotations = default, ImPlotTagCollection tags = default, bool childWindowMade = default, ImPlotStyle style = default, ImVector<ImGuiColorMod> colorModifiers = default, ImVector<ImGuiStyleMod> styleModifiers = default, ImPlotColormapData colormapData = default, ImVector<ImPlotColormap> colormapModifiers = default, Tm tm = default, ImVector<double> tempDouble1 = default, ImVector<double> tempDouble2 = default, ImVector<int> tempInt1 = default, int digitalPlotItemCnt = default, int digitalPlotOffset = default, ImPlotNextPlotData nextPlotData = default, ImPlotNextItemData nextItemData = default, ImPlotInputMap inputMap = default, bool openContextThisFrame = default, ImGuiTextBuffer mousePosStringBuilder = default, ImPoolImPlotAlignmentData alignmentData = default, ImPlotAlignmentData* currentAlignmentH = default, ImPlotAlignmentData* currentAlignmentV = default)
		{
			Plots = plots;
			Subplots = subplots;
			CurrentPlot = currentPlot;
			CurrentSubplot = currentSubplot;
			CurrentItems = currentItems;
			CurrentItem = currentItem;
			PreviousItem = previousItem;
			CTicker = cTicker;
			Annotations = annotations;
			Tags = tags;
			ChildWindowMade = childWindowMade ? (byte)1 : (byte)0;
			Style = style;
			ColorModifiers = colorModifiers;
			StyleModifiers = styleModifiers;
			ColormapData = colormapData;
			ColormapModifiers = colormapModifiers;
			Tm = tm;
			TempDouble1 = tempDouble1;
			TempDouble2 = tempDouble2;
			TempInt1 = tempInt1;
			DigitalPlotItemCnt = digitalPlotItemCnt;
			DigitalPlotOffset = digitalPlotOffset;
			NextPlotData = nextPlotData;
			NextItemData = nextItemData;
			InputMap = inputMap;
			OpenContextThisFrame = openContextThisFrame ? (byte)1 : (byte)0;
			MousePosStringBuilder = mousePosStringBuilder;
			AlignmentData = alignmentData;
			CurrentAlignmentH = currentAlignmentH;
			CurrentAlignmentV = currentAlignmentV;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotContextPtr : IEquatable<ImPlotContextPtr>
	{
		public ImPlotContextPtr(ImPlotContext* handle) { Handle = handle; }

		public ImPlotContext* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotContextPtr Null => new ImPlotContextPtr(null);

		public ImPlotContext this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotContextPtr(ImPlotContext* handle) => new ImPlotContextPtr(handle);

		public static implicit operator ImPlotContext*(ImPlotContextPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotContextPtr left, ImPlotContextPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotContextPtr left, ImPlotContextPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotContextPtr left, ImPlotContext* right) => left.Handle == right;

		public static bool operator !=(ImPlotContextPtr left, ImPlotContext* right) => left.Handle != right;

		public bool Equals(ImPlotContextPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotContextPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotContextPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImPlotPlot Plots => ref Unsafe.AsRef<ImPoolImPlotPlot>(&Handle->Plots);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImPlotSubplot Subplots => ref Unsafe.AsRef<ImPoolImPlotSubplot>(&Handle->Subplots);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotPlotPtr CurrentPlot => ref Unsafe.AsRef<ImPlotPlotPtr>(&Handle->CurrentPlot);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotSubplotPtr CurrentSubplot => ref Unsafe.AsRef<ImPlotSubplotPtr>(&Handle->CurrentSubplot);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotItemGroupPtr CurrentItems => ref Unsafe.AsRef<ImPlotItemGroupPtr>(&Handle->CurrentItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotItemPtr CurrentItem => ref Unsafe.AsRef<ImPlotItemPtr>(&Handle->CurrentItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotItemPtr PreviousItem => ref Unsafe.AsRef<ImPlotItemPtr>(&Handle->PreviousItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotTicker CTicker => ref Unsafe.AsRef<ImPlotTicker>(&Handle->CTicker);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotAnnotationCollection Annotations => ref Unsafe.AsRef<ImPlotAnnotationCollection>(&Handle->Annotations);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotTagCollection Tags => ref Unsafe.AsRef<ImPlotTagCollection>(&Handle->Tags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ChildWindowMade => ref Unsafe.AsRef<bool>(&Handle->ChildWindowMade);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotStyle Style => ref Unsafe.AsRef<ImPlotStyle>(&Handle->Style);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiColorMod> ColorModifiers => ref Unsafe.AsRef<ImVector<ImGuiColorMod>>(&Handle->ColorModifiers);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiStyleMod> StyleModifiers => ref Unsafe.AsRef<ImVector<ImGuiStyleMod>>(&Handle->StyleModifiers);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotColormapData ColormapData => ref Unsafe.AsRef<ImPlotColormapData>(&Handle->ColormapData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotColormap> ColormapModifiers => ref Unsafe.AsRef<ImVector<ImPlotColormap>>(&Handle->ColormapModifiers);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Tm Tm => ref Unsafe.AsRef<Tm>(&Handle->Tm);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<double> TempDouble1 => ref Unsafe.AsRef<ImVector<double>>(&Handle->TempDouble1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<double> TempDouble2 => ref Unsafe.AsRef<ImVector<double>>(&Handle->TempDouble2);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<int> TempInt1 => ref Unsafe.AsRef<ImVector<int>>(&Handle->TempInt1);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DigitalPlotItemCnt => ref Unsafe.AsRef<int>(&Handle->DigitalPlotItemCnt);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DigitalPlotOffset => ref Unsafe.AsRef<int>(&Handle->DigitalPlotOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotNextPlotData NextPlotData => ref Unsafe.AsRef<ImPlotNextPlotData>(&Handle->NextPlotData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotNextItemData NextItemData => ref Unsafe.AsRef<ImPlotNextItemData>(&Handle->NextItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotInputMap InputMap => ref Unsafe.AsRef<ImPlotInputMap>(&Handle->InputMap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool OpenContextThisFrame => ref Unsafe.AsRef<bool>(&Handle->OpenContextThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer MousePosStringBuilder => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->MousePosStringBuilder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImPlotAlignmentData AlignmentData => ref Unsafe.AsRef<ImPoolImPlotAlignmentData>(&Handle->AlignmentData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotAlignmentDataPtr CurrentAlignmentH => ref Unsafe.AsRef<ImPlotAlignmentDataPtr>(&Handle->CurrentAlignmentH);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotAlignmentDataPtr CurrentAlignmentV => ref Unsafe.AsRef<ImPlotAlignmentDataPtr>(&Handle->CurrentAlignmentV);
	}

}
