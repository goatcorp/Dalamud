// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public double Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Max;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotRange(double min = default, double max = default)
		{
			Min = min;
			Max = max;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe double Clamp(double value)
		{
			fixed (ImPlotRange* @this = &this)
			{
				double ret = ImPlot.ClampNative(@this, value);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe bool Contains(double value)
		{
			fixed (ImPlotRange* @this = &this)
			{
				byte ret = ImPlot.ContainsNative(@this, value);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotRange* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe double Size()
		{
			fixed (ImPlotRange* @this = &this)
			{
				double ret = ImPlot.SizeNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotRangePtr : IEquatable<ImPlotRangePtr>
	{
		public ImPlotRangePtr(ImPlotRange* handle) { Handle = handle; }

		public ImPlotRange* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotRangePtr Null => new ImPlotRangePtr(null);

		public ImPlotRange this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotRangePtr(ImPlotRange* handle) => new ImPlotRangePtr(handle);

		public static implicit operator ImPlotRange*(ImPlotRangePtr handle) => handle.Handle;

		public static bool operator ==(ImPlotRangePtr left, ImPlotRangePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotRangePtr left, ImPlotRangePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotRangePtr left, ImPlotRange* right) => left.Handle == right;

		public static bool operator !=(ImPlotRangePtr left, ImPlotRange* right) => left.Handle != right;

		public bool Equals(ImPlotRangePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotRangePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotRangePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Min => ref Unsafe.AsRef<double>(&Handle->Min);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Max => ref Unsafe.AsRef<double>(&Handle->Max);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe double Clamp(double value)
		{
			double ret = ImPlot.ClampNative(Handle, value);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe bool Contains(double value)
		{
			byte ret = ImPlot.ContainsNative(Handle, value);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe double Size()
		{
			double ret = ImPlot.SizeNative(Handle);
			return ret;
		}

	}

}
