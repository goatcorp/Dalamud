// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotTicker
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotTick> Ticks;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer TextBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MaxSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LateSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Levels;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTicker(ImVector<ImPlotTick> ticks = default, ImGuiTextBuffer textBuffer = default, Vector2 maxSize = default, Vector2 lateSize = default, int levels = default)
		{
			Ticks = ticks;
			TextBuffer = textBuffer;
			MaxSize = maxSize;
			LateSize = lateSize;
			Levels = levels;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, byte* label)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlotTick* ret = ImPlot.AddTickNative(@this, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, label);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ref byte label)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				fixed (byte* plabel = &label)
				{
					ImPlotTick* ret = ImPlot.AddTickNative(@this, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, (byte*)plabel);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ReadOnlySpan<byte> label)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				fixed (byte* plabel = label)
				{
					ImPlotTick* ret = ImPlot.AddTickNative(@this, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, (byte*)plabel);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, string label)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImPlotTick* ret = ImPlot.AddTickNative(@this, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ImPlotFormatter formatter, void* data)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlotTick* ret = ImPlot.AddTickNative(@this, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, formatter, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(ImPlotTick tick)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlotTick* ret = ImPlot.AddTickNative(@this, tick);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* GetText(int idx)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				byte* ret = ImPlot.GetTextNative(@this, idx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe string GetTextS(int idx)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImPlot.GetTextNative(@this, idx));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* GetText(ImPlotTick tick)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				byte* ret = ImPlot.GetTextNative(@this, tick);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe string GetTextS(ImPlotTick tick)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImPlot.GetTextNative(@this, tick));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void OverrideSizeLate(Vector2 size)
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlot.OverrideSizeLateNative(@this, size);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Reset()
		{
			fixed (ImPlotTicker* @this = &this)
			{
				ImPlot.ResetNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe int TickCount()
		{
			fixed (ImPlotTicker* @this = &this)
			{
				int ret = ImPlot.TickCountNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotTickerPtr : IEquatable<ImPlotTickerPtr>
	{
		public ImPlotTickerPtr(ImPlotTicker* handle) { Handle = handle; }

		public ImPlotTicker* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotTickerPtr Null => new ImPlotTickerPtr(null);

		public ImPlotTicker this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotTickerPtr(ImPlotTicker* handle) => new ImPlotTickerPtr(handle);

		public static implicit operator ImPlotTicker*(ImPlotTickerPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotTickerPtr left, ImPlotTickerPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotTickerPtr left, ImPlotTickerPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotTickerPtr left, ImPlotTicker* right) => left.Handle == right;

		public static bool operator !=(ImPlotTickerPtr left, ImPlotTicker* right) => left.Handle != right;

		public bool Equals(ImPlotTickerPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotTickerPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotTickerPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotTick> Ticks => ref Unsafe.AsRef<ImVector<ImPlotTick>>(&Handle->Ticks);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer TextBuffer => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->TextBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MaxSize => ref Unsafe.AsRef<Vector2>(&Handle->MaxSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LateSize => ref Unsafe.AsRef<Vector2>(&Handle->LateSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Levels => ref Unsafe.AsRef<int>(&Handle->Levels);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, byte* label)
		{
			ImPlotTick* ret = ImPlot.AddTickNative(Handle, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, label);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				ImPlotTick* ret = ImPlot.AddTickNative(Handle, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, (byte*)plabel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				ImPlotTick* ret = ImPlot.AddTickNative(Handle, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, (byte*)plabel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotTick* ret = ImPlot.AddTickNative(Handle, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(double value, bool major, int level, bool showLabel, ImPlotFormatter formatter, void* data)
		{
			ImPlotTick* ret = ImPlot.AddTickNative(Handle, value, major ? (byte)1 : (byte)0, level, showLabel ? (byte)1 : (byte)0, formatter, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTick* AddTick(ImPlotTick tick)
		{
			ImPlotTick* ret = ImPlot.AddTickNative(Handle, tick);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* GetText(int idx)
		{
			byte* ret = ImPlot.GetTextNative(Handle, idx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe string GetTextS(int idx)
		{
			string ret = Utils.DecodeStringUTF8(ImPlot.GetTextNative(Handle, idx));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* GetText(ImPlotTick tick)
		{
			byte* ret = ImPlot.GetTextNative(Handle, tick);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe string GetTextS(ImPlotTick tick)
		{
			string ret = Utils.DecodeStringUTF8(ImPlot.GetTextNative(Handle, tick));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void OverrideSizeLate(Vector2 size)
		{
			ImPlot.OverrideSizeLateNative(Handle, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Reset()
		{
			ImPlot.ResetNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe int TickCount()
		{
			int ret = ImPlot.TickCountNative(Handle);
			return ret;
		}

	}

}
