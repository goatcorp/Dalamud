// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotPointError
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public double X;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Neg;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Pos;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotPointError(double x = default, double y = default, double neg = default, double pos = default)
		{
			X = x;
			Y = y;
			Neg = neg;
			Pos = pos;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotPointError* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotPointErrorPtr : IEquatable<ImPlotPointErrorPtr>
	{
		public ImPlotPointErrorPtr(ImPlotPointError* handle) { Handle = handle; }

		public ImPlotPointError* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotPointErrorPtr Null => new ImPlotPointErrorPtr(null);

		public ImPlotPointError this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotPointErrorPtr(ImPlotPointError* handle) => new ImPlotPointErrorPtr(handle);

		public static implicit operator ImPlotPointError*(ImPlotPointErrorPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotPointErrorPtr left, ImPlotPointErrorPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotPointErrorPtr left, ImPlotPointErrorPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotPointErrorPtr left, ImPlotPointError* right) => left.Handle == right;

		public static bool operator !=(ImPlotPointErrorPtr left, ImPlotPointError* right) => left.Handle != right;

		public bool Equals(ImPlotPointErrorPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotPointErrorPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotPointErrorPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double X => ref Unsafe.AsRef<double>(&Handle->X);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Y => ref Unsafe.AsRef<double>(&Handle->Y);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Neg => ref Unsafe.AsRef<double>(&Handle->Neg);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Pos => ref Unsafe.AsRef<double>(&Handle->Pos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

	}

}
