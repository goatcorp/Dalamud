// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotLegend
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotLegendFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotLegendFlags PreviousFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotLocation Location;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotLocation PreviousLocation;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<int> Indices;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer Labels;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect Rect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Hovered;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Held;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CanGoInside;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotLegend(ImPlotLegendFlags flags = default, ImPlotLegendFlags previousFlags = default, ImPlotLocation location = default, ImPlotLocation previousLocation = default, ImVector<int> indices = default, ImGuiTextBuffer labels = default, ImRect rect = default, bool hovered = default, bool held = default, bool canGoInside = default)
		{
			Flags = flags;
			PreviousFlags = previousFlags;
			Location = location;
			PreviousLocation = previousLocation;
			Indices = indices;
			Labels = labels;
			Rect = rect;
			Hovered = hovered ? (byte)1 : (byte)0;
			Held = held ? (byte)1 : (byte)0;
			CanGoInside = canGoInside ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotLegend* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Reset()
		{
			fixed (ImPlotLegend* @this = &this)
			{
				ImPlot.ResetNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotLegendPtr : IEquatable<ImPlotLegendPtr>
	{
		public ImPlotLegendPtr(ImPlotLegend* handle) { Handle = handle; }

		public ImPlotLegend* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotLegendPtr Null => new ImPlotLegendPtr(null);

		public ImPlotLegend this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotLegendPtr(ImPlotLegend* handle) => new ImPlotLegendPtr(handle);

		public static implicit operator ImPlotLegend*(ImPlotLegendPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotLegendPtr left, ImPlotLegendPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotLegendPtr left, ImPlotLegendPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotLegendPtr left, ImPlotLegend* right) => left.Handle == right;

		public static bool operator !=(ImPlotLegendPtr left, ImPlotLegend* right) => left.Handle != right;

		public bool Equals(ImPlotLegendPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotLegendPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotLegendPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotLegendFlags Flags => ref Unsafe.AsRef<ImPlotLegendFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotLegendFlags PreviousFlags => ref Unsafe.AsRef<ImPlotLegendFlags>(&Handle->PreviousFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotLocation Location => ref Unsafe.AsRef<ImPlotLocation>(&Handle->Location);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotLocation PreviousLocation => ref Unsafe.AsRef<ImPlotLocation>(&Handle->PreviousLocation);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<int> Indices => ref Unsafe.AsRef<ImVector<int>>(&Handle->Indices);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer Labels => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->Labels);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect Rect => ref Unsafe.AsRef<ImRect>(&Handle->Rect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Hovered => ref Unsafe.AsRef<bool>(&Handle->Hovered);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Held => ref Unsafe.AsRef<bool>(&Handle->Held);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool CanGoInside => ref Unsafe.AsRef<bool>(&Handle->CanGoInside);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Reset()
		{
			ImPlot.ResetNative(Handle);
		}

	}

}
