// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Dalamud.Bindings.ImGui;

namespace Dalamud.Bindings.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotTag
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImAxis Axis;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Value;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorBg;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorFg;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int TextOffset;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTag(ImAxis axis = default, double value = default, uint colorBg = default, uint colorFg = default, int textOffset = default)
		{
			Axis = axis;
			Value = value;
			ColorBg = colorBg;
			ColorFg = colorFg;
			TextOffset = textOffset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotTagPtr : IEquatable<ImPlotTagPtr>
	{
		public ImPlotTagPtr(ImPlotTag* handle) { Handle = handle; }

		public ImPlotTag* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotTagPtr Null => new ImPlotTagPtr(null);

		public ImPlotTag this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotTagPtr(ImPlotTag* handle) => new ImPlotTagPtr(handle);

		public static implicit operator ImPlotTag*(ImPlotTagPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotTagPtr left, ImPlotTagPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotTagPtr left, ImPlotTagPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotTagPtr left, ImPlotTag* right) => left.Handle == right;

		public static bool operator !=(ImPlotTagPtr left, ImPlotTag* right) => left.Handle != right;

		public bool Equals(ImPlotTagPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotTagPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotTagPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImAxis Axis => ref Unsafe.AsRef<ImAxis>(&Handle->Axis);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Value => ref Unsafe.AsRef<double>(&Handle->Value);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorBg => ref Unsafe.AsRef<uint>(&Handle->ColorBg);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorFg => ref Unsafe.AsRef<uint>(&Handle->ColorFg);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int TextOffset => ref Unsafe.AsRef<int>(&Handle->TextOffset);
	}

}
